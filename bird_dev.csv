db_id,train_example
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the highest eligible free rate for K-12 students in the schools in Alameda County? Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the lowest three eligible free rates for students aged 5-17 in continuation schools. Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the zip code of all the charter schools in Fresno County Office of Education. Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1. Charter schools refers to `Charter School (Y/N)` = 1 in the frpm"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools with an average score in Math under 400 in the SAT test are exclusively virtual? Exclusively virtual refers to Virtual = 'F'"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program. Magnet schools or offer a magnet program means that Magnet = 1"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the codes of the schools with a total enrollment of over 500. Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17? Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please list the phone numbers of the schools with the top 3 SAT excellence rate. Excellence rate = NumGE1500 / NumTstTakr"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which active district has the highest average score in Reading?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools in merged Alameda have number of test takers less than 100?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the charter number of the school that the average score in Writing is 499?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools in Contra Costa (directly funded) have number of test takers not more than 250?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number of the school that has the highest average score in Math?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many schools in Amador which the Low Grade is 9 and the High Grade is 12?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which school in Contra Costa has the highest number of test takers?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools? Average of average math = sum(average math scores) / count(schools)."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17? Full communication address should include Zip, Street, City, State"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any. Communication number refers to phone number."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: When did the first-through-twelfth-grade school with the largest enrollment open? K-12 means First-through-twelfth-grade"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which cities have the top 5 lowest enrollment number for students in grades 1 through 12? K-12 refers to students in grades 1 through 12."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66? grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson? Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12? Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Under whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name. full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980? between 1/1/1980 and 12/31/1980 means the year = 1980"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the telephone number for the school with the lowest average score in reading in Fresno Unified? Fresno Unified is a name of district;"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which exclusively virtual schools have the top 5 highest average reading scores? Exclusively virtual refers to Virtual = 'F'."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the type of education offered in the school who scored the highest average in Math?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average math score of the school with the lowest average score for all subjects, and in which county is it located? Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. Usually, administrators manage the school stuff."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which state special schools have the highest number of enrollees from grades 1 through 12? State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980? Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 2018 = count(schools that opened in 1980) / 12"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools? Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date. Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the postal street address for the school with the 6th highest Math average? Indicate the school's name. Postal street and mailing street are synonyms."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport? Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many test takers are there at the school/s whose mailing city address is in Fresno?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt? Ratio = count(schools in Colusa) / count(schools in Humboldt)"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Of all the schools with a mailing state address in California, how many are active in San Joaquin?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number and extension number for the school that had the 333rd highest average writing score?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What are the websites for all the partially virtual chartered schools located in San Joaquin? Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many chartered schools located in the city of Hickman are owned by the Elementary School District? Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding? Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus? Directly funded schools refers to FundingType = 'Directly Funded'"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the total amount of Community College District closure in 1989 in the city of San Francisco?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools. State Special Schools means that SOC = 31."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many active and closed District Community Day Schools are there in the county of Alpine?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the district code for the School that does not offer a magnet program in the city of Fresno? When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year? State Special School means EdOpsCode = 'SSS'"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 613360? District Special Education Consortia School refers to EdOpsCode = 'SPECON'."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced? High school can be represented as EILCode = 'HS'"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)? Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100%"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the most common type of grade span served in the city of Adelanto?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount. 'Does not offer physical building' means Virtual = F in the database."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name. State of California refers to state = 'CA'"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the grade span offered in the school with the highest longitude?"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What are the two most common first names among the school administrators? Indicate the district to which they administer."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school."
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the e-mail address of the administrator of the school located in the San Bernardino county, District of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Scools? Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'"
california_schools,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE frpm (
CDSCode text,
Academic Year text,
County Code text,
District Code integer,
School Code text,
County Name text,
District Name text,
School Name text,
District Type text,
School Type text,
Educational Option Type text,
NSLP Provision Status text,
Charter School (Y/N) integer,
Charter School Number text,
Charter Funding Type text,
IRC integer,
Low Grade text,
High Grade text,
Enrollment (K-12) real,
Free Meal Count (K-12) real,
Percent (%) Eligible Free (K-12) real,
FRPM Count (K-12) real,
Percent (%) Eligible FRPM (K-12) real,
Enrollment (Ages 5-17) real,
Free Meal Count (Ages 5-17) real,
Percent (%) Eligible Free (Ages 5-17) real,
FRPM Count (Ages 5-17) real,
Percent (%) Eligible FRPM (Ages 5-17) real,
2013-14 CALPADS Fall 1 Certification Status integer,
PRIMARY KEY (CDSCode),
FOREIGN KEY (CDSCode) REFERENCES schools(CDSCode),
);
CREATE TABLE satscores (
cds text,
rtype text,
sname text,
dname text,
cname text,
enroll12 integer,
NumTstTakr integer,
AvgScrRead integer,
AvgScrMath integer,
AvgScrWrite integer,
NumGE1500 integer,
PRIMARY KEY (cds),
FOREIGN KEY (cds) REFERENCES schools(CDSCode),
);
CREATE TABLE schools (
CDSCode text,
NCESDist text,
NCESSchool text,
StatusType text,
County text,
District text,
School text,
Street text,
StreetAbr text,
City text,
Zip text,
State text,
MailStreet text,
MailStrAbr text,
MailCity text,
MailZip text,
MailState text,
Phone text,
Ext text,
Website text,
OpenDate date,
ClosedDate date,
Charter integer,
CharterNum text,
FundingType text,
DOC text,
DOCType text,
SOC text,
SOCType text,
EdOpsCode text,
EdOpsName text,
EILCode text,
EILName text,
GSoffered text,
GSserved text,
Virtual text,
Magnet integer,
Latitude real,
Longitude real,
AdmFName1 text,
AdmLName1 text,
AdmEmail1 text,
AdmFName2 text,
AdmLName2 text,
AdmEmail2 text,
AdmFName3 text,
AdmLName3 text,
AdmEmail3 text,
LastUpdate date,
PRIMARY KEY (CDSCode),
);
---------------------
QUESTION: What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts who choose issuance after transaction are staying in East Bohemia region? A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts who have region in Prague are eligible for loans? A3 contains the data of region"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: The average unemployment ratio of 1995 and 1996, which one has higher percentage? A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the no. of districts that have female average salary is more than 6000 but less than 10000? A11 refers to average salary; Female mapps to gender = 'F'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many male customers who are living in North Bohemia have average salary greater than 8000? Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the account numbers of clients who are youngest and have highest average salary? If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many customers who choose statement of weekly issuance are Owner? 'POPLATEK TYDNE' stands for weekly issuance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the clients who choose statement of issuance after transaction are Disponent? 'POPLATEK PO OBRATU' stands for issuance after transaction"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement. 'POPLATEK TYDNE' stands for weekly issuance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993. Loan validity more than 12 months refers to duration > 12"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the account opened, how many female customers who were born before 1950 and stayed in Slokolov? Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List out the accounts who have the earliest trading date in 1995 ?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which client issued his/her card in 1994/3/3, give his/her client id."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: The transaction of 840 USD happened in 1998/10/14, when was this account opened?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the gender of the oldest client who opened his/her account in the highest average salary branch? Earlier birthdate refers to older age; A11 refers to average salary"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many clients opened their accounts in Jesenik branch were women? A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts were opened in Litomerice in 1996? A2 refers to district name; Litomerice is one of district names."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the female client who was born in 1976/1/29, which district did she opened her account? Female refers to gender = 'F'; A2 refers to district names"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the first client who opened his/her account in Prague, what is his/her account ID? A3 stands for region names"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100%; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the percentage of loan amount that has been fully paid with no issue. Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue. Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region. Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance. Accounts holder refers to the person who own this account."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List account ID and account opening date for accounts from 'Prachatice'. A2 refers to the names of districts."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: State the district and region for loan ID '4990'. A2, A3 contains the information about district and region respectively."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Provide the account ID, district and region for loan amount greater than USD300,000. A2 contains district names and A3 contains region names."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List the loan ID, district and average salary for loan with duration of 60 months. A3 refers to regions; A11 refers to average salary"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100%; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993. A2 contains the information about district."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List the account IDs with monthly issuance of statements. 'POPLATEK MESICNE' stands for monthly issuance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders. A2 refers to districts; Female refers to gender = 'F'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996? Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many of the account holders in South Bohemia still do not own credit cards? A3 contains the region names; South Bohemia is one of region names."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which district has highest active loan? A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the average loan amount by male borrowers? Male refers to gender = 'M'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: In 1996, which districts have the highest unemployment rate? List their branch location and district name. A2 refers to district names; A13 refers to unemploymant rate in 1996"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: In the branch where the largest number of crimes were committed in 1996, how many accounts were opened? A16 stands for no. of committed crimes 1996"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance? Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved? Frequency = 'POPLATEK MESICNE' stands for monthly issurance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts have running contracts in Branch location 1? Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many high-level credit cards have ""disponent"" type of disposition? High-level credit cards refers to the cards with the gold type."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts are there in the district of ""Pisek""? A2 refers to district name"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which districts have transactions greater than USS$10,000 in 1997?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which accounts placed orders for household payment in Pisek? k_symbol = 'SIPO' refers to household payment"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What are the accounts that have both gold and junior credit cards?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How much is the average amount in credit card made by account holders in a month, in year 2021? Operation = 'VYBER KARTOU' refers to credit card withdrawn"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998? Operation = 'VYBER KARTOU' refers to credit card withdrawal"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who are the female account holders who own credit cards and also have loans? Female refers to gender = 'F'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many female clients' accounts are in the region of South Bohemia? Female refers to gender = 'F'; A3 contains the region 'south Bohemia'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list the accounts whose district is Tabor that are eligible for loans. District refers to column A2; when the account type = 'OWNER', it's eligible for loans"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts in North Bohemia has made a transaction with the partner's bank being AB? A3 contains the region names; North Bohemia is a region."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list the name of the districts with accounts that made withdrawal transactions. A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997? A3 refers to region names; A15 stands for the average number of crimes commited in 1995."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many 'classic' cards are eligible for loan? when the account type = 'OWNER', it's eligible for loan"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many male clients in 'Hl.m. Praha' district? District data appears in the A2; Male means that gender = 'M'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many percent of 'Gold' cards were issued prior to 1998? Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who is the owner of the account with the largest loan amount?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the number of committed crimes in 1995 in the district of the account with the id 532? A15 contains information about number of committed crimes in 1995"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the district Id of the account that placed the order with the id 33333?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List all the withdrawals in cash transactions that the client with the id 3356 makes. operation = 'VYBER' refers to withdrawal in cash"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the weekly issuance accounts, how many have a loan of under 200000? frequency = 'POPLATEK TYDNE' stands for weekly issuance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What type of credit card does the client with the id 13539 own?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the region of the client with the id 3541 from? A3 refers to region"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which district has the most accounts with loan contracts finished with no problems? status = 'A' refers to loan contracts finished with no problems"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Who placed the order with the id 32423?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please list all the transactions made by accounts from district 5."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many of the accounts are from Jesenik district?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List all the clients' IDs whose junior credit cards were issued after 1996. After 1996 means date > = '1997-01-01"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many credit card withdrawals were recorded after 1995? Operation = 'VYBER KARTOU' means credit card withdrawals"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What was the difference in the number of crimes committed in East and North Bohemia in 1996? Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in North Bohemia - Total no. of committed crimes in 1996 in East Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many owner and disponent dispositions are there from account number 1 to account number 10?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? k_symbol refers to the purpose of payments"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What year was account owner number 130 born?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts have an owner disposition and request for a statement to be generated upon a transaction? Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the amount of debt that client number 992 has, and how is this client doing with payments?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Which kind of credit card does client number 9 possess?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How much, in total, did client number 617 pay for all of the transactions in 1998?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Please provide the IDs of the 3 female clients with the largest loans. Female refers to gender = 'F'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000? Man and male refers to gender = 'M'; 'SIPO' stands for household payment"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many accounts in Beroun were opened after 1996?"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many female customers have a junior credit card? Female refers to gender = 'F'"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What proportion of customers who have accounts at the Prague branch are female? Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What percentage of male clients request for weekly statements to be issued? Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many clients who choose statement of weekly issuance are User? Frequency = 'POPLATEK TYDNE' refers to weekly issuance"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Name the account numbers of female clients who are oldest and have lowest average salary? Female refers to 'F' in the gender; A11 contains information about average salary"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many clients who were born in 1920 stay in east Bohemia? East Bohemia appears in the column A3, which refers to the region."
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement. Frequency = 'POPLATEK TYDNE' referes to weekly statement"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: What is the average amount of loan which are still on running contract with statement issuance after each transaction? status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: List all ID and district for clients that can only have the right to issue permanent orders or apply for loans. Only the owner accounts have the right to issue permanent orders or apply for loans"
financial,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE account (
account_id integer,
district_id integer,
frequency text,
date date,
PRIMARY KEY (account_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE card (
card_id integer,
disp_id integer,
type text,
issued date,
PRIMARY KEY (card_id),
FOREIGN KEY (disp_id) REFERENCES disp(disp_id),
);
CREATE TABLE client (
client_id integer,
gender text,
birth_date date,
district_id integer,
PRIMARY KEY (client_id),
FOREIGN KEY (district_id) REFERENCES district(district_id),
);
CREATE TABLE disp (
disp_id integer,
client_id integer,
account_id integer,
type text,
PRIMARY KEY (disp_id),
FOREIGN KEY (client_id) REFERENCES client(client_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE district (
district_id integer,
A2 text,
A3 text,
A4 text,
A5 text,
A6 text,
A7 text,
A8 integer,
A9 integer,
A10 real,
A11 integer,
A12 real,
A13 real,
A14 integer,
A15 integer,
A16 integer,
PRIMARY KEY (district_id),
);
CREATE TABLE loan (
loan_id integer,
account_id integer,
date date,
amount integer,
duration integer,
payments real,
status text,
PRIMARY KEY (loan_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE order (
order_id integer,
account_id integer,
bank_to text,
account_to integer,
amount real,
k_symbol text,
PRIMARY KEY (order_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
CREATE TABLE trans (
trans_id integer,
account_id integer,
date date,
type text,
operation text,
amount integer,
balance integer,
k_symbol text,
bank text,
account integer,
PRIMARY KEY (trans_id),
FOREIGN KEY (account_id) REFERENCES account(account_id),
);
---------------------
QUESTION: Provide the IDs and age of the client with high level credit card, which is eligible for loans. When type is gold, the credit card is high-level"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the most common bond type? most common bond type refers MAX(COUNT(bond_type))"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In the non-carcinogenic molecules, how many contain chlorine atoms? non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the average number of oxygen atoms in single-bonded molecules. single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: On average how many carcinogenic molecules are single bonded? carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In the molecule containing sodium atoms, how many are non-carcinogenic? non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Find the triple-bonded molecules which are carcinogenic. triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of carbon in double-bond molecules? carbon refers to element = 'c'; double-bond molecules refers to bond_type = ' = '; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many triple type bonds are there? triple type bonds refers to bond_type = '#'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In how many atoms is there no bromine? atoms with no bromine refers to element ! = 'br'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Of the first 100 molecules in number order, how many are carcinogenic? first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify by their ID the molecules in which there is silicon. silicon refers to element = 'si';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What elements are in the TR004_8_9 bond atoms? TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What elements are in a double type bond? double type bond refers to bond_type = ' = '; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which type of label is the most numerous in atoms with hydrogen? with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Tellurium is in what type of bond? type of bond refers to bond_type; Tellurium refers to element = 'te'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What atoms are connected in single type bonds? single type bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Indicate which atoms are connected in non-carcinogenic type molecules. label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which element is the least numerous in non-carcinogenic molecules? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What type of bond is there between the atoms TR004_8 and TR004_20? type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id between atom_id = 'TR004_8' and atom_id = 'TR004_20';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What type of label is not on molecules with atoms with tin? tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms with iodine and sulfur type elements are there in single bond molecules? with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify all connected atoms with a triple bond. triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify all the atoms that are connected to the atoms of the TR181 molecule. TR181 molecule refers to molecule_id = 'TR181'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What percentage of carcinogenic-type molecules does not contain fluorine? label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f'), COUNT(molecule_id)) as percent where label = '+'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of carcinogenic molecules in triple type bonds? label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#'), COUNT(bond_id)) as percent where label = '+'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. TR000 is the molecule id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6? TR001 is the molecule id; TR001_2_6 is the bond id"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the difference between the number of molecules that are carcinogenic and those that are not? label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atom IDs of the bond TR_000_2_5? TR_000_2_5 is the bond id"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bond IDs that have the same atom ID 2 of TR000_2? TR000_2 is the atom id; atom ID 2 refers to atom_id2"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top five molecules that have double bonds in alphabetical order. double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of double bonds in the molecule TR008? double bond refers to bond_type = ' = '; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(bond_id)) as percent where molecule_id = 'TR008'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of molecules that are carcinogenic? label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage. hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the type of bond that molecule TR000 has when involved in any bonds? type of bond refers to bond_type; TR000 is the molecule id"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the elements of the toxicology and label of molecule TR060? TR060 is the molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic? TR018 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Please list top two bonds that happened with the molecule TR006 in alphabetical order. TR006 is the molecule id"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many bonds which involved atom 12 does molecule TR009 have? TR009 is the molecule id; molecule_id = 'TR009' means the bond_id LIKE 'TR009_%'; involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules are carcinogenic and have the bromine element? label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bond type and the atoms of the bond ID of TR001_6_9? double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; atoms refer to atom_id or atom_id2"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not. TR001_10 is the atom id; label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules have a triple bond type? triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many connections does the atom 19 have? connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all the elements of the toxicology of the molecule ""TR004"". TR004 is the molecule id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many of the molecules are not carcinogenic? label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among all the atoms from 21 to 25, list all the molecules that are carcinogenic. atoms from 21 to 25 refers to SUBSTRING(atom_id, 7, 2) between 21 and 25; label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bonds that have phosphorus and nitrogen as their atom elements? have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is the molecule with the most double bonds carcinogenic? double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the average number of bonds the atoms with the element iodine have? atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the bond type and the bond ID of the atom 45. bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all the elements of atoms that can not bond with any other atoms. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; atoms cannot bond with other atoms means atom_id NOT in connected table;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atoms of the triple bond with the molecule ""TR447""? TR447 is the molecule id; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the elements of the atoms of TR144_8_19? TR144_8_19 is the bond id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Of all the carcinogenic molecules, which one has the most double bonds? label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the least common element of all carcinogenic molecules? label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the atoms that can bond with the atom that has the element lead? atom that has the element lead refers to atom_id where element = 'pb'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the elements of all the triple bonds. triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What percentage of bonds have the most common combination of atoms' elements? DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What proportion of single bonds are carcinogenic? single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+'), COUNT(bond_id)) where bond_type = '-'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the total atoms consisting of the element carbon and hydrogen. consisting of element carbon and hydrogen refers to element in('c', 'h')"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down atom id2 for atoms with element sulfur. element sulfur refers to element = 's'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the bond type for atoms with element Tin? element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many elements are there for single bond molecules? single bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Write down bond id for molecules that are carcinogenic. label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the single bond molecule id, which molecules are not carcinogenic? label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the composition of element chlorine in percentage among the single bond molecules? element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the labels for TR000, TR001 and TR002? TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down the molecule id for non carcinogenic molecules. label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the total carcinogenic molecules for molecule id from TR000 to TR030. label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down the bond type for molecules from molecule id TR000 to TR050. double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the elements for bond id TR001_10_11? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many bond id have element iodine? iodine refers to element = 'i'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic? calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Does bond id TR001_1_8 have both element of chlorine and carbon? chlorine refers to element = 'cl'; carbon refers to element = 'c'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List down two molecule id of triple bond non carcinogenic molecules with element carbon. carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the percentage of element chlorine in carcinogenic molecules? chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the toxicology elements associated with molecule TR001. TR001 is the molecule id"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Give me the molecule ID of the double bond type. double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Write down the atom IDs of the first and second atoms of triple bond type molecules. first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What are the toxicology elements associated with bond ID TR005_16_26? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many of the single bond type molecules are non-carcinogenic? label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the label for bond ID TR001_10_11? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not. triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = 4; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label. hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify whether the chemical compound that contains Calcium is carcinogenic. calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Determine the bond type that is formed in the chemical compound containing element Tellurium. Tellurium refers to element = 'te'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name chemical elements that form a bond TR001_10_11. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among all chemical compounds identified in the database, what percent of compounds form a triple-bond. triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify whether the molecule that contains atom TR001_1 is carcinogenic. label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is molecule TR151 carcinogenic? label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which toxic element can be found in the molecule TR151? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many chemical compounds in the database are identified as carcinogenic. label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon. carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>10 AND substr(molecule_id, 3, 3) < 50"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms belong to the molecule labeled with carcinogenic compounds? label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which bond ids are double-bond with carcinogenic compound? label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound? label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1."
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the atoms that contain element carbon, which one does not contain compound carcinogenic? label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is molecule TR124 carcinogenic? label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What atoms comprise TR186? TR186 is a molecule id"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the bond type of TR007_4_19? double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name the elements that comprise the atoms of bond TR001_2_4. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many double bonds does TR006 have and is it carcinogenic? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all carcinogenic molecules and their elements. label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name all bonds with single bond types and what atoms are connected to the molecules. single bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which molecules have triple bonds and list all the elements they contain. triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Name the atoms' elements that form bond TR000_2_3. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many bonds are created by bonding atoms with chlorine element? chlorine refers to element = 'cl'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many molecules without sulphur element is not having double bond? double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the carcinogenic label for bond TR001_2_4? label = '+' mean molecules are carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many atoms belong to molecule id TR005?"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many single bonds are there in the list? single bond refers to bond_type = '-';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules which contain ""cl"" element, which of them are carcinogenic? label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules which contain ""c"" element, which of them are not carcinogenic? label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the percentage of carcinogenic molecules which contain the Chlorine element. label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the molecule id of bond id TR001_1_7?"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many elements are contained in bond_id TR001_3_4? element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2? type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the molecule of atom id ""TR000_2"" and atom id 2 ""TR000_4""?"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the element of toxicology for the atom with the ID of TR000_1? atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Is molecule TR000 is carcinogenic or not? label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Find the percentage of atoms with single bond. single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many carcinogenic molecules that consisted of Nitrogen? nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which molecule consisted of Sulphur atom with double bond? sulphur refers to element - 's'; double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which non-carcinogenic molecules consisted more than 5 atoms? label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List all the elements with double bond, consisted in molecule TR024. double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Which carcinogenic molecule have the highest number of atoms consisted in it? label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: How many of the molecules are carcinogenic? label = '+' mean molecules are carcinogenic;"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: Among the molecules between TR004 to TR010, how many of them has single bonds? single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: In the molecule TR008, how many carbons are present? carbon refers to element = 'c'"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the total number of molecules with double bonded oxygen? oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: in molecules with triple bonds, how many of them are not carcinogenic? triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the element and bond type included in the molecule with molecule ID of TR016. element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: What is the atom ID of double bonded carbon in TR012 molecule? carbon refers to element = 'c'; double bond refers to bond_type = ' = ';"
toxicology,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE atom (
atom_id text,
molecule_id text,
element text,
PRIMARY KEY (atom_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE bond (
bond_id text,
molecule_id text,
bond_type text,
PRIMARY KEY (bond_id),
FOREIGN KEY (molecule_id) REFERENCES molecule(molecule_id),
);
CREATE TABLE connected (
atom_id text,
atom_id2 text,
bond_id text,
FOREIGN KEY (atom_id) REFERENCES atom(atom_id),
FOREIGN KEY (atom_id2) REFERENCES atom(atom_id),
FOREIGN KEY (bond_id) REFERENCES bond(bond_id),
);
CREATE TABLE molecule (
molecule_id text,
label text,
PRIMARY KEY (molecule_id),
);
---------------------
QUESTION: List the atom ID of the carcinogenic molecule that contains oxygen? label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which are the cards that have incredibly powerful foils. poweful foils refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the borderless cards available without powerful foils? borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the card names with value that cost more converted mana for the face. more converted mana for the face refers to Max(faceConvertedManaCost);"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name all cards with 2015 frame style ranking below 100 on EDHRec. below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the mythic rarity print cards banned in gladiator format. mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the card id and artist with unknown power which are legal for commander play format. unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values. cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Describe the information about rulings for card named 'Sublime Epiphany' with number 74s. Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the card and artist with the most ruling information. Also state if the card is a promotional printing. with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: State the alternative languages available for card named Annul numbered 29. annul refers to name = 'annul'; numbered 29 refers to number = '29';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name all the cards which have alternative language in Japanese. Japanese' is the language;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Calculate the percentage of the cards availabe in Chinese Simplified. Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the sets available in Italian translation. State the total number of cards per set. Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many types of cards does the artist Aaron Boyd illustrated about card art? Aaron Boyd' is artist;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the keyword found on card 'Angel of Mercy'? Angel of Mercy' is the name of card;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards have infinite power? infinite power refers to power = '*';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What type of promotion is of card 'Duress'? card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the border color of card ""Ancestor's Chosen""? Ancestor's Chosen' is the name of card;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the type of the card ""Ancestor's Chosen"" as originally printed? Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question
What are the languages available for the set that card 'Angel of Mercy' is in? Angel of Mercy' is the name of card;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards of legalities whose status is restricted have text boxes? restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the description about the ruling of card ""Condemn""? Ancestor's Chosen' is the name of card; description about the ruling refers to text;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards of legalities whose status is restricted are found in a starter deck? restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the status of card ""Cloudchaser Eagle""? Cloudchaser Eagle is the name of card;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the type of card ""Benalish Knight""? Benalish Knight' is the name of card;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the rule of playing card ""Benalish Knight""? Benalish Knight' is the name of card; rule of playing card refers to format;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please provide the names of the artists who illustrated the card art in Phyrexian. Phyrexian' is the language; name of artists refers to artist;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of borderless cards? borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards that illusrtated in German have been reprinted? German' is the language; reprinted refers to isReprint = 1;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many borderless cards are illustrated in Russian? borderless card refers to borderColor = 'borderless'; 'Russian' is the language;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of cards whose language is French among the Story Spotlight cards? Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are there with toughness of 99?"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the cards that were illustrated by Aaron Boyd. Aaron Boyd' is artist;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many black border cards are only available on mtgo? black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;

add quotes for string = 'black' and = 'mtgo'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down all the card IDs with converted mana cost of 0. converted mana cost of 0 refers to covertedManaCost = 0;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the card layout of cards with keyword of flying?"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with original type of ""Summon - Angel"" have subtype other than ""Angel""? subtype other than Angel refers to subtypes is not 'Angel';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs. Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards belong to duel deck a? List the ID. duel deck a refers to duelDeck = a;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the edhrecRank for cards with frame version 2015."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down the name of artists for cards in Chinese Simplified. Chinese Simplified' is the language;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards that only available in paper and Japanese language? available in paper refers to availability = 'paper'; 'Japanese is the language;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many of the banned cards are white border? banned card refers to status = 'Banned'; white border refers to borderColor = 'white';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down the uuid for legacy cards and the foreign language of these cards. legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Write down the ruling of Beacon of Immortality. Beacon of Immortality' is the name of card;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are having future frame version and what are the legality status of these cards? future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards for set OGW? State the colour for these cards. set OGW refers to setCode = 'OGW';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the cards in set 10E with converted mana of 5 have translation and what are the languages? set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List down the name of cards with original types of Creature - Elf and the date of rulings for these cards. Creature - Elf is the originalType;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the colors of cards from ID 1-20? What are the format of these cards? ID 1-20 refers to id BETWEEN 1 and 20;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the Artifact cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date. uncommon refers to rarity = 'uncommon';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: On how many cards designed by John Avon is its foil non-powerful? John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many white bordered cards are powerful? white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null (replace)"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1? UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with a 1993 frame version and available on paper have a sensitive content warning? sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? available in paper refers to availability = 'paper'; available in mtgo refers to availability = 'mtgo; frameVersion = 2003;borderColor = 'black'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How much unconverted mana do all the cards created by Rob Alexander cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists all types of cards available in arena. all types refer to subtypes and supertypes

availble in arena refers to availability = 'arena'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists the set code of all cards translated into Spanish. Spanish refer to language; set code refers to setCode"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of legendary frame effect cards have a maximum starting maximun hand
size of +3? maximun hand size of +3 refer to hand = +3; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(hand = '+3'), COUNT(id)) from cards where frameEffects = 'legendary'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of Story Spotlight cards that also have a text box? List them by their ID. Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 1; Percentage refer to DIVIDE(SUM(count(id) where isStorylight = 1), SUM(count(id))) * 100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Calculate the percentage of cards in Spanish. List them by name. Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Indicates the name of all the languages into which the set whose number of cards is 309 is translated. set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many Brazilian Portuguese translated sets are inside the Commander block? Commander block refer to block = 'Commander'; sets refer to setCode; Portuguese refer to language = 'Portuguese (Brasil)'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists by ID all Creature-type cards with legal status. legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Lists all types of cards in German. German refer to language; all types refer to the union of subtypes and supertypes where subtypes is not null AND supertypes is not null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many null power cards contain info about the triggered ability null power cards refers to power is NULL; unknown power cards refers to power is null or power = '*'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Indicates the number of cards with pre-modern format, ruling text ""This is a triggered mana ability"" that do not have multiple faces. do not have multiple faces refers to side IS NULL"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: To which artist does the card with the text ""Das perfekte Gegenmittel zu einer dichten Formation"" belong?"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson? in French refers to language = 'French'; black border color refers to borderColor = 'black'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with print rarity have ruling text printed on 10/01/2009? with print rarity refers to rarity = 'rare'; on 10/01/2009 refers to date = '2009-01-10'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What language is the set of 180 cards that belongs to the Ravnica block translated into? set of 180 cards refers to baseSetSize = 180"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of cards with format commander and legal status do not have a content warning? do not have a content warning refers to hasContentWarning = 0; 
percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where 
format = 'commander' AND Status = 'legal';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of cards without power are in French? in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; 
percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What percentage of Japanese translated sets are expansion sets? Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What kind of printing is on the card that Daren Bader created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many color cards with no borders have been ranked higher than 12000 on EDHRec? color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are oversized, reprinted, and printed for promotions? are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list top three unknown power cards that have promotional types for arena league in alphabetical order. unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language of the card with the multiverse number 149934? multiverse number 149934 refers to multiverseid = 149934;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order. poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What proportion of cards do not have a text box with a normal layout? do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard? don't have multiple faces on a single card side is null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order. don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What languages are available in the set known as Archenemy on the magic card market and having the code ARC? known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the name of set number 5 and its translation? set number 5 refers to id = 5"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language and expansion type of set number 206? set number 206 refers to id = 206"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which Russian set of cards contains the most cards overall? Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games? are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many sets are available just in Japanese and not in Magic: The Gathering Online? Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many card border with black color ? List out the card id. border with black color refers to borderColor = 'black'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards have frame effect as extendedart? List out the id of those cards. 
frame effect as extendedart refers to frameEffects = 'extendedart'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among black card borders, which card has full artwork? white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Point out the language of set id ""174""?"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List out the set name of the set code ""ALL""."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which foreign language used by ""A Pedra Fellwar""? ""A Pedra Fellwar"" refers to name = 'A Pedra Fellwar'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: State the set code of the set with release date of 07/13/2007?"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Mention the base set size and set code of the set that was in block named ""Masques"" and ""Mirage""."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Give the code of sets have expansion type of 'expansion'? code of sets refers to setCode"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the foreign name of the card that has boros watermark? List out the type of this card."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language and flavor text of the card that has colorpie watermark? List out the type of this card."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror? set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Give the code of sets have expansion commander type? code of sets refers to setCode"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Name the foreign name of the card that has abzan watermark? List out the type of this card."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language of the card that has azorius watermark? List out the type of this card."
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful? designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards available in paper have a positive starting maximum hand size? available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '+%'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the names of the cards that have a text box. have a text box refers to isTextless = 0"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the unconverted mana cost of the card ""Ancestor's Chosen""? card ""Ancestor's Chosen"" refers to name = 'Ancestor`s Chosen'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards with a white border color, how many of them have unknown power? unknown power refers to power = '*' or power is null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names. are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the list of all types for the card ""Molimo, Maro-Sorcerer""? card ""Molimo, Maro-Sorcerer"" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the websites where I can purchase the cards that have the promotional type of ""bundle"". promotional type of ""bundle"" refers to promoTypes = 'bundle'; websites refers to purchaseUrls"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many artists have designed a card with a black border color and is available in both ""arena"" and ""mtgo"" printing type? available in both ""arena"" and ""mtgo"" refers to availability like '%arena,mtgo%'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which card costs more converted mana, ""Serra Angel"" or ""Shrine Keeper""? ""Serra Angel"" refers to name = 'Serra Angel'; ""Shrine Keeper"" refers to name = 'Shrine Keeper'; 
card costs more converted mana when the value of convertedManaCost is greater"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which artist designed the card whose promotional name is ""Battra, Dark Destroyer""? promotional name is ""Battra, Dark Destroyer"" refers to flavorName = 'Battra, Dark Destroyer'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style. name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the Italian name of the set of cards with ""Ancestor's Chosen"" is in? Italian is a language which refers to language = 'Italian'; with ""Ancestor's Chosen"" in the card set refers to name = 'Ancestor's Chosen'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many translations are there for the set of cards with ""Angel of Mercy"" in it? set of cards with ""Angel of Mercy"" in it refers to name = 'Angel of Mercy'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the names of the cards in the set ""Hauptset Zehnte Edition"". card set ""Hauptset Zehnte Edition"" refers to translation = 'Hauptset Zehnte Edition'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set of cards with ""Ancestor's Chosen"" in it, is there a Korean version of it? set of cards with ""Ancestor's Chosen"" in it refers to name = 'Ancestor's Chosen'; Korean version refers to language = 'Korean'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards in the set ""Hauptset Zehnte Edition"", how many of them are designed by Adam Rex? card set ""Hauptset Zehnte Edition"" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are there in the base set of ""Hauptset Zehnte Edition""? ""Hauptset Zehnte Edition"" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the Simplified Chinese translation of the name of the set ""Eighth Edition""? Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese is the language; translation of the name refers to translation"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Did the set of cards with ""Angel of Mercy"" appear on Magic: The Gathering Online? card set ""Angel of Mercy"" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: When was the set of cards with ""Ancestor's Chosen"" released? card set ""Ancestor's Chosen"" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the expansion type of the set ""Hauptset Zehnte Edition""? card set ""Hauptset Zehnte Edition"" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the sets in the block ""Ice Age"", how many of them have an Italian translation? sets in the block ""Ice Age"" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Is the set of cards with Adarkar Valkyrie only available outside the United States? card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10? Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 10 refers to baseSetSize < 10"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards in the set Coldsnap have a black border color? card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the name of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is card number 4 in the set Coldsnap? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the Italian flavor text of the card ""Ancestor's Chosen""? Italian refers to language = 'Italian'; flavor text refers to flavorText; ""Ancestor''s Chosen"" refers to name = 'Ancestor''s Chosen'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list all the foreign languages in which the card ""Ancestor's Chosen"" has a flavor text. ""Ancestor''s Chosen"" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the German type of the card ""Ancestor's Chosen""? German refers to language = 'German'; ""Ancestor's Chosen"" refers to name = 'Ancestor''s Chosen'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the Italian text ruling of all the cards in the set Coldsnap. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: When was the ruling for the card 'Reminisce' created? Reminisce refers to name = 'Reminisce'; when created is the date"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the percentage of incredibly powerful cards in the set Coldsnap? card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the code for the set which was released on 2017/7/14? released on 2017/7/14 refers to releaseDate = '2017-07-14'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the keyrune code for the set whose code is 'PKHC'. keyrune code refers to keyruneCode"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set which had 'SS2' as the code, what is its magic card market id? magic card market id refers to mcmId"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the magic card market name for the set which was released on 2017/6/9? magic card market name refers to mcmName"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set ""From the Vault: Lore"", what is its expansion type? set ""From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For the set ""Commander 2014 Oversized"" , give its parent code. the set ""Commander 2014 Oversized"" refers to name = 'Commander 2014 Oversized';"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What was the release date for the set which card ""Evacuation"" in it? ""Evacuation"" refers to name = 'Evacuation'; release date refers to releaseDate"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the number of cards are there in the set of ""Rinascita di Alara""? number of cards refers to baseSetSize; set of ""Rinascita di Alara"" refers to translation = 'Rinascita di Alara'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the expansion type of the set ""Huitième édition"". the set ""Huitième édition"" refers to translation = 'Huitième édition'; expansion type refers to type"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What's the French name of the set of cards with ""Tendo Ice Bridge"" is in? French refers to language = 'French'; ""Tendo Ice Bridge"" is a translated name of a card; translated name refers to translation"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many translations of the name of the set ""Salvat 2011""? translations of the name refers to translation; translation is not NULL; set ""Salvat 2011"" refers to name = 'Salvat 2011'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Tell the Japanese name of the set which card ""Fellwar Stone"" is in it. Japanese name refers to language = 'Japanese'; card ""Fellwar Stone"" refers to name = 'Fellwar Stone'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost. set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the release date for the set ""Ola de frío""? release date is the date of card set being released; set ""Ola de frío"" refers to translation = 'Ola de frío'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What was the expansion type for the set which card ""Samite Pilgrim"" in it? expansion type refers to type; card ""Samite Pilgrim"" refers to name = 'Samite Pilgrim'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'. the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Show the Simplified Chinese translation of the name of the set ""Mirrodin""? Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set ""Mirrodin"" refers to name = 'Mirrodin'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot? created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the unique id of the set that has the highest number of cards? the highest number of cards refers to MAX(baseSetSize); unique id refers to id"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana? doesn't have multiple faces refers to side IS NULL; illustrator refers to artist"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the most common visual frame effects among the incredibly powerful foils? when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards with unknown power that can't be found in foil is in duel deck A? unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: In duels, what are the top 10 cards with the highest uncoverted mana cost? duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: When was the oldest mythic card released and what are its legal play formats? the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many cards did Volkan BaÇµa illustrated whose foreign language is in French? Volkan BaÇµa refers to artist = 'Volkan Baga'; foreign language is in French refers to language = 'French'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: How many rare enchantment Abundance cards are there whose play format status are all legal? rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which of the play formats has the highest number of banned status? Indicate the play format and the name of the card. play format refers to format uuid; banned status refers to status = 'banned'; the highest number of banned status refers to MAX(status = 'banned')"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the language of the ""Battlebond"" set? ""Battlebond"" set refers to name = 'Battlebond'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated. format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format. ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'banned'; play format refers to format; cards name refers to name"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the artists who illustrated cards with black borders which are available only in arena. black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Find the uuid of cards in which the old school format is restricted or banned. old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Among the card designed by Matthew D. Wilson, how many are available only in the paper? card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal. the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'legal'; the formats refers to format"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: Find and list the names of sets which doesn't have Japanese translation but have Korean translation. names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'"
card_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cards (
id integer,
artist text,
asciiName text,
availability text,
borderColor text,
cardKingdomFoilId text,
cardKingdomId text,
colorIdentity text,
colorIndicator text,
colors text,
convertedManaCost real,
duelDeck text,
edhrecRank integer,
faceConvertedManaCost real,
faceName text,
flavorName text,
flavorText text,
frameEffects text,
frameVersion text,
hand text,
hasAlternativeDeckLimit integer,
hasContentWarning integer,
hasFoil integer,
hasNonFoil integer,
isAlternative integer,
isFullArt integer,
isOnlineOnly integer,
isOversized integer,
isPromo integer,
isReprint integer,
isReserved integer,
isStarter integer,
isStorySpotlight integer,
isTextless integer,
isTimeshifted integer,
keywords text,
layout text,
leadershipSkills text,
life text,
loyalty text,
manaCost text,
mcmId text,
mcmMetaId text,
mtgArenaId text,
mtgjsonV4Id text,
mtgoFoilId text,
mtgoId text,
multiverseId text,
name text,
number text,
originalReleaseDate text,
originalText text,
originalType text,
otherFaceIds text,
power text,
printings text,
promoTypes text,
purchaseUrls text,
rarity text,
scryfallId text,
scryfallIllustrationId text,
scryfallOracleId text,
setCode text,
side text,
subtypes text,
supertypes text,
tcgplayerProductId text,
text text,
toughness text,
type text,
types text,
uuid text,
variations text,
watermark text,
PRIMARY KEY (id),
);
CREATE TABLE foreign_data (
id integer,
flavorText text,
language text,
multiverseid integer,
name text,
text text,
type text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE legalities (
id integer,
format text,
status text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
CREATE TABLE sets (
id integer,
baseSetSize integer,
block text,
booster text,
code text,
isFoilOnly integer,
isForeignOnly integer,
isNonFoilOnly integer,
isOnlineOnly integer,
isPartialPreview integer,
keyruneCode text,
mcmId integer,
mcmIdExtras integer,
mcmName text,
mtgoCode text,
name text,
parentCode text,
releaseDate date,
tcgplayerGroupId integer,
totalSetSize integer,
type text,
PRIMARY KEY (id),
);
CREATE TABLE set_translations (
id integer,
language text,
setCode text,
translation text,
PRIMARY KEY (id),
FOREIGN KEY (setCode) REFERENCES sets(code),
);
CREATE TABLE rulings (
id integer,
date date,
text text,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (uuid) REFERENCES cards(uuid),
);
---------------------
QUESTION: List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'banned'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user has a higher reputation, Harlan or Jarrod Dixon? ""Harlan"" and ""Jarrod Dixon"" are both DisplayName; highest reputation refers to Max(Reputation)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the display names of all the users whose accounts were created in the year 2014. account created in the year 2014 refers to year(CreationDate) = 2014"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users last accessed the website after 2014/9/1? last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who has the most number of views? user who has the most number of view refers to Max(Views)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes? more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users with more than 10 views created their account after the year 2013? more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts does the user csgillespie own? ""csgillespie"" is the DisplayName of user"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the titles of the posts owned by the user csgillespie? ""csgillespie"" is the DisplayName of user"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Who is the owner of the post ""Eliciting priors from experts""? ""Eliciting priors from experts"" is the Title of post; owner refers to DisplayName"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the title of the post that is owned by csgillespie and has the highest popularity? ""csgillespie"" is the DisplayName of user; highest popularity refers to Max(ViewCount)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who is the owner of the most valuable post? most valuable post refers to Max(FavoriteCount)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the total number of comments of all the posts owned by csgillespie? ""csgillespie"" is the DisplayName of user; total number of comments refers to Sum(CommentCount)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the post that got the most number of answers owned by csgillespie, how many answers did it get? ""csgillespie"" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who last edited the post ""Examples for teaching: Correlation does not mean causation""? ""Examples for teaching: Correlation does not mean causation"" is the Title of post; user who last edited refers to LastEditorUserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts owned by csgillespie, how many of them are root posts? ""csgillespie"" is the DisplayName of user; root post refers to ParentId IS Null"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the display names of all the users who owns a post that is well-finished. the post that is well-finished refers to ClosedDate IS NOT Null"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts owned by an elder user, how many of them have a score of over 19? elder users refers to Age > 65; Score of over 19 refers to Score > = 20"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the location of the owner of the post ""Eliciting priors from experts""? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: From which post is the tag ""bayesian"" excerpted from? Please give the body of the post. ""bayesian"" is the TagName; excerpt from refers to ExcerptPostId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: From which post is the most popular tag excerpted from? Please give the body of the post. most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many badges has the user csgillespie obtained? ""csgillespie"" is the DisplayName of user"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the names of the badges obtained by csgillespie. ""csgillespie"" is the DisplayName of user"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the badges obtained by csgillespie, how many of them were obtained in the year 2011? ""csgillespie"" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who has obtained the most number of badges? who obtained the most number of badges refers to UserID with Max(Count(Id))"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average score of the posts owned by the user csgillespie? ""csgillespie"" is the DisplayName of user; average score refers to AVG(Score)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average number of badges obtained by a user with over 200 views? user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts with a score of over 20, what is the percentage of them being owned by an elder user? score of over 20 refers to Score > 20; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many votes did the user No.58 take on 2010/7/19? user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Indicate the creation date of the maximum number of votes. the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the number of ""Revival"" badges. number refers to Id; 'Revival' is the Name of badge"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the title for the post which got the highest score comment? highest score comment refers to Max(comments.Score)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the post which got 1910 view counts, how many comments does it get?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get? user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the only one comment text of the post with parent id 107829. one comment refers to CommentCount = '1'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished? user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the owner user of post No. 65041, what is his/her reputation points? post no. 65041 refers to Id = '65041'; reputation point refers to Reputation"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the user with the display name of ""Tiago Pasqualini"", how many posts did he/she own? ""Tiago Pasqualini"" is the DisplayName;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the display name of the user who made the vote No.6347. vote no. 381800 refers to Id = '6347'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the number of votes for the post about data visualization. About data visualization is the Title that contains 'data visualization';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the user whose display name is ""DatEpicCoderGuyWhoPrograms"", what is his/her badge's name? ""DatEpicCoderGuyWhoPrograms"" is the DisplayName;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: For the user No.24, how many times is the number of his/her posts compared to his/her votes? user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get? ""Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer"" is the Title of post; views refers to ViewCount"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write the contents of comments with a score of 17. score of 17 refers to Score = 17; contents of comments refers to Text"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user has the website URL listed at 'http://stackoverflow.com' ""http://stackoverflow.com"" is the WebsiteUrl; user refers to DisplayName"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the badge name that user 'SilentGhost' obtained? ""SilentGhost"" is the DisplayName of user;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Name the user that commented 'thank you user93!' ""thank you user93"" is the Text of comment; user refers to DisplayName"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write all comments made by user 'A Lion.' ""A Lion"" is the DisplayName of user; comment refers to Text"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user? ""Understanding what Dassault iSight is doing?"" is the Title of post; user refers to DisplayName;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?' ""How does gentle boosting differ from AdaBoost?"" is the Title of post; comments refers to Text"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Name 10 users with the badge name 'Necromancer.' ""Necromancer"" is the Name of badge; users refers to DisplayName"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' 'Open source tools for visualizing multi-dimensional data' is the Title of Post"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the title of posts which were edited by Vebjorn Ljosa. ""Vebjorn Ljosa"" is the DisplayName; last edited refers to LastEditorUserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the total score of the posts edited by Yevgeny and include the user's website URL. ""Yevgeny"" is the DisplayName; edited refers to LastEditorUserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?' ""Why square the difference instead of taking the absolute value in standard deviation?"" is the Title of post;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How much is the total bounty amount of the post titled about 'data' About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user added a bounty amount of 50 to the post title mentioning variance? ""bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Calculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable. ""humor"" is the Tags; comment of the post refers to Text; average view count = AVG(ViewCount)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the total number of comments posted by user ID 13."
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user ID has the highest reputation? highest reputation refers to Max(Reputation)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user ID has the lowest view? lowest views refers to Min(Views)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users are awarded with supporter badge during year 2011? ""Supporter"" is the Name of badge; in year 2011 refers to year(Date) = 2011"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users are awarded with more than 5 badges? more than 5 badges refers to Count (Name) > 5; user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users from New York have a teacher and supporter badge? ""Supporter"" and ""Teachers"" are both Name of badge; 'New York' is the Location; user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user created post ID 1 and what is the reputation of this user?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which user have only one post history per post and having at least 1000 views? having at least 1000 view refers to Views > = 1000; user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which users have posted the most comments. List out the user's badge? user with the most comments refers to UserId where Max(Count(Id)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users from India have the teacher badges? ""India"" is the Location; ""Teacher"" is the Name of badge"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the percentage difference of student badges given during 2010 and 2011? ""Students"" is the Name of badge;  during 2010 refers to Year(Date) = 2010; 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out all post that are related to post ID 61217 and what is the popularity of this post? post related refers to RelatedPostId; popularity refers to ViewCount"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the score and the link type ID for post ID 395?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out all post ID with score more than 60 and list out all the user ID that created these post. score more than 60 refers to Score > 60"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the sum of favourite count gained by user ID 686 in 2011? in 2011 refers to year (CreatinDate) = 2011"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average of the up votes and the average user age for users creating more than 10 posts? creating more than 10 post refers to Count (UserId) > 10; up votes average = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users obtained the ""Announcer"" badge? ""Announcer"" is the Name of badge; user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out the name of badges that users obtained on 7/19/2010 7:39:08 PM. on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many positive comments are there on the list? Positive comment refers to score > 60"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM. detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts have a score of 10 on the list? score of 10 refers to Score = 10; post refers to Id"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the names of badges that users who have the highest reputation obtained? highest reputation refers to Max(Reputation); user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM. on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the name of badge that the user whose display name is ""Pierre"" obtained?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out the dates that users who are located in Rochester, NY obtained their badges? ""Rochester, NY"" is the Location of user; user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users who obtained the ""Teacher"" badge, calculate their percentage of users ""Teacher"" is the Name of badge;  percentage = Divide (Count(UserId where it's ""Teacher""), Count(UserId)) * 100"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users who obtained the ""Organizer"" badges, calculate the percentage of users who are teenagers. ""Organizer"" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM? detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List out the age of users who located in Vienna, Austria obtained the badge? ""Vienna, Austria"" is the Location"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many adults who obtained the badge Supporter? Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM. on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the name of badges that users who have the lowest reputation obtained? lowest reputation refers to Min(Reputation); user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State the name of badge that the user whose display name is ""Sharpie"" obtained. ""Sharpie"" is the DisplayName of user; user refers to UserId"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many elders obtained the ""Supporter"" badge? ""Supporter"" is the Name of badge;  elders refers to Age > 65"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the name of user with the ID of 30? name of user refers to DisplayName;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users were from New York? New York refers to Location;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many votes were made in 2010? YEAR(CreationDate) = 2010;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users were adult? adult refers to user where Age BETWEEN 19 and 65;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which users have the highest number of views? users have the highest number of views refer to DisplayName where MAX(Views);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Calculate the ratio of votes in 2010 and 2011. DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the name of tags used by John Stauffer's? DisplayName = 'John Stauffer';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts were created by Daniel Vassallo? DisplayName = 'Daniel Vassallo';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many votes were made by Harlan? DisplayName = 'Harlan';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which post by slashnick has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); DisplayName = 'slashnick';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts by Matt Parker have more than 4 votes? more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many negative comments did Neil McGuigan get in his posts? Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: State all the tags used by Mark Meckes in his posts that doesn't have comments. DisplayName = 'Mark Meckes';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List all the name of users that obtained the Organizer Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Based on posts posted by Community, calculate the percentage of posts that use the R language. DIVIDE(COUNT(PostId WHERE TagName = R language)), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Calculate the difference in view count from post posted by mornington and view count from posts posted by Amos. SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users received commentator badges in 2014? commentator is the name of the badge; year(Date) = 2014;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts were created on 21st July, 2010? created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the display names and ages of user who got the highest in views? the highest in views refers to MAX(Views);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the last edit date and last edit user ID for the post ""Detecting a given face in a database of facial images"". Title = 'Detecting a given face in a database of facial images';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many negative comments were given by user ID 13? negative comments refer to Score < 60;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the post title which got positive comments and display names of the users who posted those comments. positive comments refer to Score > 60;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the badge names received in 2011 for the user whose location is in the North Pole. received in 2011 refers to year(Date) = 2011;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the users' display names and available website URLs of the post with favorite count of more than 150. favorite count of more than 150 refers to FavoriteCount > 150;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the post history counts and last edit date of the post title ""What is the best introductory Bayesian statistics textbook?"""
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the last accessed date and location of the users who received the outliers badge. Outliers is the name of the badge;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the related post title of ""How to tell if something happened in a data set which monitors a value over time""."
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the post IDs and badge names of the user Samuel in 2013. Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the owner's display name of the most popular post? Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag. user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Write down the related posts titles and link type IDs of the post ""What are principal component scores?"". Title = 'What are principal component scores?';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Describe the display name of the parent ID for child post with the highest score. If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount. vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What are the titles of the top 5 posts with the highest popularity? Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many tags have post count between 5,000 to 7,000? post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the owner user id of the most valuable post? the most valuable post refers to MAX(FavoriteCount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How old is the most influential user? How old describes age; the most influential refers to user where MAX(Reputation);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts with votes that were created in 2011 have a bounty of 50? created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the id of the youngest user? the youngest user refers to MIN(Age);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the score of the post with the most popular tag? Higher view count means the post has higher popularity; the most popular tag refers to MAX(Count);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average monthly number of links created in 2010 for posts that have no more than 2 answers? DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts that were voted by user 1465, what is the id of the most valuable post? user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the title of the post with the oldest post link? the oldest post link refers to MIN(CreaionDate);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who acquired the highest amount of badges? highest amount of badges refers to MAX(COUNT(Name));"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: When did ""chl"" cast its first vote in a post? DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the date when the youngest user made his or her first post? the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the display name of the user who acquired the first Autobiographer badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more? favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average number of posts voted by the oldest users? average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Who has the highest reputation? Please give the display name. the highest reputation refers to MAX(Reputation);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users whose reputations are higher than 2000 and the number of views is higher than 1000? reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list all display names of users who are adults. adults refer to users where Age BETWEEN 19 and 65;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts did Jay Stevens have in 2010? DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which post by Harvey Motulsky has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which post has the highest score? Please give its id and title's name. the highest score refers to MAX(Score); owner's name refers to DisplayName;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the average score of Stephen Turner's posts? DisplayName = 'Stephen Turner'; average score refers to AVG(Score);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Please list the users' display names whose posts had over 20000 views in 2011. had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Which is the most valuable post in 2010? Please give its id and the owner's display name. the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the percentage of posts whose owners had a reputation of over 1000 in 2011? DIVIDE(COUNT(Id where CreationDate = 2011 and Reputation > 1000), COUNT(Id) ) * 100 as percentage;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the percentage of teenage users. DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time. views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the total number of posts with views above average. views above average refer to ViewCount > AVG(ViewCount);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many comments were added to the post with the highest score? the highest score refers to MAX(Score);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of posts that have been viewed over 35000 times but have received no comments from other users. have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the display name and location of the user, who was the last to edit the post with ID 183. last to edit refers to MAX(LastEditDate);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the latest badge awarded to the user with the display name Emmett. the latest badge refers to Name FROM badges where MAX(Date);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of adult users who have cast over 5000 upvotes. adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of posts and comments left by the user, who has the latest created user account. the latest created user account refers to MAX(CreationDate);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many users were awarded with 'Citizen Patrol' badge? Citizen Patrol' is the name of the badge;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Count the number of posts with a tag specified as 'careers'. tag specified as 'careers' refers to TagName = 'careers';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: When did the user known as 'IrishStat' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Identify the number of posts that offer a bounty amount over 30. bounty amount over 30 refers to BountyAmount > = 30;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among all the posts posted by the most influential user, identify the percentage with a score above 50. The user with higher reputation has more influence; DIVIDE(COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation)) as percentage;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: How many posts have a score less than 20? score less than 20 refers to Score < 20;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the tags with tag ID below 15, how many of them have 20 count of posts and below? ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the excerpt post ID and wiki post ID of the tag named sample? tag named sample refers to TagName = 'sample';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the user's reputation and up vote number of the user that commented ""fine, you win :)"". Text = 'fine, you win :)';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Give the texts commented on the post about linear regression. Title = 'How can I adapt ANOVA for binary data?';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the posts with views ranging from 100 to 150, what is the comment with the highest score? views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the creation date and age of the user that commented with webiste. commented with webiste refers to the value contains 'http://'"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: In comments with 0 score, how many of the posts have view count lower than 5? view count lower than 5 refers to ViewCount < 5;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: In posts with 1 comment, how many of the comments have 0 score? in posts with 1 comment refers to CommentCount = 1;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among products comments with 0 score, what is the total number of users ages 40 years old?"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the post ID and the comments commented in the post titled by ""Group differences on a five point Likert item""? Title = 'Group differences on a five point Likert item';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: What is the up vote number of the user that commented ""R is also lazy evaluated.""? commented ""R is also lazy evaluated."" refers to Text of the comment;"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: List the comments commented by the user with a username of Harvey Motulsky. comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: In comments with score between 1 to 5, list down the display names of the users with 0 down votes. DownVotes = 0; Score BETWEEN 1 and 5"
codebase_community,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE badges (
Id integer,
UserId integer,
Name text,
Date datetime,
PRIMARY KEY (Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE comments (
Id integer,
PostId integer,
Score integer,
Text text,
CreationDate datetime,
UserId integer,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postHistory (
Id integer,
PostHistoryTypeId integer,
PostId integer,
RevisionGUID text,
CreationDate datetime,
UserId integer,
Text text,
Comment text,
UserDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
CREATE TABLE postLinks (
Id integer,
CreationDate datetime,
PostId integer,
RelatedPostId integer,
LinkTypeId integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (RelatedPostId) REFERENCES posts(Id),
);
CREATE TABLE posts (
Id integer,
PostTypeId integer,
AcceptedAnswerId integer,
CreaionDate datetime,
Score integer,
ViewCount integer,
Body text,
OwnerUserId integer,
LasActivityDate datetime,
Title text,
Tags text,
AnswerCount integer,
CommentCount integer,
FavoriteCount integer,
LastEditorUserId integer,
LastEditDate datetime,
CommunityOwnedDate datetime,
ParentId integer,
ClosedDate datetime,
OwnerDisplayName text,
LastEditorDisplayName text,
PRIMARY KEY (Id),
FOREIGN KEY (OwnerUserId) REFERENCES users(Id),
FOREIGN KEY (LastEditorUserId) REFERENCES users(Id),
FOREIGN KEY (ParentId) REFERENCES posts(Id),
);
CREATE TABLE tags (
Id integer,
TagName text,
Count integer,
ExcerptPostId integer,
WikiPostId integer,
PRIMARY KEY (Id),
FOREIGN KEY (ExcerptPostId) REFERENCES posts(Id),
);
CREATE TABLE users (
Id integer,
Reputation integer,
CreationDate datetime,
DisplayName text,
LastAccessDate datetime,
WebsiteUrl text,
Location text,
AboutMe text,
Views integer,
UpVotes integer,
DownVotes integer,
AccountId integer,
Age integer,
ProfileImageUrl text,
PRIMARY KEY (Id),
);
CREATE TABLE votes (
Id integer,
PostId integer,
VoteTypeId integer,
CreationDate date,
UserId integer,
BountyAmount integer,
PRIMARY KEY (Id),
FOREIGN KEY (PostId) REFERENCES posts(Id),
FOREIGN KEY (UserId) REFERENCES users(Id),
);
---------------------
QUESTION: Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10)), (COUNT(UserId where Score BETWEEN 5 and 10)) as percentage;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please list all the superpowers of 3-D Man. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have the super power of ""Super Strength""? super power of ""Super Strength"" refers to power_name = 'Super Strength'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with the super power of ""Super Strength"", how many of them have a height of over 200cm? super power of ""Super Strength"" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please list the full names of all the superheroes with over 15 super powers. 15 super powers refers to COUNT(full_name) > 15"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have blue eyes? blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the colour of Apocalypse's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with blue eyes, how many of them have the super power of ""Agility""? blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of ""Agility"" refers to power_name = 'Agility'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please list the superhero names of all the superheroes that have blue eyes and blond hair. blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of ""Agility"" refers to power_name = 'Agility'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes are published by Marvel Comics? published by Marvel Comics refers to publisher_name = 'Marvel Comics'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Please give the full name of the tallest hero published by Marvel Comics. the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Who is the publisher of Sauron? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes from Marvel Comics, how many of them have blue eyes? the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average height of the superheroes from Marvel Comics? superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of ""Super Strength""? the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of ""Super Strength"" refers to power_name = 'Super Strength'; Calculation = MULTIPLY(DIVIDE(SUM(power_name = 'Super Strength'), COUNT(id)), 100)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes did DC Comics publish? superheroes that DC Comics published refers to publisher_name = 'DC Comics'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which publisher published the slowest superhero? the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many gold-eyed superheroes did Marvel Comics publish? gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the publisher's name of Blue Beetle II? Blue Beetle II refers to superhero_name = 'Blue Beetle II'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes with blonde hair are there? superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Who is the dumbest superhero? the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is Copycat's race? Copycat is the superhero_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have durability of less than 50? durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What are the names of the superheroes with the power of death touch? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many female superheroes have a strength value of 100? female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the name of the superhero that has the most powers? name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many vampire superheroes are there? vampire superheroes refers to race = 'Vampire'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the publisher ID of Star Trek. Star Trek is the publisher_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average attribute value of all superheroes. average attribute value of all superheroes refers to AVG(attribute_value)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the total number of superheroes without full name? superheroes without full name refers to full_name IS NULL"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the eye colour of superhero with superhero ID 75? eye colour refers to colour where eye_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the superpowers of the superhero called Deathlok. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average weight of all female superheroes? female refers to gender_id = 2; average weight refers to AVG(weight_kg)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down at least five superpowers of male superheroes. male refers to gender = 'Male'; superpowers refers to power_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the name of the alien superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color. height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to eye_colour_id = 1"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the superpower of hero ID 56? superpower refers to hero_power"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down at least five full name of Demi-God superheroes. Demi-God superheroes refers to race = 'Demi-God'"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many bad superheroes are there? bad superheroes refers to alignment_id = Bad"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the race of the superhero who weighed 169 kg. weighed 169 kg refers to weight_kg = 169"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the hair colour of the human superhero who is 185 cm tall. 185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the eye clolour of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics? height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_id = 13; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes. Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which power do superheroes have the most of? power that superheroes have the most refers to MAX(COUNT(power_name))"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Indicate the attribute value of superhero Abomination. Abomination refers to superhero_name = 'Abomination';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What are the superpowers of heroes with ID 1? superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many heroes have stealth power? stealth power refers to power_name = 'stealth';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the hero's full name with the highest attribute in strength? highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average of superheroes with no skin colour? average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes were published by Dark Horse Comics? published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which superhero has the most durability published by Dark Horse Comics? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the eyes colour of Abraham Sapien? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the name of superheroes with flight power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which group does superhero A-Bomb belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the percentage of blue female superheroes among all female superheroes? percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color; female refers to gender = 'Female';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the hero name and race of Charles Chandler. hero name refers to superhero_name; Charles Chandler is the full name of superhero;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the gender of Agent 13 hero? Agent 13 hero refers to superhero_name = 'Agent 13';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide superheroes' names who have the adaptation power. adaptation power refers to power_name = 'Adaptation';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many powers does Amazo hero have? Amazo hero refers to superhero_name = 'Amazo';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the powers of Hunter Zolomon. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the heights of the heroes whose eye colours are amber. heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the heroes' names whose eyes and hair colours are both black. heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the eye colours of the heroes whose skin colours are gold. skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the full names of vampire heroes. vampire heroes refers to race = 'Vampire';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Describe the names of neutral alignment superheroes. names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many heroes have the highest attribute value in strength? highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What are the race and alignment of Cameron Hicks? Cameron Hicks refers to superhero_name = 'Cameron Hicks';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many percent of female heroes were published by Marvel Comics? percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Find the average weight of the heroes who are aliens. average = AVG(weight_kg); aliens refers to race = 'Alien';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight. difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average height for each superhero. average = DIVIDE(SUM(height_cm), COUNT(all heros));"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is Abomination's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the superheroes with the race of god/eternal, how many of them are male race ""god/eternal"" refers to race_id = 21; male refers to gender.id = 1"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which hero was the fastest? which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes have a neutral alignment? neutral alignment refers to alignment_id = 3;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: State all of 3-D Man's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which superheroes have blue eyes with brown hair? which superheroes refers to superhero_name; blue eyes refers to eye_colour_id = 7; brown hair refers to hair_colour_id = 9;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the publisher for Hawkman, Karate Kid and Speedy? publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many superheroes didn't have any publisher? didn't have any publisher refers to publisher.id = 1;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the percentage of superheroes with blue eyes. percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE eye_colour_id = 7), COUNT(superhero_name)), 100.0); blue eyes refers to eye_colour_id = 7;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Find the ratio between male superheroes and female superheroes. ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender_id = 1; female superheroes refers to gender_id = 2;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Who is the tallest superhero? who refers to superhero_name; tallest superhero refers to MAX(height_cm);"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the power ID of cryokinesis? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the name of superhero with superhero ID 294. name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the full names of superheroes with missing weight. missing weight refers to weight_kg = 0 OR weight_kg = NULL;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the superpowers of the superhero has Helen Parr as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Find the race of the superhero who weighs 108kg and is 188cm tall. weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the publisher name of the superhero ID 38? superhero ID 38 refers to superhero.id = 38;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the race of the superhero with maximum attribute value? maximum attribute value refers to MAX(attribute_value);"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the alignment and superpowers of the superhero named Atom IV. superpowers refers to power_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down at least five full names of superheroes with blue eyes. blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average attribute value of all neutral superheroes. average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the skin colour of the superheroes with 100 attribute value. skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Count the good female superheroes. good refers to alignment.id = 1; female refers to gender.id = 2;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the names of superheroes with attribute value between 75 to 80. names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the race of the blue-haired male superhero. blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among the bad superheroes, what is the percentage of female superheroes? bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How strong is the Hulk? how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List down Ajax's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many green-skinned villains are there in the superhero universe? green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: How many female superheroes are in Marvel Comics? female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify superheroes who can control wind and list their names in alphabetical order. superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the gender of the superhero who has the ability of Phoenix Force. ability of Phoenix Force refers to power_name = 'Phoenix Force';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the heaviest superhero in DC Comics. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the average height of a non-human superhero in Dark Horse Comics? average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Count the fastest superheroes. fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; if SUM(publisher_name = 'DC Comics') > SUM(publisher_name = 'Marvel Comics'), it means DC Comics published more superheroes than Marvel Comics; if SUM(publisher_name = 'Marvel Comics') > SUM(publisher_name = 'Marvel Comics'), it means Marvel Comics published more heroes than DC Comics; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Identify the weakest attribute of the Black Panther. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is Abomination's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Name the tallest superhero. tallest superhero refers to MAX(height_cm);"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Name the superhero, otherwise known as Charles Chandler. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among all superheroes created by George Lucas, identify the percentage of female superheroes. created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: What is the total number of superheroes that have John as their first name? have John as their first name refers to full_name LIKE 'John%';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the hero ID of superhero with the lowest attribute value. lowest attribute value refers to MIN(attribute_value);"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the full name of the superhero named Alien."
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: In superheroes with weight less than 100, list the full name of the superheroes with brown eyes. weight less than 100 refers to weight_kg < 100"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the attribute value of the superhero named Aquababy."
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Provide the weight and race of the superhero with superhero ID 40. weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Calculate the average height of all neutral superheroes."
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the hero ID of superheroes have intellegence as their power. hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: Give the eye colour of Blackwulf. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';"
superhero,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE alignment (
id integer,
alignment text,
PRIMARY KEY (id),
);
CREATE TABLE attribute (
id integer,
attribute_name text,
PRIMARY KEY (id),
);
CREATE TABLE colour (
id integer,
colour text,
PRIMARY KEY (id),
);
CREATE TABLE gender (
id integer,
gender text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE race (
id integer,
race text,
PRIMARY KEY (id),
);
CREATE TABLE superhero (
id integer,
superhero_name text,
full_name text,
gender_id integer,
eye_colour_id integer,
hair_colour_id integer,
skin_colour_id integer,
race_id integer,
publisher_id integer,
alignment_id integer,
height_cm integer,
weight_kg integer,
PRIMARY KEY (id),
FOREIGN KEY (gender_id) REFERENCES gender(id),
FOREIGN KEY (eye_colour_id) REFERENCES colour(id),
FOREIGN KEY (hair_colour_id) REFERENCES colour(id),
FOREIGN KEY (skin_colour_id) REFERENCES colour(id),
FOREIGN KEY (race_id) REFERENCES race(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
FOREIGN KEY (alignment_id) REFERENCES alignment(id),
);
CREATE TABLE hero_attribute (
hero_id integer,
attribute_id integer,
attribute_value integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (attribute_id) REFERENCES attribute(id),
);
CREATE TABLE superpower (
id integer,
power_name text,
PRIMARY KEY (id),
);
CREATE TABLE hero_power (
hero_id integer,
power_id integer,
FOREIGN KEY (hero_id) REFERENCES superhero(id),
FOREIGN KEY (power_id) REFERENCES superpower(id),
);
---------------------
QUESTION: List the power of superheroes with height greater than 80% of the average height of all superheroes. power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the reference names of the drivers who are eliminated in the first period in race number 18. driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the surname of the driver with the best lap time in race number 19 in the second period? race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the year during which the race is held on circuits in Shanghai. Shanghai is a name of location;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give the name of the race held on the circuits in Germany. Germany is a name of country;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the positions of the circuits built by the constructor Renault. Renault is a name of constructor;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many races in the year 2010 are held on grand prixs outside Asia and Europe?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give the names of the races held on the circuits in Spain. Spain is a name of country;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the location coordinates of the circuits for Australian grand prix? coordinates refers to (lat, lng);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Where can I find the information about the races held on Sepang International Circuit? information about races refers to url;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the time of the races held on Sepang International Circuit."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Give the coordinate position for Abu Dhabi Grand Prix. coordinates refers to (lat, lng); position and location shares the same meaning."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which country is the constructor which got 1 point in the race No. 24 from? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's Bruno Senna's Q1 result in the qualifying race No. 354? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the Bahrain Grand Prix in 2007, how many drivers not finished the game? drivers who finished the race refers to time has records;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Show me the season page of year when the race No. 901 took place. race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the race happened on 2015/11/29, how many drivers finished the game? game and race are synonyms; drivers who finished the race should have record in time;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For all the drivers who finished the game in race No. 592, who is the oldest? drivers who finished the race refers to time is not empty; oldest driver refers to oldest dob;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website. player and driver are synonyms; race number refers to raceId; introduction website of the drivers refers to url;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who set the fastest lap speed in race No.933, where does he come from? fastest lap speed refers to MAX(fastestLapSpeed);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Where is Malaysian Grand Prix held? Give the location coordinates. coordinates refers to (lat, lng);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the constructor which got the highest point in the race No. 9 , what is its introduction website? race number refers to raceId; introduction website of the constructor refers to url;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's Lucas di Grassi's Q1 result in the race No. 345? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the actual finish time for Bruce McLaren in the race No.743? race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who finished second in the San Marino Grand Prix in 2006? finished second refers to position = 2;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Show me the season page of year when the race No. 901 took place. race number refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the race happened in 2015/11/29, how many drivers finished the game?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For all the drivers who finished the game in race No. 872, who is the youngest? race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who was the driver that got the best lap time in the race No. 348? Give his full name. race number refers to raceId; the best lap time refers to MIN(time)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the driver who set the fastest lap speed, what is his nationality? the fastest lap speed refers to (MAX) fastestLapSpeed

SQL mentions raceId = 348, that is not in the question"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? race number refers to raceId; DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)), (fastestLapSpeed(raceId = 853)) as percentage"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: For the drivers who took part in the race in 1983/7/16, what's their race completion rate? DIVIDE(COUNT(driverid where time has value and date = '1983-07-16'), (COUNT(driverid where date = '1983-07-16')) as percentage"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which year was the first Singapore Grand Prix? the first race refers to race happened in min(year);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many races were there in 2005? Name all the races in descending order."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the first race recorded. What are the other races that happened within the same month and year of that race. the first race refers to year = year(min(date)) and month = month(min(date));"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the name and date of the last round of race in year 1999. the last round refers to max(round);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which year has the most number of races? the most number of races refers to max(round);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the races in year 2017 that are not hosted in year 2000. not hosted means not in;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which country was the first European Grand Prix hosted? Name the circuit and location. the first refers to min(year);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: When was the last f1 season whereby Brands Hatch hosted the British Grand Prix? the last refers to max(year);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many seasons has Silverstone Circuit hosted the United Kindom grand prix? British Grand Prix is the name of race; British refers to the United Kindom"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name all drivers in the 2010 Singapore Grand Prix order by their position stands."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the driver with the most points scored. Find his full name with that points. the most points scored refers to max(points); full name contains forename and surname."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the best lap time recorded? List the driver and race with such recorded lap time. the best lap time refers to min(time)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix? AVG(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. DIVIDE(COUNT(raceId) where surname = 'Hamilton', year >= 2010 and position>1), (COUNT(raceId) where surname = 'Hamilton', year >= 2010) as percentage;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the driver with the most winning. Mention his nationality and what is his average point scores. the most winning refers to MAX(COUNT(wins)); avg(points);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How old is the youngest Japanese driver? What is his name? youngest Japanese driver refers to max(dob); Japanese refers to nationality = 'Japanese'; age = 2022-year(dob)+1"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List circuits which host 4 f1 races from year 1990 to 2000. from year 1990 to 2000 refers to year(date) between 1990 and 2000;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Name the races along with its circuit name and location for f1 races hosted in September 2005. in September 2005 refers to month(date) = 9 and year = 2005"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which race was Alex Yoong in when he was in track number less than 10? track number less than 10 refers to position < 10"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many times did Michael Schumacher won from races hosted in Sepang International Circuit? win from races refers to max(points)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the race and year of race in which Michael Schumacher had his fastest lap. fastest lap refers to min(milliseconds)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is Eddie Irvine's average points scored in year 2000? average points = AVG(points where year = 2000)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which was Lewis Hamilton first race? What was his points recorded for his first race event? first race refers to min(Year)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List all races in 2017 and the hosting country order by date of the event."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among all European Grand Prix races, what is the percentage of the races were hosted in Germany? percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the location coordinates of Silverstone Circuit? coordinates refers to (lat, lng)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring? higher latitude refers to max(lat)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the reference name of Marina Bay Street Circuit? reference name refers to circuitRef"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which country can I find the circuit with the highest altitude? highest altitude refers to max(alt)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many drivers don't have a code? don't have a code refers to code is null"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which country is the oldest driver from? oldest driver refers to min(dob)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the surnames of all the Italian drivers. Italian refers to nationality = 'italian'"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which website should I go to if I want to know more about Anthony Davidson? website refers to url"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's Lewis Hamilton's reference name? reference name refers to driverRef"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which circuit did the 2009 Spanish Grand Prix use?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list all the years that Silverstone Circuit was used in a Formula_1 race."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give more information about the Formula_1 races that used the Silverstone Circuit. more information refers to url"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Formula_1 races took place on the circuits in Italy?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009. link of the website refers to url"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the fastest lap time ever in a race for Lewis Hamilton? fastest lap time ever refers to min(fastestLapTime)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver ranked the first in the Australian Grand Prix in 2008? Please give his reference name. reference name refers to driverRef"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the Formula_1 races that Lewis Hamilton participated."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which Formula_1 race did Lewis Hamilton rank the highest? rank the highest refers to min(rank)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? the fastest lap speed among all refers to max(fastestLapSpeed)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which years did Lewis Hamilton participate in a Formula_1 race?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was Lewis Hamilton's final rank in the 2008 Australian Grand Prix? final rank refers to positionOrder"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver was in the no. 4 grid formation when starting the race in 2008's Australian Grand Prix? Please give his forename and surname. the no. 4 grid formation refers to grid = 4"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many drivers managed to finish the race in the 2008 Australian Grand Prix? managed to finish the race refers to time is not null"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What's the finish time for the driver who ranked second in 2008's Australian Grand Prix? finish time refers to time"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who was the champion of 2008's Australian Grand Prix and where can I know more about him? only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many drivers from the USA participated in the 2008 Australian Grand Prix? from the USA refers to nationality = 'American'"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among the drivers that finished the race in the 2008 Australian Grand Prix, how many of them have participated in Formula_1 races? COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix? completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100%; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many circuits are there in Melbourne, Australia? Australia is the country; Melbourne is the location of circuit;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the location coordinates of the US circuits. location coordinates refers to (lat, lng); the US refers to country = 'USA';"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many British drivers were born after 1980? born after 1980 refers to year (dob) >1980;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What are the average points of British constructors? average points = AVG(points); British is a nationality"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which constructor has the highest point?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the constructor names with 0 points at race 291. race at 18 refers to raceID = 18;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Japanese constructors have 0 points in 2 races? 2 races refers to COUNT(raceID) = 2;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which constructors have been ranked 1?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many French constructors have a lap number of over 50? lap numbers of over 50 refers to laps > 50;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average time in seconds of champion for each year? only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames. born after 1975 refers to year(dob) >1975;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Italian drivers haven't finished the race? haven't finished the race refers to time is null;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver has the fastest lap time? Please give their forenames and surnames."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the fastest lap number of the champion in 2009? in 2009 refers to year = 2009; Only the time of the champion shows in the format of ""hour: minutes: seconds.millionsecond"""
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average of fastest lap speed in the 2009 Spanish Grand Prix race? Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which race has the shortest actual finishing time? Please give the name and year. shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many French drivers who obtain the laptime less than 02:00.00? lap time less than 01:00.00 refers to seconds < 120;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out the code for drivers who have nationality in America. nationality = 'America'"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out the Id number of races which were hold in 2009."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many driver participated in race ID number 18?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them? youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is reference name of Robert Kubica? reference name refers to driverRef;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many Australian drivers who were born in 1980? born in 1980 refers to year(dob) = 1980;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time. born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please state the reference name of the oldest German driver. oldest refers to MIN(year(dob)); reference names appear in drverRef."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers. born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List out top 10 Spanish drivers who were born before 1982 and have the latest lap time. born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: State the racing year which has the fastest lap time? 'has the fastest lap time?' refers to fastestLapTime has values"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which year has the lowest speed of lap time? lowest speed of lap time refers to Max(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race. fastest time refers to Min(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: From race no. 50 to 100, how many finishers have been disqualified? disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many times the circuits were held in Austria? Please give their location and coordinates. location coordinates refers to (lat,lng);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What race number has the most finishers? finisher refers to time is not null;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday. passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: On what year did the youngest driver had his first qualifying race? State the name, date and time of the race. youngest driver refers to Max (year(dob));"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many American drivers have been disqualified from the race. disqualified refers to statusID = 2;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which of the Italian constructor got the highest point to date? Give its introduction website? introduction website refers to url; Italian is a nationality"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the website of the constructor who tallied the most total wins. introduction website refers to url;"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap. slowest time refers to Max(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds. fastest refers to Min(time);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? top 10 refers to rank <11; AVG(fastestLapTime);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: List down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985. born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time. Only the time of the champion shows in the format of ""hour: minutes: seconds.millionsecond"";"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. the time of the champion shows in the format of ""minutes: seconds.millionsecond"" in which Max(time); constructor reference name refers to constructorRef; website refers to url"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the full name and date of birth of Austrian drivers born between 1981 and 1991? Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth. FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. Monaco Grand Priz refers to the race; race in year between 1980 and 2010"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average score of Lewis Hamilton among all the Turkish Grand Prix? Average score = AVG(points)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the annual average number of races held during the first 10 years of the 21st century? races in date between '2000-01-01' and '2010-12-31'"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which citizenship do the vast majority of the drivers hold? Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? victories refer to wins; 91st refers to points"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer? Fastest lap speed refers to MIN(fastestLapTime)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which racetrack hosted the most recent race? Indicate the full location. full location refers to location+country; most recent race = MAX(date)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008? Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined. full name refers to forename+surname; Youngest racer = MAX(dob)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have? number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: How many wins was achieved by the oldest racer? Indicate his/her full name. oldest racer refers to MIN(dob); full name refers to forename, surname."
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the longest time a driver had ever spent at a pit stop? longest time spent at pitstop refers to MAX(duration)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Among all the lap records set on various circuits, what is the time for the fastest one?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the longest time that Lewis Hamilton had spent at a pit stop? longest time refes to MAX(duration);"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix. time spent at pit stop refers to duration"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the lap record set by Lewis Hamilton in a Formula_1 race? lap recod means the fastest time recorded which refers to time"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Which driver created the shortest lap time ever record in a Formula_1 race? Please give his full name. shortest lap time refers to MIN(time)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race? fastest lap refers to MIN(time)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the lap record for the Austrian Grand Prix Circuit? lap record means the fastest time recorded which refers to time"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the lap records for the circuits in Italy. lap record means the fastest time recorded which refers to time"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set? lap record means the fastest time recorded which refers to time"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: Please list the location coordinates of the circuits whose lap record is 1:29.488. lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races? average time in milliseconds spent at pit stop refers to AVG(milliseconds)"
formula_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE circuits (
circuitId integer,
circuitRef text,
name text,
location text,
country text,
lat real,
lng real,
alt integer,
url text,
PRIMARY KEY (circuitId),
);
CREATE TABLE constructors (
constructorId integer,
constructorRef text,
name text,
nationality text,
url text,
PRIMARY KEY (constructorId),
);
CREATE TABLE drivers (
driverId integer,
driverRef text,
number integer,
code text,
forename text,
surname text,
dob date,
nationality text,
url text,
PRIMARY KEY (driverId),
);
CREATE TABLE seasons (
year integer,
url text,
PRIMARY KEY (year),
);
CREATE TABLE races (
raceId integer,
year integer,
round integer,
circuitId integer,
name text,
date date,
time text,
url text,
PRIMARY KEY (raceId),
FOREIGN KEY (year) REFERENCES seasons(year),
FOREIGN KEY (circuitId) REFERENCES circuits(circuitId),
);
CREATE TABLE constructorResults (
constructorResultsId integer,
raceId integer,
constructorId integer,
points real,
status text,
PRIMARY KEY (constructorResultsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE constructorStandings (
constructorStandingsId integer,
raceId integer,
constructorId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (constructorStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE driverStandings (
driverStandingsId integer,
raceId integer,
driverId integer,
points real,
position integer,
positionText text,
wins integer,
PRIMARY KEY (driverStandingsId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE lapTimes (
raceId integer,
driverId integer,
lap integer,
position integer,
time text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE pitStops (
raceId integer,
driverId integer,
stop integer,
lap integer,
time text,
duration text,
milliseconds integer,
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
);
CREATE TABLE qualifying (
qualifyId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
position integer,
q1 text,
q2 text,
q3 text,
PRIMARY KEY (qualifyId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
);
CREATE TABLE status (
statusId integer,
status text,
PRIMARY KEY (statusId),
);
CREATE TABLE results (
resultId integer,
raceId integer,
driverId integer,
constructorId integer,
number integer,
grid integer,
position integer,
positionText text,
positionOrder integer,
points real,
laps integer,
time text,
milliseconds integer,
fastestLap integer,
rank integer,
fastestLapTime text,
fastestLapSpeed text,
statusId integer,
PRIMARY KEY (resultId),
FOREIGN KEY (raceId) REFERENCES races(raceId),
FOREIGN KEY (driverId) REFERENCES drivers(driverId),
FOREIGN KEY (constructorId) REFERENCES constructors(constructorId),
FOREIGN KEY (statusId) REFERENCES status(statusId),
);
---------------------
QUESTION: What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy? average = AVG(milliseconds)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player has the highest overall rating? Indicate the player's api id. highest overall rating refers to MAX(overall_rating);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the height of the tallest player? Indicate his name. tallest player refers to MAX(height);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the preferred foot when attacking of the player with the lowest potential? preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Who are the top 5 players who perform better in crossing actions? Indicate their player id. perform better in crossing actions refers to MAX(crossing)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which league had the most goals in the 2016 season? league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which home team had lost the fewest matches in the 2016 season? home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Indicate the full names of the top 10 players with the highest number of penalties. full name refers to player_name; players with highest number of penalties refers to MAX(penalties);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: In Scotland Premier League, which away team won the most during the 2010 season? Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed? speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which League had the most matches end as draw in the 2016 season? most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. players age at present = SUBTRACT((DATETIME(), birthday)); sprint_speed > = 97; between 2013 to 2015 refers to date > = '2013-01-01 00:00:00' AND date < = '2015-12-31 00:00:00';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Give the name of the league with the highest matches of all time and how many matches were played in the said league. name of the league refers to League.name; league with highest matches of all time refers to MAX(COUNT(league_id));"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average height of players born between 1990 and 1995? average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the players' api id who had the highest above average overall ratings in 2010. highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed. teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed BETWEEN 51 AND 59;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the long name of teams with above-average build-up play passing in 2012. long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL) < buildUpPlayPassing; in 2012 refers to strftime('%Y', date) = '2012';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992. players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 1.0)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to birthday BETWEEN '1987-01-01 00:00:00'AND '1992-12-31 00:00:00';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the top 5 leagues in ascending order of the number of goals made in all seasons combined. number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Find the average number of long-shot done by Ahmed Samir Farag. average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the short name of the football team Queens Park Rangers? short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the football players with a birthyear of 1970 and a birthmonth of October. players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,4) AS year, substr(birthday,6,2) AS month WHERE year = '1970' AND month = '10';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the attacking work rate of the football playerr Franco Zennaro?"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch? ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the football player Francois Affolter header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the overall rating of the football player Gabriel Tamas in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches in the 2015/2016 season were held in Scotland Premier League
? Scotland Premier League refers to League.name = 'Scotland Premier League';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the preferred foot when attacking of the youngest football player? preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List all the football player with the highest potential score. potential score refers to potential; highest potential score refers to MAX(potential);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among all the players whose weight is under 130, how many of them preferred foot in attacking is left? weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the football teams that has a chance creation passing class of Risky. Inidcate its short name only. chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the defensive work rate of the football player David Wilson
?"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: When is the birthday of the football player who has the highest overall rating? football player who has the highest overall rating refers to MAX(overall_rating);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the name of the football league in the country of Netherlands? name of the football league refers to League.name;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the average home team goal in the 2010/2011 season in the country of Poland. average home team goal = AVG(home_team_goal) WHERE name = 'Poland' and season = '2010/2011';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Who has the highest average finishing rate between the highest and shortest football player? finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list player names which are higher than 180. height>180;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many players were born after 1990? born after 1990 refers to strftime('%Y', birthday) = '1990';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many players whose first names are Adam and weigh more than 170? team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which players had an overall rating of over 80 from 2008 to 2010? Please list player names. overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is Aaron Doran's potential score? potential score refers to potential;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List out of players whose preferred foot is left. preferred_foot = 'left';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list all team names which the speed class is fast. team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the passing class of CLB team? passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which teams have build up play passing more than 70? Please list their short names. build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: From 2010 to 2015, what was the average overall rating of players who are higher than 170? from 2010 to 2015 refers to strftime('%Y', date) BETWEEN '2010' AND '2015'; height > 170;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which football player has the shortest height? shortest height refers to MIN(height);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which country is the league Italy Serie A from? Italy Serie A from refers to League.name = 'Italy Serie A';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average overall rating of the football player Aaron Doran? average overall rating = AVG(overall_rating);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches were held in the league Germany 1. Bundesliga
from August to October 2008? Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List all the short name of the football team that had a home team goal of 10? short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List all the football player with the highest balance score and potential score of 61. balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye
? difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye'));"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What's the long name for the team GEN? long name for the team refers to team_long_name; team_short_name = 'GEN';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player is older, Aaron Lennon or Abdelaziz Barrada? older player refers to older birthday;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player is the tallest? tallest player refers to MAX(height);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked? preferred foot when attacking refers to preferred foot; preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which country is the Belgium Jupiler League from? Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list the leagues from Germany. Germany refers to Country.name = 'Germany';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which player has the strongest overall strength? overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked? players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone? player who perform best in crossing actions refers to MAX(crossing);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What's the heading accuracy of Ariel Borysiuk?"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players whose height is over 180, how many of them have a volley score of over 70? height > 180; volley score refers to volleys; volleys > 70;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please list the names of the players whose volley score and dribbling score are over 70. volley score refers to volleys; volleys > 70; dribbling score refers to dribbling; dribbling > 70;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches in the 2008/2009 season were held in Belgium? Belgium refers to Country.name = 'Belgium';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the long passing score of the oldest player? long passing score refers to long_passing; oldest player refers to oldest birthday;"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many matches were held in the Belgium Jupiler League in April, 2009? Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to strftime('%Y', date) = '2009' AND strftime('%m', date) = '04';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which league had the most matches in the 2008/2009 season? league that had the most matches in the 2008/2009 season refers to MAX(league_id WHERE season = '2008/2009');"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average overall rating of the players born before the year 1986? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How much is the average build up play speed of the Heart of Midlothian team? Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to  AVG(buildUpPlaySpeed)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the average overall rating of Pietro Marino. Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is Aaron Lennox's total crossing score? Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is Ajax's highest chance creation passing score and what is it classified as? Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified as chanceCreationPassingClass"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which foot is preferred by Abdou Diallo? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the highest overall rating received by Dorlan Pabon? Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average number of goals made by Parma as the away team while playing in Italy? Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. 77 points overall rating refers to overall_rating = 77; on 2016/6/23; oldest refers to MIN(birthday)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the overall rating for Aaron Mooy on 2016/2/4? Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date = '2016-02-04 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the potiential for Francesco Parravicini on 2010/8/30? Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How was Francesco Migliore's attacking work rate on 2015/5/1? Francesco Migliore's  refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date = '2015-05-01 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Tell the defensive work rate for Kevin Berigaud on 2013/2/22. Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: When was the first time did Kevin Constant have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the build up play speed class for ""Willem II"" on 2011/2/22? ""Willem II"" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How was the build up play dribbling class for ""LEI"" on 2015/9/10? ""LEI"" refers to team_short_name = 'LEI'; on 2015/9/10 refers to  date = '2015-09-10 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Tell the build Up play passing class for ""FC Lorient"" on 2010/2/22. ""FC Lorient"" refers to team_long_name = 'FC Lorient'; on 2010/2/22  refers to date = '2010-02-22"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: State the chance creation passing class for ""PEC Zwolle"" on 2013/9/20. ""PEC Zwolle"" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the chance creation crossing class for ""Hull City"" on 2010/2/22? ""Hull City"" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: For the team ""Hannover 96"", what was its defence aggression class on 2015/9/10? ""Hannover 96"" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date = '2015-09-10 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to date BETWEEN '2007-02-22 00:00:00' and '2016-04-21 00:00:00'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery';  percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List down 5 tallest players' name. tallest refers to MAX(height)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are the player api id of 10 heaviest players? heaviest refers to MAX(weight)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List down the name of players who are 35 years old and above. 35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many home team goal have been scored by Aaron Lennon? Aaron Lennon refers to player_name = 'Aaron Lennon'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Sum up the away team goal scored by both Daan Smith and Filipe Ferreira. Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Calculate the total home team goal scored by players whose age are 30 years old and below. age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: State 10 names of the strongest players. strongest players refers to MAX(overall_rating)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the name of players with the highest potential? highest potential refers to MAX(potential)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Among the players with finishing rate of 1, pick the eldest player and state the player's name. eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: State the name of players who came from Belgium. name of players refers to player_name; Belgium is name of country"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Locate players with vision scores of 90 and above, state the country of these players. vision scores of 90 and above refers to vision > 89"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which country's players have the heaviest average weights? heaviest average weights refers to MAX(AVG(weight))"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: List down the long name for slow speed class team. slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are the short name of team who played safe while creating chance of passing? played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the average heights of Italy players? average heights refers to Avg(height); Italy is name of country"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please provide the names of top three football players who are over 180 cm tall in alphabetical order. over 180 cm tall refers to height > 180; name of football player refers to player_name"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many football players born after the 1990s have the first name ""Aaron""? first name ""Aaron"" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the difference between players 6 and 23's jumping scores? difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking. lowest potential players refers to MIN(potential); prefer to use the right foot refers to preferred_foot = 'right'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: How many players had the highest potential score for crossing that preferred to use their left foots while attacking? highest potential score for crossing refers to MAX(crossing); preferred to use their left foots refers to preferred_foot = 'left'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What percentage of players have a strength and stamina score of more than 80? strength and stamina score of more than 80 refers to stamina > 80 and strength > 80"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: In what country did the Poland Ekstraklasa take place?"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? September 24, 2008 refers to date like '2008-09-24%'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What are Alexis Blin's sprint speed, agility, and acceleration scores? Alexis Blin's refers to player_name = 'Alexis Blin'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Does the KSV Cercle Brugge team have a slow, balanced or fast speed class? KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: In the 2015–2016 season, how many games were played in the Italian Serie A league? In the 2015–2016 season refers to season = '2015/2016'"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What was the highest score of the home team in the Netherlands Eredivisie league? highest score of the home team refers to MAX(home_team_goal)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please state the finishing rate and curve score of the player who has the heaviest weight. heaviest weight refers to MAX(weight)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Which league had the most games in the 2015–2016 season? in the 2015–2016 season season = '2015/2016'; league with most games refers to team_long_name where MAX(COUNT(id))"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please provide the full name of the away team that scored the most goals. full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: Please name one player whose overall strength is the greatest. overall strength is the greatest refers to MAX(overall_rating)"
european_football_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Player_Attributes (
id integer,
player_fifa_api_id integer,
player_api_id integer,
date text,
overall_rating integer,
potential integer,
preferred_foot text,
attacking_work_rate text,
defensive_work_rate text,
crossing integer,
finishing integer,
heading_accuracy integer,
short_passing integer,
volleys integer,
dribbling integer,
curve integer,
free_kick_accuracy integer,
long_passing integer,
ball_control integer,
acceleration integer,
sprint_speed integer,
agility integer,
reactions integer,
balance integer,
shot_power integer,
jumping integer,
stamina integer,
strength integer,
long_shots integer,
aggression integer,
interceptions integer,
positioning integer,
vision integer,
penalties integer,
marking integer,
standing_tackle integer,
sliding_tackle integer,
gk_diving integer,
gk_handling integer,
gk_kicking integer,
gk_positioning integer,
gk_reflexes integer,
PRIMARY KEY (id),
FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id),
FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
);
CREATE TABLE Player (
id integer,
player_api_id integer,
player_name text,
player_fifa_api_id integer,
birthday text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE League (
id integer,
country_id integer,
name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES Country(id),
);
CREATE TABLE Country (
id integer,
name text,
PRIMARY KEY (id),
);
CREATE TABLE Team (
id integer,
team_api_id integer,
team_fifa_api_id integer,
team_long_name text,
team_short_name text,
PRIMARY KEY (id),
);
CREATE TABLE Team_Attributes (
id integer,
team_fifa_api_id integer,
team_api_id integer,
date text,
buildUpPlaySpeed integer,
buildUpPlaySpeedClass text,
buildUpPlayDribbling integer,
buildUpPlayDribblingClass text,
buildUpPlayPassing integer,
buildUpPlayPassingClass text,
buildUpPlayPositioningClass text,
chanceCreationPassing integer,
chanceCreationPassingClass text,
chanceCreationCrossing integer,
chanceCreationCrossingClass text,
chanceCreationShooting integer,
chanceCreationShootingClass text,
chanceCreationPositioningClass text,
defencePressure integer,
defencePressureClass text,
defenceAggression integer,
defenceAggressionClass text,
defenceTeamWidth integer,
defenceTeamWidthClass text,
defenceDefenderLineClass text,
PRIMARY KEY (id),
FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id),
FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
);
CREATE TABLE Match (
id integer,
country_id integer,
league_id integer,
season text,
stage integer,
date text,
match_api_id integer,
home_team_api_id integer,
away_team_api_id integer,
home_team_goal integer,
away_team_goal integer,
home_player_X1 integer,
home_player_X2 integer,
home_player_X3 integer,
home_player_X4 integer,
home_player_X5 integer,
home_player_X6 integer,
home_player_X7 integer,
home_player_X8 integer,
home_player_X9 integer,
home_player_X10 integer,
home_player_X11 integer,
away_player_X1 integer,
away_player_X2 integer,
away_player_X3 integer,
away_player_X4 integer,
away_player_X5 integer,
away_player_X6 integer,
away_player_X7 integer,
away_player_X8 integer,
away_player_X9 integer,
away_player_X10 integer,
away_player_X11 integer,
home_player_Y1 integer,
home_player_Y2 integer,
home_player_Y3 integer,
home_player_Y4 integer,
home_player_Y5 integer,
home_player_Y6 integer,
home_player_Y7 integer,
home_player_Y8 integer,
home_player_Y9 integer,
home_player_Y10 integer,
home_player_Y11 integer,
away_player_Y1 integer,
away_player_Y2 integer,
away_player_Y3 integer,
away_player_Y4 integer,
away_player_Y5 integer,
away_player_Y6 integer,
away_player_Y7 integer,
away_player_Y8 integer,
away_player_Y9 integer,
away_player_Y10 integer,
away_player_Y11 integer,
home_player_1 integer,
home_player_2 integer,
home_player_3 integer,
home_player_4 integer,
home_player_5 integer,
home_player_6 integer,
home_player_7 integer,
home_player_8 integer,
home_player_9 integer,
home_player_10 integer,
home_player_11 integer,
away_player_1 integer,
away_player_2 integer,
away_player_3 integer,
away_player_4 integer,
away_player_5 integer,
away_player_6 integer,
away_player_7 integer,
away_player_8 integer,
away_player_9 integer,
away_player_10 integer,
away_player_11 integer,
goal text,
shoton text,
shotoff text,
foulcommit text,
card text,
cross text,
corner text,
possession text,
B365H real,
B365D real,
B365A real,
BWH real,
BWD real,
BWA real,
IWH real,
IWD real,
IWA real,
LBH real,
LBD real,
LBA real,
PSH real,
PSD real,
PSA real,
WHH real,
WHD real,
WHA real,
SJH real,
SJD real,
SJA real,
VCH real,
VCD real,
VCA real,
GBH real,
GBD real,
GBA real,
BSH real,
BSD real,
BSA real,
PRIMARY KEY (id),
FOREIGN KEY (home_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (away_team_api_id) REFERENCES Team(team_api_id),
FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id),
FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id),
);
---------------------
QUESTION: What is the percentage of players that are under 180 cm who have an overall strength of more than 70? percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100%"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Are there more in-patient or outpatient who were male? What is the deviation in percentage? male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; SUBTRACT(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX  = 'M' and Admission = '-')"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of female patient were born after 1930? female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patient born between Year 1930 to 1940, how many percent of them were inpatient? patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient? 'SLE' refers to diagnosis; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient. '30609' is an ID; disease means diagnosis"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had. When was the examination taken refers to `Examination Date`"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List the patient ID, sex and birthday of patient with LDH beyond normal range. LDH beyond normal range refers to LDH > '500'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: State the ID and age of patient with positive degree of coagulation. age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patients with severe degree of thrombosis, list their ID, sex and dieseas the patient is diagnosed with. severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients who were born in 1937 whose total cholesterol was beyond the normal range. who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patient with albumin level lower than 3.5, list their ID, sex and diagnosis. albumin level lower than 3.5 refers to ALB < 3.5;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of female patient had total protein not within the normal range? female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration? in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic? female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; followed at the outpatient clinic refers to Admission = '-'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What was the age of the youngest patient when they initially arrived at the hospital? age refers to SUBTRACT(YEAR(Birthday), YEAR(`First Date`))"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many of the patients with the most serious thrombosis cases examined in 1997 are women? the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the age gap between the youngest and oldest patient with a normal triglyceride recorded? age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis. the youngest patient refers to MIN(BIRTHDAY);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? The oldest patient refers to MAX(Birthday); 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the ratio of male to female patients among all those with abnormal uric acid counts? male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit? hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many underage patients were examined during the course of the three-year period from 1990 to 1993? underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to `Examination Date` between '1990-01-01' and '1993-12-31'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients have elevated total bilirubin count? male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` > '2.0'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? the most common illness refers to MAX(COUNT(Diagnosis)); lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average age of patients examined in the laboratory for the October of the year 1991? average age for first half of 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis? How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2? anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level? total cholesterol normal level refers to N < 250"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What was the gender of the first AORTITIS diagnosed patient? gender means SEX; 'AORTITIS' refers to Diagnosis;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12? 'SLE' refers to Diagnosis; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Description = '1993/11/12'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? man refers to SEX = 'M'; women refers to SEX = 'F'; ALT glutamic pylvic transaminase status got 9 GPT = '9'; 1992/6/12 refers to Date = '1992-06-12'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time? how old at that time refers to SUBTRACT('1992', year(Birthday)); uric acid level as 8.4 refers to UA = '8.4'; 1991/10/21 refers to Date = '1991-10-21'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995? 1991/6/13 refers to `First Date` = '1991-06-13'; 'SJS' refers to Diagnosis; total number of his/her Laboratory tests refers to COUNT(ID); 1995 refers to Date"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? 'SLE' AND original diagnose refers to diagnosis; 1997/1/27 refer to `Examination Date` = '1997-01-27'; first came to the hospital refers to patient.`First Date`"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997. 'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many female patients born in 1964 were admitted to the hospital? List them by ID. female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range? proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)，100)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989? Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'p'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? PSS' refers to diagnosis; blood level of C-reactive protein de 2+refers to CRP > 2; createnine 1 refers to CRE = 1; LDH 123 refers to LDH = 123"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; 'SLE' refers to diagnosis"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the most common sign of patients with SLE disease? the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When was the medical information on patient number 48473 first documented, and what disease did she have? medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many female patients were given an APS diagnosis? female refers to SEX = 'F'; 'APS' refers to diagnosis"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients who underwent testing in 1997 had protein levels outside the normal range? underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What proportion of patients who had signs of thrombocytopenia had SLE diagnosed? thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =   DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What percentage of patients who were born in 1980 and were diagnosed with RA are women? born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to diagnosis; women refers to SEX = 'F'; calculation = DIVIDE((SEX = 'F'), COUNT(SEX)) where YEAR(BIRTHDAY) = '1980' AND diagnosis = 'RA' MULTIPLY 100"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with BEHCET disease did not stay in the hospital for treatment? male refers to SEX = 'M'; underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'; BEHCET refers to diagnosis; did not stay in the hospital refers to Admission = '-'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients who were female got white blood cells that were below 3.5? female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? DATEDIFF(`Examination Date`, `First Date`)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Was the patient with the number 57266's uric acid within a normal range? uric acid within a normal range refers to UA > 8.0 and SEX = 'M'; UA > 6.5 and SEX = 'F'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range. AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994. AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range. male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth. ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; ascending order of their date of birth refers to MAX(Birthday)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient? alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range? alkaliphophatase (ALP) within normal range refers to ALP < 300"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index. total protein (TP) below the lower range of the normal index refers to TP < 6.0"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal. female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5;
deviation of TP index from normal refers to SUBTRACT(TP, 8.5)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Sort in descending order all patients by birthday for male patient with albumin not within range. male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patient born in 1982, state if their albumin is within normal range. Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of the female patient whose uric acid (UA) beyond the normal range? uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result? uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing? urea nitrogen (UN) just within the borderline of passing refers to UN = 29"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index. within the UN normal index refers to UN < 30; Diagnosis = 'RA'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients are are with creatinine index out of the normal range? creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Are there more male patients with creatinine not within the normal range than female? True or False? creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index. the highest total bilirubin refers to MAX(T-BIL)"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range. total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index. oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the average age of the male patient with high cholesterol? average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to gender = 'M'; high cholesterol refers to `T-CHO` > = 250;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range? triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years? triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids. outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range? born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991. blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) > = 1991;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order. abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age. patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday));"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex. outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex. diagnosed with SLE refers to Diagnosis = 'SLE'; oldest refers to MIN(Birthday); normal hemoglobin level refers to 10 < HGB < 17;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range. age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range. laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? abnormal platelet level refers to PLT < 100; platelet level lower than normal range refers to PLT < 100; how much = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. laboratory examinations take in 1984 refers to Date like '1984%'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; percentage = MULTIPLY(DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)), 1.0); female refers to Sex = 'F'; abnormal prothrombin time (PT) refers to PT > = 14;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal. first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time? examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with an abnormal activated partial prothrom bin time, how many of them have a mild thrombosis? abnormal activated partial prothrom bin time refers to APTT > 45; mild thrombosis refers to Thrombosis = 3; Only count ones without repetitive."
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC between 3.5 and 9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones."
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients born after 1980/1/1 have an abnormal fibrinogen level? born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients."
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the disease names of the patients that have a proteinuria level higher than normal. disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID. normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with an Ig G lower than normal has the symptom of abortion? Ig G lower than normal refers to IGG < 900; symptom of abortion refers to Symptoms = 'abortion';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with a normal Ig G level, how many of them have symptoms? normal Ig G level refers to IGG BETWEEN 900 AND 2000; have symptoms refers to Symptoms IS NOT NULL;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient who has the highest Ig A within the normal range, what is his or her diagnosis? highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal Ig A level came to the hospital after 1990/1/1? normal Ig A level refers to IGA BETWEEN 80 AND 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with? abnormal Ig M level refers to IGM NOT BETWEEN 40 AND 400; most common disease refers to MAX(COUNT(Diagnosis));"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal C-reactive protein don't have their data recorded? normal C-reactive protein refers to CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0; don't have data recorded refers to Description IS NULL;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose C-reactive protein level is abnormal, how many of them aren't 18 yet? C-reactive protein level is abnormal refers to CRP NOT IN('+-', '-') AND CRP > = 1.0; aren't 18 refers = CRP > = 1.0 AND SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 18; Should compute the number of distinct ones."
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the diseases of the patients born after 1995-1-1 and have a normal Rhuematoid Factor. diseases refers to Diagnosis; born after 1995/1/1 refers to YEAR(Birthday) > = 1995; normal Rhuematoid Factor refers to RA IN('-', '+-');"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the ID of the patient whose RF is normal and who is older than 60. RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal RF don't have thrombosis? normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination? normal level of complement 3 refers to C3 > 35; have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID. Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients have blood clots in veins, how many of them have a normal level of complement 4? APS will result in Blood Clots in veins; normal level of complement 4 refers to C4 > 10; Should compute the number of different ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth. youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with normal anti-SM, how many of them have the most severe degree of thrombosis? normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; most severe degree of thrombosis refers to Thrombosis = '1';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones. abnormal anti-SM refers to SM NOT IN('-', '+-'); youngest refers to MAX(Birthday);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70. examination done after 1997/1/1 refers to `Examination Date` > = 1997-01-01; normal anti-scl70 refers to SC170 IN('-', '+-');"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who has a normal anti-scl70, how many of them are male and have the symptom of vertigo? normal anti-scl70 refers to SC170 IN('-', '+-'); male refers to Sex = 'M'; symptom of vertigo refers to symptoms = 'vertigo'; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with a normal anti-SSA came to the hospital before 1990? normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 1990 refers to YEAR(`First Date`) < 1990; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID. first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('-', '+-');"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients have a normal anti-SSB and are diagnosed with SLE in the examination? normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination? anti-SSB are normal refers to SSB IN('-', '+-'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with. abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients have a normal anti-DNA level, yet their data are not recorded. normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Of the patients with an abnormal level of anti-DNA-II, how many of them admitted to the hospital? normal level of anti-DNA-II refers to DNA-II < 8; admitted to the hospital refers to Admission = '+';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE? abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients have their glutamic oxaloacetic transaminase in the normal range? male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born? abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; youngest refers to MAX(Birthday);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range. highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with the normal glutamic pylvic transaminase level, how many of them are male? normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded? highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase. latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital? abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase? followed at the outpatient clinic refers to Admission = '-'; normal level of alkaliphophatase refers to ALP < 300;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the diagnosis of the patients whose total protein is lower than normal. total protein is lower than normal refers to TP < 6.0;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients who are diagnosed with SJS, how many of them have a normal level of total protein? diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the examination date of the patient whose albumin is the highest in the normal range? examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many male patients have a normal level of both albumin and total protein? male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level? highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest. creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range? anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination? total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: What is the disease name of the patient who has the highest level of triglyceride within the normal range? disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase. no thrombosis refers to Thrombosis = 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation? normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: When is the birthday of the oldest patient whose blood glucose is abnormal? oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients with a normal blood glucose, how many of them don't have thrombosis? normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients accepted to the hospital have a normal level of white blood cells? accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients diagnosed with SLE have a normal white blood cell level? diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic. RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell; 3.5 < RBC < 6.0 means the patient has a normal level of red blood cell; followed at the outpatient clinic refers to Admission = '-';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Among the patients who have a normal platelet level, how many of them have other symptoms observed? normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD. PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: For the male patients that have a normal prothrombin time, what is their average prothrombin time? male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);"
thrombosis_prediction,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Examination (
ID integer,
Examination Date date,
aCL IgG real,
aCL IgM real,
ANA integer,
ANA Pattern text,
aCL IgA integer,
Diagnosis text,
KCT text,
RVVT text,
LAC text,
Symptoms text,
Thrombosis integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
CREATE TABLE Patient (
ID integer,
SEX text,
Birthday date,
Description date,
First Date date,
Admission text,
Diagnosis text,
PRIMARY KEY (ID),
);
CREATE TABLE Laboratory (
ID integer,
Date date,
GOT integer,
GPT integer,
LDH integer,
ALP integer,
TP real,
ALB real,
UA real,
UN integer,
CRE real,
T-BIL real,
T-CHO integer,
TG integer,
CPK integer,
GLU integer,
WBC real,
RBC real,
HGB real,
HCT real,
PLT integer,
PT real,
APTT integer,
FG real,
PIC integer,
TAT integer,
TAT2 integer,
U-PRO text,
IGG integer,
IGA integer,
IGM integer,
CRP text,
RA text,
RF text,
C3 integer,
C4 integer,
RNP text,
SM text,
SC170 text,
SSA text,
SSB text,
CENTROMEA text,
DNA text,
DNA-II integer,
FOREIGN KEY (ID) REFERENCES Patient(ID),
);
---------------------
QUESTION: How many patients with severe thrombosis have a normal prothrombin time? severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What's Angela Sanders's major? major refers to major_name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many students in the Student_Club are from the College of Engineering?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the full names of the students in the Student_Club that come from the Art and Design Department. full name refers to first_name, last_name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many students of the Student_Club have attended the event ""Women's Soccer""? Women's Soccer is an event name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the phone numbers of the students from the Student_Club that has attended the event ""Women's Soccer"". Women's Soccer is an event name; phone numbers refers to phone"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the students from the Student_Club who attended the event ""Women's Soccer"", how many of them want a T-shirt that's in medium size? Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the event that has the highest attendance of the students from the Student_Club? event with highest attendance refers to MAX(COUNT(link_to_event))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which college is the vice president of the Student_Club from? Vice President is a position of the Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the event names of all the events attended by Maya Mclean."
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many events of the Student_Club did Sacha Harrison attend in 2019? events attended in 2019 refers to YEAR(event_date) = 2019"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the events attended by more than 10 members of the Student_Club, how many of them are meetings? meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the names of all the events of the Student_Club that had an attendance of over 20 students. name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the average attendance of meetings in 2020? meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the most expensive item that was spent in support of club events? item in support of club events refers to expense_description; most expensive refers to MAX(cost)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members of the Student_Club have majored Environmental Engineering?
 'Environmental Engineering' is the major name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the full name of all the members of the Student_Club who attended the ""Laugh Out Loud"" event. full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last name of all the students who majored Law and Constitutional Studies. 
 'Law and Constitutional Studies' is the major name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What county did Sherri Ramsey grew up?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What college offers the major that Tyler Hewitt took?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the amount of the funds that the Vice President received? 'Vice President' is a position of Student Club; funds received refers to amount;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How much did the Student_Club members spend on food in September Meeting? amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What city and state did the President of the Student_Club grow up? 'President' is a position of Student Club;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the full name of the Student_Club members that grew up in Illinois state. full name of member refers to first_name, last_name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How much did the Student_Club members spend on advertisement in September Meeting? amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What department offers the major that Pierce and Guidi took?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total budgeted amount for all category in ""October Speaker"" event? total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Was each expense in October Meeting on October 8, 2019 approved? event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the total average cost that Elijah Allen spent in the events on September and October. events in September and October refers to month(expense_date) = 9 AND MONTH(expense_date) = 10"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020. SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Give the location for ""Spring Budget Review"". 'Spring Budget Review' is an event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What was the cost for the ""Posters"" on 2019/9/4? 'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: With the biggest budget for the ""Food"", what was the remaining of it? remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What was the notes of the fundraising on 2019/9/14? fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many majors are there in ""College of Humanities and Social Sciences""?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Tell the phone number of ""Carlo Jacobs""."
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Tell the hometown county for ""Adela O'Gallagher"". hometown county refers to county"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: For all the budgets for ""November Meeting"", how many of them had exceeded the budget? 'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Provide the total number of the budget amount for ""September Speaker"" event. 'September Speaker' is an event name; total number of budget amount refers to SUM(amount)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the status of the event which bought ""Post Cards, Posters"" on 2019/8/20? 'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What was Brent Thomason's major? major refers to major_name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: For all the club members from ""Human Development and Family Studies"" major, how many of them wear large size t-shirt? 'Human Development and Family Studies' is a major name; wear large size t-shirt refers to t_shirt_size = 'Large'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What's Christof Nielson's zip code type?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the major name for the Vice President of the club. 'Vice President' is a position of Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Where is the hometown state for ""Sacha Harrison""? hometown state refers to state;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which department was the President of the club in? 'President' is a position of Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the date Connor Hilton paid his/her dues. date the dues was paid refers to received_date where source = 'Dues'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Who was the first one paid his/her dues? Tell the full name. full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many times was the budget in Advertisement for ""Yearly Kickoff"" meeting more than ""October Meeting""? DIVIDE(SUM(amount where category = 'Advertisement' and event_name = 'Yearly Kickoff'), SUM(amount event_name = 'October Meeting' and category = 'Advertisement'))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What percentage was the budget for Parking to the total budget for the ""November Speaker""? DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total cost of the pizzas for all the events? total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many cities are there in Orange County, Virginia? Orange County is the county, Virginia is the state"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all of the College of Humanities and Social Sciences' departments."
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Where is Amy Firth's hometown? hometown refers to city, county, state"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What are the expenses of the budget with the lowest remaining? expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all the members who attended the event ""October Meeting"". 'October Meeting' is an event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which college do most of the members go to? college most members go refers to MAX(COUNT(major.college))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What does the person with the phone number ""809-555-3360"" major in? major in refers to major_name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which event has the highest budget amount? event refers to event_name; highest budget amount refers to MAX(amount)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all the expenses incurred by the vice president. expense refers to expense_description; 'Vice President' is a position of the Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members attended the ""Women's Soccer"" event? 'Women's Soccer' is the event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: When did the member, Casey Mason, received the income? when the income was received refers to date_received"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many of the members' hometowns are from Maryland state?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many events did the member with the phone number ""954-555-6240"" attend?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List all the members of the ""School of Applied Sciences, Technology and Education"" department. list all members means to list all the full name; full name refers to first_name, last_name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among all the closed events, which event has the highest spend-to-budget ratio? closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many student have the position of president? 'President' is a position of Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the highest amount of budget spend for an event? highest amount of budget spend refers to MAX(spent)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many meeting events were held in 2020? meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total amount of money spent for food? total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the name of students that have attended more than 7 events. name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the students majored in interior design, who have attended the Community Theater event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the name of students from Georgetown, South Carolina. name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many income generated by Grant Gilmour? income generated refers to income.amount"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which student was able to generate income more than $40? name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the total expense for the Yearly Kickoff? 'Baseball game' is an event name; total expense refers to SUM(cost)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which student has been entrusted to manage the budget for the Yearly Kickoff? 'Yearly Kickoff' is an event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which students manage to generate the highest income. State his/her full name along with the income source. name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which event has the lowest cost? event refers to event_name where MIN(cost)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event? DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the ratio between students majored in finance and physics? DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Indicate the top source of funds received in September 2019 based on their amount. top source funds refers to MAX(source) where date_received BETWEEN '2019-09-01' and '2019-09-30'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Provide the full name and email address of the Student_Club's Secretary. full name refers to first_name, last_name; 'Secretary' is a position of Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members of the Student_Club have major in 'Physics Teaching'? 'Physics Teaching' is the major name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members did attend the event 'Community Theater' in 2019? event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Provide the number of events attended by Luisa Guidi. What is her major? major refers to major_name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: On average, how much did the Student_Club spend on food for the typical event in the past? DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Name the event with the highest amount spent on advertisement. event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Did Maya Mclean attend the 'Women's Soccer' event? 'Women's Soccer' is an event name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service' DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Indicate the cost of posters for 'September Speaker' event. 'Posters' is the expense description; 'September Speaker' is an event name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the most popular size of t-shirt ordered by the club members? most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Indicate the name of the closed event whose cost has exceeded the budget the most. closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Identify the type of expenses and their total value approved for 'October Meeting' event. total value refers to SUM(cost); 'October Meeting' is an event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount. 'April Speaker' is an event name; amount budgeted refers to budget; budget categories refers to category"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the budgets for Food, which one has the highest budgeted amount? MAX(amount) where category = 'Food'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the budgets for Advertising, list out top three which have the most budgeted amount? MAX(amount) where category = 'Advertisement'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the total cost spent for Parking in the list. total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Mention the total expense used on 8/20/2019. total expense refers SUM(cost) where expense_date = '2019-08-20'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List out the full name and total cost that member id ""rec4BLdZHS2Blfp4v"" incurred? full name refers to first_name, last name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State what kind of expenses that Sacha Harrison incurred? kind of expenses refers to expense_description"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What kind of expenses incurred by members who have X-Large in size of tee shirt? kind of expenses refers to expense_description; t_shirt_size = 'X-Large'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Mention the zip code of member who incurred less than 50USD. incurred less than 50USD refers to cost < 50"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the name of major that Phillip Cullen has joined. name of major refers to major_name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List out the position of members who joined major of Business. 'Business' is the major name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members of Business have the Medium size of tee shirt? members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List out the type of events which have remaining budget more than 30 USD. remaining budget more than 30 USD refers to remaining > 30"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Mention the category of events which were held at MU 215. held at MU 215 refers to location = 'MU 215'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the category of event which was taken place in 2020-03-24T12:00:00? taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the name of major that Vice President has joined. name of major refers to major_name; 'Vice President' is position of Student Club"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the percentage of members who are major Mathematics in the list? DIVIDE(SUM(position = 'Member' and major_name = 'Mathematics'), COUNT(member_id)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: State the category of events were held at MU 215. 'MU 215' is the location of event"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many income are received with an amount of 50? amount of 50 refers to amount = 50"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the members, how many of them have an extra large t-shirt size? among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last name of members with a major in environmental engineering and include its department and college name. 'Environmental Engineering' is the major name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent? budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the city and state of members enrolled under electrical and computer engineering department. 'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the last name and position of the student that bought pizza on 09/10/2019? bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last name of the members of the club that attended the women's soccer event. members of the club refers to position = 'Member'; 'Women's Soccer' is event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club? t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which countries have zip codes with post office boxes? zip codes that have post office boxes refers to type = 'PO Box'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico? zip codes that have post office boxes refers to type = 'PO Box'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the names of closed event as ""game"" that was closed from 3/15/2019 to 3/20/2020. name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please provide links to events for members who have paid more than 50 dollar. have paid more than 50 dollar refers to cost > 50"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please indicate the college of the person whose first name is Katy with the link to the major ""rec1N0upiVLy5esTO""."
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences. 'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019. expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: How many members have education major in the College of Education & Human Services? 'education' is the major name; 'Member' is a position of club;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the percentage of the events that went over budget? went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Give the event ID, location, and status of events conducted from November 2019 to March 2020. event_date BETWEEN '2019-11-01' and '2020-03-31'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the expenses that spend more than fifty dollars on average. expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Find the full name of members whose t-shirt size is extra large. full name refers to first_name, last_name; t_shirt_size = 'X-Large'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the percentage of zip codes that are PO boxes. DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the name and location of events that underspend its budget. name of event refers to event_name; underspend its budget refers to remaining > 0"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the name and major of members who had to spend more than a hundred dollars on an expense? full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: In the events with more than forty incomes, list the city and country in which the event is happening. more than fifty incomes refers to income > 40"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Among the members who incurred expenses in more than one event, who paid the most amount? paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the average amount paid by students in a position other than a member? position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the name of events with less than average parking cost. name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the percentage of the cost for the game events? game events refers to type = 'Game'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which budget allowed the most money for water, chips, and cookies? budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the full name of the top five members who spend the most money in the descending order of spending. full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Give the full name and contact number of members who had to spend more than average on each expense. full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the difference in the percentage of members in Maine and Vermont. SUBTRACT( DIVIDE( SUM(state = 'Maine'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What is the major of Garrett Gerke and which department does it belong to? major refers to major name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the last names of students under the Elementary Education major and include their phone numbers. 'Elementary Education' is the major name; phone numbers refers to phone"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: List the event names which were budgeted for the food. budgeted for food refers to category = 'Food'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which budget category does the expense 'Posters' fall to? 'Posters' refers to expense description"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to. full name refers to first_name, last name"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Calculate the total amount spent on speaker gifts and list the name of the event they were spent on. total amount spent = SUM(spent) where category = 'Speaker Gifts'"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Where is the hometown of Garrett Girke? hometown refers to city"
student_club,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE event (
event_id text,
event_name text,
event_date text,
type text,
notes text,
location text,
status text,
PRIMARY KEY (event_id),
);
CREATE TABLE major (
major_id text,
major_name text,
department text,
college text,
PRIMARY KEY (major_id),
);
CREATE TABLE zip_code (
zip_code integer,
type text,
city text,
county text,
state text,
short_state text,
PRIMARY KEY (zip_code),
);
CREATE TABLE attendance (
link_to_event text,
link_to_member text,
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE budget (
budget_id text,
category text,
spent real,
remaining real,
amount integer,
event_status text,
link_to_event text,
PRIMARY KEY (budget_id),
FOREIGN KEY (link_to_event) REFERENCES event(event_id),
);
CREATE TABLE expense (
expense_id text,
expense_description text,
expense_date text,
cost real,
approved text,
link_to_member text,
link_to_budget text,
PRIMARY KEY (expense_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
FOREIGN KEY (link_to_budget) REFERENCES budget(budget_id),
);
CREATE TABLE income (
income_id text,
date_received text,
amount integer,
source text,
notes text,
link_to_member text,
PRIMARY KEY (income_id),
FOREIGN KEY (link_to_member) REFERENCES member(member_id),
);
CREATE TABLE member (
member_id text,
first_name text,
last_name text,
email text,
position text,
t_shirt_size text,
phone text,
zip integer,
link_to_major text,
PRIMARY KEY (member_id),
FOREIGN KEY (zip) REFERENCES zip_code(zip_code),
FOREIGN KEY (link_to_major) REFERENCES major(major_id),
);
---------------------
QUESTION: Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position. full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many gas stations in CZE has Premium gas?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the ratio of costumers who pay in EUR against customers who pay in CZK? ratio of costumers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK')."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: In 2012, who had the least consumption in LAM? Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the average monthly consumption of customers in SME for the year 2013? Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312, which means between January and December in 2013"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which customers, paying in CZK, consumed the most gas in 2011? Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many customers in KAM had a consumption of less than 30,000 for the year 2012? Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012? Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which year recorded the most gas use paid in EUR?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which segment had the least consumption?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which year recorded the most consumption of gas paid in CZK? The first 4 strings of the values in the table yearmonth can represent year."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the gas consumption peak month for SME customers in 2013? 'in 2013' refers to the first 4 strings of yearmonth.date = '2013', The 5th and 6th string of the date can refer to month."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; First 4 strings of Date represents the year."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; Between 2012 And 2013 can be represented by Between 201201 And 201312; First 4 strings of Date represents the year."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How much did customer 6 consume in total between August and November 2013? Between August And November 2013 refers to Between 201308 And 201311; First 4 strings of Date represents the year."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many more ""discount"" gas stations does the Czech Republic have compared to Slovakia? Computation of more discount = Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How much more was customer 7 consuming in April 2013 than customer 5? April 2013 refers to 201304 in the yearmonth.date"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more? Amount of more SMEs = Total of SMEs uses Czech Koruna - Total of SMEs uses Euro"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which LAM customer used the Euro as their currency and had the highest consumption in October 2013? October 2013 refers to 201310 in the yearmonth.date"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Who among KAM's customers consumed the most? How much did it consume?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How much did the KAM customers consume in total in May 2013? May 2013 refers to yearmonth.date = 201305"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many percent of LAM customer consumed more than 46.73? Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100%."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country has more ""value for money"" gas stations? Please give a total number of ""value for money"" gas stations in each country."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What percentage of KAM customers pay in euros? Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: In February 2012, what percentage of customers consumed more than 528.3? February 2012 refers to '201202' in yearmonth.date"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What percentage of Slovakian gas stations are premium? Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which client ID consumed the most in September 2013? September 2013 refers to yearmonth.date = '201309'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which client segment consumed the least in September 2013? September 2013 refers to yearmonth.date = '201309'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which SME customer consumed the least in June 2012? June 2012 refers to yearmonth.date = '201206'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the highest monthly consumption in the year 2012? The first 4 strings of yearmonth.date can represent the year."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the biggest monthly consumption of the customers who use euro as their currency? Monthly consumption = SUM(consumption) / 12"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the product description of the products consumed in September, 2013. September 2013 refers to 201309; First 4 strings represent the year"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the countries of the gas stations with transactions taken place in June, 2013. June 2013 refers to '201306'; First 4 strings represent the year"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the chains of the gas stations with transactions in euro."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the product description of the products bought in transactions in euro."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the average total price of the transactions taken place in January, 2012? In January, 2012 means Date contains '2012-01'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic. Gas station in the Czech Republic implies that Country = CZE"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Please list the disparate time of the transactions taken place in the gas stations from chain no. 11."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000? Gas station in the Czech Republic implies that Country = 'CZE'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1? Gas station in the Czech Republic implies that Country = 'CZE'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the average total price of the transactions taken place in gas stations in the Czech Republic? Gas station in the Czech Republic implies that Country = 'CZE'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the customers who paid in the euro, what is their average total price of the transactions?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which customer paid the most in 2012/8/25? '2012/8/25' can be represented by '2012-08-25'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country's gas station had the first paid cusomer in 2012/8/25? '2012/8/25' can be represented by '2012-08-25'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What kind of currency did the customer paid at 16:25:00 in 2012/8/24? '2012/8/24' can be represented by '2012-08-24'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What segment did the customer have at 2012/8/23 21:20:00? '2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: How many transactions were paid in EUR in the morning of 2012/8/26? '2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the earliest customer, what segment did he/she have?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the deal happened at 2012/8/24 12:42:00, which country was it? '2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What was the product id of the transaction happened at 2012/8/23 21:20:00? '2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly? '2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning."
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE? Gas station in the Czech Republic implies that Country = CZE; '2012/8/26' can be represented by '2012-08-26'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: There's one customer spent 214582.17 in the June of 2013, which currency did he/she use? June of 2013 means Date contains '201306' in the yearmonth.date of the database"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country was the card owner of No.667467 in?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What's the nationality of the customer who spent 548.4 in 2012/8/24? '2012/8/24' can be represented by '2012-08-24'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the percentage of the customers who used EUR in 2012/8/25? '2012/8/25' can be represented by '2012-08-25'"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? '2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which gas station has the highest amount of revenue?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the percentage of ""premium"" against the overall segment in ""SVK""?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: What is the amount spent by customer ""38508"" at the gas stations? How much had the customer spent in January 2012? January 2012 refers '201201' in the table transactions_1k"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which are the top five best selling products? Please state the full name of them. Description of products contains full name"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? verage price per single item = price / amount"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: Which country had the gas station that sold the most expensive product id No.2 for one unit?"
debit_card_specializing,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
Segment text,
Currency text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE gasstations (
GasStationID integer,
ChainID integer,
Country text,
Segment text,
PRIMARY KEY (GasStationID),
);
CREATE TABLE products (
ProductID integer,
Description text,
PRIMARY KEY (ProductID),
);
CREATE TABLE transactions_1k (
TransactionID integer,
Date date,
Time text,
CustomerID integer,
CardID integer,
GasStationID integer,
ProductID integer,
Amount integer,
Price real,
PRIMARY KEY (TransactionID),
);
CREATE TABLE yearmonth (
CustomerID integer,
Date text,
Consumption real,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
);
---------------------
QUESTION: For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012. August of 2012 means Date contains '201208' in the yearmonth.date of the database; Price per unit of product = Price / Amount"
