db_id,train_example
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the business located in Mesa that have alcohol attribute. in Mesa refers to city = 'Mesa'; alcohol attribute refers to attribute_name = 'Alcohol'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Based on business in Phoenix, calculate the percentage of business with low funny votes. in Chandelier refers to city = 'Chandelier'; percentage = divide(count(business_id where review_votes_funny = 'Low'), count(business_id)); business with low funny votes refers to review_votes_funny = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the ratio between business in shopping category and business in pets category? ratio = divide(count(business_id where category_name = 'Shopping'), count(business_id where category_name = 'Pets'))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are registered in the database under 'Banks & Credit Unions' category? category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many active businesses from Casa Grande are registered in the database? active business refers to active = 'true'; Casa Grande refers to city = 'Casa Grande'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What time does the business with ID no.12 open on Monday? open time refers to opening_time; on Monday refers to day_of_week = 'Monday'; business with ID no. refers to business_id"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses that are registered in the database can be attributed to 'Good for Kids'? can be attributed to 'Good for Kids' refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Identify the most popular and appealing active business in Gilbert based on users' reviews. most popular and appealing refers to review_count = 'High' and max(stars); active business refers to active = 'true'; in Gilbert refers to city = 'Gilbert'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find the 5-star business in Ahwatukee, AZ and identify it's business category. 5-star refers to stars = 5; in Ahwatukee refers to city = 'Ahwatukee'; business category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among all closed businesses in Avondale, AZ what percent have obtained a 'wonderful experience' rating of the business. closed business refers to active = 'false'; in Avondale refers to city = 'Avondale'; 'wonderful experience' rating refers to stars > 3; percentage = divide(count(business_id where stars > 3), count(business_id))*100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Identify the user who has been yelping since 2004. Is he or she an Yelp Elite member? has been yelping since 2004 refers to user_yelping_since_year = 2004"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Identify the percent of long reviews among all 5-star reviews given to businesses by the Yelp users. percentage = divide(count(business_id where review_length = 'Long' and review_stars = 5), count(business_id)) * 100%; long reviews refers to review_length = 'Long'; 5-star review refers to review_stars = 5"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers. average ratings of at least 4 refers to user_average_stars > = 4; no fans or followers refers to user_fans = 'None'; percentage = divide(count(user_id where user_average_stars > = 4 and user_fans = 'None'), sum(user_id where user_average_stars > = 4))*100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many short tips were left for the business with ID no.2? short tip refers to tip_length = 'Short'; business category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find the Yelp user with the average 5-star rating of all reviews who has been yelping the longest. Yelp user refers to user_id; average 5-star rating refers to user_average_stars = 5; yelping the longest refers to min(user_yelping_since_year)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Identify the operating hours of businesses in Black Canyon City with review count greater than average. operating hours refers to opening_time closing_time on day_id; in Black Canyon City refers to city = 'Black Canyon City'; greater than average refers to review_count > AVG(T1.review_count)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among all the users who received the high number of compliments, what percent received the 'cute' type of compliment. high number of compliments refers to number_of_compliments = 'High'; percentage = divide(count(user_id where compliment_type = 'cute'), count(user_id))*100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Mention the number of businesses that have no any attribute. have no attribute refers to attribute_value in( 'none', 'no', 'false')"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the opening and closing time of business id 1 for day id 2? false"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out city name of businesses which have medium length of review. medium length of review refers to review_length = 'Medium'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the closing time of business id 4 on Sunday? on Sunday refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses which have short length of review, which one located in Phoenix? short length of review refers to review_length = 'Short'; in Phoenix refers to city = 'Phoenix'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the users whose fan is medium, how many users received high compliments from other users. is medium refers to user_fans = 'Medium'; high compliments refers to number_of_compliments = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the users who received low compliments from other users, which users joined Yelp in 2012? low compliments refers to number_of_compliments = 'Low'; joined Yelp in 2012 refers to user_yelping_since_year = 2012"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses without attribute, how many businesses located in Gilbert? without attribute refers to attribute_value = 'None'; in Gilbert refers to city = 'Gilbert'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses with average rating, how many business has attribute of full_bar. average rating refers to avg(stars); attribute of full_bar refers to attribute_value = 'full_bar'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out the state of businesses which have opening time at 1AM. state refers to city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out the category name of business id 5."
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out the user id that has compliment type of photos. compliment type of photos refers to compliment_type = 'photos'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of medium tip length in the list. List out the time when users of medium tip length join Yelp. medium tip length refers to tip_length = 'Medium'; percentage = divide(count(tips where tip_length = 'Medium'), count(tips))*100%; the time when users join Yelp refers to user_yelping_since_year"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of businesses who located in Mesa. What is attribute value of these businesses. percentage = divide(count(business where city = 'Mesa'), count(business)) * 100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: State the state of businesses which have closing time at 12AM. state refers to city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses which have attribute of beer_and_wine, how many business located in Peoria? attribute of beer_and_wine refers to attribute_value = 'beer_and_wine'; in Peoria refers to city = 'Peoria'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the users who received high compliments from other users, which users joined Yelp earliest? high compliments refers to number_of_compliments = ' High'; joined Yelp earliest refers to min(user_yelping_since_year)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which business ID has the most reviews? the most reviews refer to MAX(user_id);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which year has the most elite users? year has the most elite users refers to year_id with MAX(user_id);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many 5 star businesses have uber review votes for funny? businesses refer to business_id; review_stars = 5.0; review_votes_funny = 'uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users have uber review votes for funny from the fans? users refer to user_id; review_votes_funny = 'uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which business ID have the shortest business operating hours? the shortest business operating hours refer to MIN(SUBTRACT(closing_time, opening_time));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find out which business ID are opened all the time. opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Does the length of the tip influence the number of likes for hotel and travel business category? the longer the tip_length, the lesser the likes OR the longer the tip length the higher the likes; hotel and travel business category refers to category_name = 'Hotels & Travel';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users manage to get uber votes for all of the review category? Find out what are the user average star. users refer to user_id; uber votes for all of the review category refer to review_votes_funny = 'uber' AND review_votes_useful = 'uber' AND review_votes_cool = 'uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the ratio of good to bad business star for a businesses that are opened all the time? opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time; ratio can be computed as DIVIDE(COUNT(stars BETWEEN 3.5 and 5), COUNT(stars BETWEEN 1 and 2.5));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out 10 business ID that are being reviewed the most by users and list out what are top 3 business categories. being reviewed the most refers to MAX(user_id); business categories refer to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in Arizona having an average review less than 3 stars? businesses in Arizona refer to business_id where state = 'Arizona'; average review less than 3 stars refers to AVG(review_stars) < 3.0;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the percentage of user not becoming an elite user? DIVIDE(SUBTRACT(COUNT(user_id), COUNT(Elite.user_id)), COUNT(user_id)) as percentage;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the most common compliments types received by user with uber number of fans? the most common compliments types refer to MAX(COUNT(compliment_id)); user_fans = 'uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average year needed by a user with uber fans to become an elite user? AVG(user_yelping_since_year) where user_fans = 'uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average year for a user to be upgraded to elite user? AVG(user_yelping_since_year) where user_id from Elite;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many business are opened for more than 8 hour in Mesa and what is the percentage of the active businesses? business are opened for more than 8 hours refer to business_id where SUBTRACT(closing_time, opening_time) > 8; DIVIDE(COUNT(business_id where active = 'true' and city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8), COUNT(business_id where city = 'Mesa' and SUBTRACT(closing_time, opening_time) > 8)) as percentage;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses. opened during late afternoon refers to Business_Hours where opening_time ≥ '5PM'; active businesses refer to business_id where active = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which user has done the most review on a business attributed to delivery? the most reviews refer to MAX(business_id) where attribute_name = 'Delivery';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average number of reviews written for active businesses that operate not more than 30 hours a week? avg(user_id) where active = 'true' and SUM(SUBTRACT(closing_time, opening_time)) < 30;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many business ids have opening hours from 8AM to 6PM? opening hours from 8AM to 6PM refer to Business_Hours where opening_time = '8AM' and closing_time = '6PM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Provide business ids with opening hours 10AM on Saturday. opening hours 10AM on Saturday refer to Business_Hours where opening_time = '10AM' and day_id = 6;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Indicate the business id and days which are opened from 8AM to 6PM. opened from 8AM to 6PM refers to Business_Hours where opening_time = '8AM' and closing_time = '6PM'; days refer to day_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses id are rated more than 4? rated more than 4 refers to stars > 4;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the categories of businesses that have opening time on Sunday? categories of businesses refer to category_name; Sunday refers to day_of_week where day_id = 1;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please indicate the opening day of businesses whose category is pets. category is pets refers to category_name = 'Pets'; opening day refers to day_id from Business_Hours and opening_time;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please indicate the closing hours and business days of the businesses with the category named Doctors. closing hours refer to closing_time; business days refer to day_id from Business_Hours;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the working days from Monday to Saturday, which businesses with the category names work the most days? days from Monday to Saturday refer to day_id between 2 and 7; work the most days can be computed as MAX(COUNT(category_name where day_id between 2 and 7));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please indicate the business id have the closing time with the category of Arts & Entertainment on Sunday. Sunday refers to day_of_week = 'Sunday' where day_id = 1; category of Arts & Entertainment refers to category_name = 'Arts & Entertainment';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In businesses with a category of ""DJs"", how many businesses are rated less than 5? category of ""DJs"" refers to category_name = 'DJs'; rated less than 5 refers to stars < 5; businesses refer to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List active business ids with opening times of 7AM and closing times of 8PM. opening times of 7AM and closing times of 8PM refer to Business_Hours where opening_time = '7AM' and closing_time = '8PM'; active business refers to business_id where active = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses with the category named Stadiums & Arenas are rated highest? rated highest refers to MAX(stars); category_name = 'Stadiums & Arenas';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many category id have low review count and rating more than 2? rating more than 2 refers to stars > 2;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which businesses with the category name Accessories have opening hours before 7AM? opening hours before 7AM refer to opening_time < '7AM'; businesses refer to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the active businesses in Arizona, how many businesses work after 12PM? active businesses in Arizona refer to business_id where state = 'Arizona' and active = 'true'; work after 12PM refer to opening_time > '12PM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please provide the name of businesses with user id ""16328"". name of business refers to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses have the category named food? List those businesses and find the percentage of businesses with less than 2 stars. businesses have the category named food refer to business_id where category_name = 'Food'; DIVIDE(COUNT(business_id where category_name = 'Food' and stars < 2), COUNT(business_id where category_name = 'Food')) as percentage;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of businesses with the category name food that are open from 7AM to 8PM in the businesses with the same time. DIVIDE(COUNT(business_id where category_name = 'Food' and opening_time = '7AM' and closing_time = '8PM'), COUNT(business_id where opening_time = '7AM' and closing_time = '8PM')) as percentage;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Write down the number of running business with each review count in Cave Creek city. number of running business refers to COUNT(business_id) where active = 'true'; each review count includes review_count = 'High', review_count = 'Medium', review_count = 'Low';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the yearly average user who started using Yelp from the year of 2005 to 2014. avg(user_id) where user_yelping_since_year BETWEEN '2005' AND '2014';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the active and inactive ratio of the business with the review count of low. DIVIDE(COUNT(business_id where review_count = 'Low' and active = 'true'), COUNT(business_id where review_count = 'Low' and active = 'false'));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List any five of user ID who became elite user in 2006. year_id = '2006';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Write down the any five of ID and name of category that starts with alphabet ""P"". category that starts with alphabet ""P"" refers to category_name like 'P%';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Provide the list of user ID along with review star of which has the review length of medium with business ID of 35. ;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID and attribute value of the attribute name of ""payment_types_visa""."
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Describe ID and active status of the business under category of ""Diagnostic Imaging"". ID refers to business_id; category of ""Diagnostic Imaging"" refers to category_name = 'Diagnostic Imaging';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Mention the user ID and their year of joining Yelp who had great experience on business ID 143. year of joining Yelp refers to user_yelping_since_year; great experience refers to Reviews where review_stars = 5;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the user ID with number in compliment of uber on profile, list any 5 user ID and the year when they join Yelp. when join Yelp refers to user_yelping_since_year; compliment_type = 'profile'; number_of_compliments = 'Uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the user ID, business ID with review length of the business which received the most likes in tips. business which received the most likes refers to business_id where MAX(likes);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the elite users of 10 consecutive year from 2005 to 2014, list down the user ID and their number of compliment on photos. from 2005 to 2014 refers to year_id BETWEEN 2005 AND 2014; compliment_type = 'photos';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of business which opened on Sunday from 9AM to 9PM based on the number of business opened on Sunday. Sunday refers to day_of_week = 'Sunday' where day_id = 1; opened from 9AM to 9PM refers to Business_Hours where opening_time = '9AM' and closing_time = '9PM'; DIVIDE(COUNT(opening_time = '9AM' and closing_time = '9PM' and day_of_week = 'Sunday'), COUNT(opening_time = NOT NULL and closing_time = NOT NULL and day_of_week = 'Sunday')) as percentage;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Write down the ID and opening day of a week for the business which are running in Black Canyon City. running refers to active = 'true'; opening day of a week means days of the week when business is open;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Within the user who joined Yelp in 2004, explore the user ID with average star of 5 and it's review length on the business. user who joined Yelp in 2004 refers to user_id where user_yelping_since_year = 2014; user_average_stars = 5;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which business ID received the review of 4 star and above by 65% of user? Describe their active status and city. review of 4 star and above refers to stars > 4; DIVIDE(SUM(stars > 4), COUNT(business_id)) = 0.65;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the difference between running business in Glendale City and Mesa City. running business refers to business where active = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many likes did short comment left by users who joined in 2010 get? short comment refers to tip_length = 'Short'; users who joined in 2010 refer to user_id where user_yelping_since_year = 2010;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For users with average ratings of 3, what kind of tip length they mostly left? average ratings of 3 refer to user_average_stars = 3; kind of tip length they mostly left refers to tip_length where MAX(COUNT(user_id));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Sum up the likes get by short reviews on businesses located in City Goodyear. short reviews refer to tip_length = 'Short';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For businesses with long length reviews, which state are they located? businesses with long length tips refer to business_id where tip_length = 'Long';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How much time do businesses in El Mirage City, AZ State operate in average daily? how much time does this business open refers to SUBTRACT(closing_time, opening_time); DIVIDE(SUM(SUBTRACT(closing_time, opening_time)), SUM(Business.business_id))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the closing day of businesses located at SC State. closing day refers to SUBTRACT(days.day_id, business_Hours.day_id)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the category of businesses whose stars ratings are 5. category of businesses refers to category_name; stars ratings are 5 refers to stars = 5"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the states of businesses with attribute of beer and wine located? with attribute of beer and wine refers to attribute_value = 'beer_and_wine';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many user's compliment in photo has medium in number? user's compliment in photo refers to compliment_type = 'photo'; photo has medium in number refers to number_of_compliments = 'Medium'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among businesses with ""Wi-Fi"" attribute, which businesses id are located at SC State? ""Wi-Fi"" attribute refers to attribute_name = 'Wi-Fi' AND attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Sum up the number of business with ""ambience_romantic"" attribute. ""ambience_romantic"" attribute refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the percentage of businesses with ""Good for Kids"" attribute over the other attributes? ""Good for Kids"" attribute refers to attribute_name = 'Good for Kids' AND attribute_value = 'true'; Calculation = DIVIDE(SUM(attribute_name = 'Good for Kids' AND attribute_value = 'true')), SUM(business_id) * 100"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are not closed in the city of Mesa? businesses are not closed refers to active = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In how many businesses have customers had a bad or terrible experience? stars = 2 means bad experience; stars = 1 means terrible experience; customers had a bad or terrible experience refers to stars = 2 OR stars = 1"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List by ID the businesses with the reviews with the lowest veracity of Paradise Valley. ID of businesses refers to business_id; reviews with the lowest veracity refers to review_count = 'Low' AND stars > 3; Paradise Valley is a city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses have more than 1 attribute? businesses have more than 1 attribute refers to COUNT(attribute_value) > 1"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are opened the same number of hours every day of the week? how much time does this business open refers to SUBTRACT(closing_time, opening_time); every day of the week refers to day_id BETWEEN 1 AND 7"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many reviews of businesses that are still open received an uber rating on the funny vote? businesses that still open refers to active = 'true'; business received an uber rating on the funny vote refers to review_votes_funny = 'Uber'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many of the users who use a high number of compliments do not have any fans? do not have fans refers to user_fans = 'None'; high number of compliment refers to number_of_compliments = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the most common type of compliments that a user has received from other users? the most common type of compliments refers to MAX(COUNT(compliment_type))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many stars does each of the 3 top users with the most likes in their reviews have? more likes mean this tip is more valuable; the most likes refers to MAX(likes); stars refers to users_average_stars"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In which categories does the only business located in the city of Arcadia appear? categories refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List by their id all businesses that are open on Sunday. day_of_week = 'Sunday'; open on Sunday refers to day_id = 1"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses with music_karaoke attribute are closed? music_karaoke attribute refers to attribute_name = 'music_karaoke' AND attribute_value = 'true'; businesses are closed refers to active = 'false'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many open businesses in the City of Phoenix have users left a long review? open businesses refers to active = 'true'; long review refers to review_length = 'Long'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users who have received a low cool vote have also received at least 1 low cool vote for some of their reviews? low cool vote for user refers to user_votes_cool = 'Low';  low cool vote for review refers to review_votes_cool = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users with a long tip and 2 likes for their tip have a high number of fans? long tip refers to tip_length = 'Long'; 2 likes refers to likes = 2; high number of fans refers to user_fans = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In how many businesses with the ambience_trendy attribute? ambience_trendy attribute refers to attribute_name = 'ambience_trendy' AND attribute_value = 'false'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in the city of Scottsdale open on Sunday at 12PM? businesses that opened on Sunday refers to day_of_week = 'Sunday'; businesses that opened at 12PM refers to opening_time = '12PM'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average number of stars for businesses in the Obstetricians & Gynecologists category? Obstetricians & Gynecologists category refers to category_name = 'Obstetricians & Gynecologists'; calculation = AVG(stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of users with a high number of fans who were elite in 2011. users with a high number of fans refers to user_fans = 'High'; 2011 refers to actual_year = 2011; Calculation = DIVIDE(Elite.user_id where user_fans = 'High' AND actual_year = 2011, Elite.user_id where actual_year = 2011) * 100"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many of the businesses are in Surprise? Surprise is a city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID with a high review count in Tempe. Tempe is a city; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the total number of active businesses in AZ with a medium review count? active businesses refers to active = 'true'; AZ is a state; medium review count refers to review_count = 'Medium'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID with a star range from 3 to 5, located at Chandler. businesses with a star range from 3 to 5 refers to stars BETWEEN 3 AND 5; Chandler is a city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In users yelping since 2009 to 2011, how many of them have low count of fans? users in yelping since 2009 to 2011 refers to user_yelping_since_year BETWEEN 2009 AND 2011; low count of fans refers to user_fans = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the review length of user 11021 to business with business ID 3? review length refers to review_length; user 11021 refers to user_id = 11021; business ID 3 refers to business_id = 3"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses in Tempe, list the attribute of the business with a medium review count. Tempe is a city; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In businesses with a category of food, how many of them have a star rating below 3? category of food refers to category_name = 'Food'; star rating below 3 refers to stars < 3"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the active business ID and its stars of the businesses fall under the category of Food. active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the category and attributes of businesses with highest star rating? category of the business refers to category_name; attributes of the business refers to attribute_name; the highest star rating refers to MAX(stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the category of the business with short review length and highest review stars within business ID from 7 to 14? category of the business refers to category_name; short review length refers to review_length = 'Short'; the highest star rating refers to MAX(stars); business ID from 7 to 14 refers to business_id BETWEEN 7 AND 14"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Count the active businesses that has an attribute of BYOB with high review count. active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'; attribute of BYOB refers to attribute_name = 'BYOB'; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the closing and opening time of businesses located at Glendale with highest star rating? Glendale is a city; the highest star rating refers to MAX(stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the active businesses located at Goodyear, AZ, list the category and atrributes of business with a high review count. active business ID refers to active = 'true'; Goodyear is a city; AZ is a state; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the categories of active businesses in Glendale, AZ. active business ID refers to active = 'true'; categories refers to category_name; Glendale is a city; AZ is a state"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find the location of businesses that has business hours from 7 am to 7 pm every Wednesday. location of business refers to city; business hours from 7am to 7pm refers to opening_time = '7AM' AND closing_time = '7PM'; Wednesday refers to day_of_week = 'Wednesday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the attribute value of an active business with a low review count and 3 stars which is located at Goodyear, AZ? active business ID refers to active = 'true'; low review count refers to review_count = 'Low'; 3 stars refers to stars = 3; Goodyear is a city; AZ is a state"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the opening time of the active businesses in Glendale that have a medium review count. active business ID refers to active = 'true'; Glendale is a city; medium review count refers to review_count = 'Medium'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses with a category of Food, what is the percentage of the business with greater than 3 stars? category of food refers to category_name = 'Food'; calculation = DIVIDE(COUNT(stars > 3), SUM(stars))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the closing time and day of week of active businesses in Goodyear with stars greater than the 80% of average age of star rating. active business ID refers to active = 'true'; Goodyear is a city; Calculation = AVG(stars) * 0.8; businesses with stars greater than 80% of average star rating refers to stars > AVG(stars) * 0.8"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Among all the citation, what is the percentage of paper ID under the Agents classification? classification refers to class_label; class_label = 'Agents'; percentage = (divide(count(paper_id where class_label = 'Agents')), (count(paper_id)))*100;"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: What is the most cited word? How many papers was that word cited in? most cited word refers to max(count(word_cited_id);"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: What is the total number of word cited under that class labelled 'AI'?"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: For all words cited in paper ID 315017, state the other paper ID and class label which also cited those words."
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Among all the DB class type citation, which word is the most frequently cited? class type refers to class_label; class_label = 'DB'; word that is most frequently cited refers to max(count(word_cited_id);"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Calculate the percentage of words used in Agents class label. percentage = (divide(count(word_cited_id where class_label = 'Agents')), (count(word_cited_id)))*100;"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Which paper ID cited the most word? In which class label does it belongs to? most cited word refers to max(word_cited_id);"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: List all the paper ID and its class type that cited the word 'word1002'. class type refers to class_label;"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: List all words cited in the AI class label."
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: What is the class label of paper ID 'chakrabarti01integrating'. How many words were cited by this paper ID?"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: List all paper ID and its class type with more than 20 cited words. class type refers to class_label; count(word_cited_id)>20"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: List the words that are cited in both AI and IR class label."
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Name the paper which is cited most times and the paper which is cited least times? Also, find the number of times each one is cited."
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: On average, how many papers are under the ML class? class refers to class_label; average = divide(count(paper_id where class_label = 'M')), (count(paper_id)));"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Find the words cited in papers that are cited by sima01computational? paper cited by refers to citing_paper_id; citing_paper_id = 'sima01computational';"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: How many papers were cited by schmidt99advanced cited word3555? paper cited by refers to citing_paper_id; citing_paper_id = 'schmidt99advanced';"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Under what classification do the papers that cited word1163 belong?"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: Among the papers under DB classification, which paper has the highest number of words cited? classification refers to class_label; class_label = 'DB';"
citeseer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE cites (
cited_paper_id text,
citing_paper_id text,
);
CREATE TABLE paper (
paper_id text,
class_label text,
PRIMARY KEY (paper_id),
);
CREATE TABLE content (
paper_id text,
word_cited_id text,
FOREIGN KEY (paper_id) REFERENCES paper(paper_id),
);
---------------------
QUESTION: In the papers classified as ML, how many cited butz01algorithmic? classification refers to class_label; paper cited by refers to citing_paper_id; citing_paper_id = 'butz01algorithmic';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which crew member of the simpson 20s is the oldest? oldest refers to Min(birthdate)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What's the nickname for Dan Castellaneta? ""Dan Castellaneta"" is the name of Person"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the crew members of the simpson 20s born in the New York city, how many of them were born after the year 1970? born in New York city refers to birth_region = 'New York'; born after year 1970 refers to ('%Y', birthdate) > 1970"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born? ""Outstanding Voice-Over Performance"" is the award; 2009 refers to year = 2009; 'Winner' is the result; country refers to birth_country"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list the names of all the awards won by the crew member whose nickname is Doofus. award won refers to result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many crew members who were born in the USA were nominated for the Outstanding Animated Program (For Programming Less Than One Hour) award in 2009? born in USA refers to birth_country = 'USA'; were nominated refers to result = 'Nominee'; 'Outstanding Animated Program (For Programming Less Than One Hour)' is the award; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which character won the Outstanding Voice-Over Performance award in 2009? won refers to result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list all the keywords of the episode Lost Verizon. ""Lost Verizon"" is the title of episode"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many keywords does the episode that was aired on 2008/10/19 have? aired on 2008/10/19 refers to air_date = '2008-10-19'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What's the rating of the episode in which Dan Castellaneta won the Outstanding Voice-Over Performance award in 2009? ""Dan Castellaneta"" is the person;  2009 is year;  won refers result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many 7-star votes in star score did the episode Lost Verizon have? 7-stars vote refers to stars = 7; 'Lost Verizon' is the title of episode"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many stars did most of the voters give in star score for the episode Lost Verizon? ""Lost Verizon"" is the title of episode; most voters refers to Max(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list the titles of the episodes that have over 200 voters voting a 10 in star score. over 200 votes refers to votes > 200; 10 in star score refers to stars = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes aired in the year 2009 have over 15% of voters giving 10 stars in star score? aired in the year 2009 refers to air_date like '2009%'; 10 stars in star score refers to stars = 10; over 15% of voters refers to Votes.percent > 15"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What's the title of the episode that got the most 7-star votes in star score? 7-stars vote refers to stars = 7;  most refers to Max(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many stars on average does the episode Lost Verizon have? ""Lost Verizon"" is the title of episode; stars on average = Divide( Sum (Multiply (votes, stars)), Sum(votes))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the percentage of Primetime Emmy nominated episodes with a rating over 7 to all the episodes that have a rating over 7? ""Primetime Emmy' is the award_category;  rating over 7 refers to rating > 7; nominated refers to result = 'Nominee'; percentage = Divide(Count(episode_id(award_category = 'Primetime Emmy')), Count (episode_id)) * 100"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name the title of the episode where Pamela Hayden voiced the character 'Ruthie.' ""Pamela Hayden"" is the person; voice the character 'Ruthie' refers to role = 'Ruthie'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down all the roles of Matt Groening on the episode titled 'In the Name of the Grandfather' along with the episode number and series number. ""Matt Groening"" is the person; 'In the Name of the Grandfather' is the title of episode; episode number refers to episode; series number refers to number_in_series"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down the title and summary of the episode with the keyword 'eviction.'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average number of stars received by the episode titled 'Wedding for Disaster.' ""Wedding for Disaster"" is the title of episode; average number of stars = Divide(Sum(stars), Count(stars))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write the title and all the keywords of the episode that was aired on 3/22/2009. aired on 3/22/2009 refers to air_date = '2009-03-22'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the birth name of the person who voiced 'Helen Lovejoy?' voiced refers to role; role = 'Helen Lovejoy"""
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the percentage ratio between uncredited and credited roles on the episode that won the 2017 Jupiter Award for Best International TV Series? Please include the title of the episode and the names of the persons who were uncredited alongside their role in that episode. uncredited refers to credited = ''; credited refers to credited = 'true'; won refers to result = 'Winner'; 2017 is the year; 'Jupiter Award' is the award_category; 'Best International TV Series' is the award; percentage ratio = Divide (SUM(credited = ''), SUM(credited = 'true')) * 100"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes have more than 1000 votes? more than 1000 votes refers to votes > 1000"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many persons were born in New York, USA? ""New York"" is the birth_place; 'USA' is the birth_region"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the name of all awards along with the award category, nominated by Marc Wilmore. ""Marc Wilmore"" is the name of person"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many crew have their own nickname? List their full name along with the nickname. crew refers to Person; full name refers to name; have nickname refers to nickname IS NOT NULL"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Find the average height for each person. average high = Divide(Sum(height_meters), Count(name))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the difference between the highest votes for episode and the lowest votes for episode. highest vote refers to Max(votes); lowest vote refers to Min(votes); difference = Subtract(Max(votes), Min(votes))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the name character awarded for the Outstanding Voice-Over Performance award in 2009. in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the person nominated for the Comedy Series Award in 2009, how many of them were born in California? nominated refers to result = 'Nominee'; born in California refers to birth_place = 'California'; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of episode that won the Best International TV Series Award in 2017? won refers to result = 'Winner'; in 2017 refers to year = 2017"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the name of persons who were not included in the credit for the 'How the Test Was Won' episode. ""How the Test Was Won"" is the title of episode; not included in the credit refers to credited = ' '; name of person refers to person"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of episode that has a keyword of 'riot' and 'cake'? ""riot"" and ""cake"" are both keyword"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode has the most vote for 10 stars rating? 10 stars rating refers to stars = 10; most vote refers to Max(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name all the person who involved in the making of simpson 20s episode that aired between October to November. aired between October to November refers to strftime('%m', air_date) between '10' and '11';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: State the name of director for the 'Treehouse of Horror XIX' episode. ""Treehouse of Horror XIX"" is the title of episode; 'director' is the role of person; name refers to person"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Based on the credits, state how many roles were played in the 5th episode of simpson 20. 5th episode refers to episode = 5"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List all the keyword for 'Take My Life, Please' episode. ""Take My Life,Please"" is the title of episode"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes. more than 950 votes refers to votes > 950; in 2009 refers to year = 2009; number of episode = Count(episode_id); nominated refers to result = 'Nominee'; percentage = Divide(Count(award = 'Outstanding Voice-Over Performance'), Count(episode_id)) * 100"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the ratio between the 5 stars votes for 'No Loan Again, Naturally' episode and 'Coming to Homerica' episode? 5 stars votes refers to stars = 5 ; 'No Loan Again, Naturally' and 'Coming to Homerica' are both the title of episode;  ratio = Divide (votes where title = 'No Loan Again, Naturally', votes where title = 'Coming to Homerica')"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many times was Ian Maxtone-Graham nominated for an award in Writers Guild of America, USA? ""Ian Maxtone-Graham"" is the person; nominated refers to result = 'Nominee'; 'Writers Guild of America, USA' is the organization"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the name of the person that has the highest number of nominated award but didn't win? nominated refers to result = 'Nominee'; highest number of nominated award refers to Max(Count(person))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episode that received the lowest rating? lowest rating refers to Min(rating)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What year did the Simpsons receive its first ever award for Favorite Animated Comedy in People's Choice Award? ""Favorite Animated Comedy"" is the award; 'People's Choice Award' is the award_category; received award refers to result = 'Winner'; first ever award refers to Min(year)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes was Dell Hake not included in the credit list? ""Dell Hake"" is the person; not included in the credit list refers to credited = ''"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How old was the awardee when he/she won the first-ever award for Outstanding Voice-Over Performance in Primetime Emmy Awards? ""Outstanding Voice-Over Performance"" is the award; 'Primetime Emmy Awards' is the organization; awardee refers to result = 'Winner'; first ever award refers to Min(year); age at the time of awarded refers to Subtract(year, SUBSTR(birthdate, 0, 5))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What character did Dan Castellaneta play that won him an award for Outstanding Voice-Over Performance in 2009 in the Primetime Emmy Awards? ""Dan Castellaneta"" is the person; won refers to result = 'Winner'; 'Outstanding Voice-Over Performance' is the award; 'Primetime Emmy Awards' is the organization; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes aired on April of 2009, how many episodes won an award? aired on refers to air_date, April refers to SUBSTR(air_date, 6, 2) = '04'; 2009 refers to SUBSTR (air_date, 0, 5) = '2009'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the birth place of the cast or crew member who won the Best Voice-Over Performance in Online Film & Television Association in 2009? won refers to result = 'Winner'; 'Best Voice-Over Performance' is the award; ' Online Film & Television Association' is the organization; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many 10 star votes did the top 4 episodes with the highest rating received? 10 stars votes refers to stars = 10; highest rating refers to Max(rating); number of votes refers to SUM(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In ""No Loan Again, Naturally"", how many stars received votes of no more than 50? ""No Loan Again, Naturally"" is the title of episode; votes of no more than 50 refers to votes < 50; number of stars refers to SUM(stars)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many award winners are from the USA? award winner refers to result = 'Winner'; 'USA' is the birth_country"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In Season 20 Episode 11, how many times was Doofus included in the credit list? in Season 20 Episode 11 refers to episode_id = 'S20-E11'; 'Doofus' is the nickname of person; include in credit list refers to credited = 'true'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What was the first award won by the cast or crew member of the show? Give the name of the person who won the said award. won refers to result = 'Winner'; first award refers to Min(year)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In ""Sex, Pies and Idiot Scrapes"", how many percentage of votes did the 9 star score has? ""Sex, Pies and Idiot Scrapes"" is the title of episode; 9 star score refers to stars = 9; percentage refers to percent"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the award name and persons who won the award in 2009. won the award refers to result = 'Winner'; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the casts who were born in Los Angeles, describe the name and birth date of who have 1.8 m and above in height. ""Los Angeles"" is the birth_place; 1.8 m and above in height refers to height_meters > = 1.8"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Provide the episode number, title and rating of which were aired in October, 2008. episode number refers to episode; aired in refers to air_date; October refers to Substr(air_date, 6, 2) = '10': 2008 refers to Substr(air_date, 0, 5) = '2008'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down the award ID, award name and winner for character named ""Homer simpson 20"". ""Homer simpson 20"" is the character; ""Winner"" is the result; award name refers to award"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the award name, result, credit category and credited status of the ""Billy Kimball"". ""Billy Kimball"" is the person; award name refers to award; credited category refers to category; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name the person, award, organization, result and credited status of the assistant director in S20-E13. ""assistant director"" is the role of person; 'S20-E13' is the episode_id; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Describe the birth country, height and person name who were not included in credit list with category of casting. height refers to height_meters; not in credit list refers to credited = ''; category of casting refers to category = 'Casting Department'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the nominee, keywords and episode ID of the title ""The Good, the Sad and the Drugly"". nominee refers to result = 'Nominee'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the voting numbers and percentage of the best rating scale of the episode which had keyword of ""arab stereotype""? best rating scale refers to stars = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: For the episode who won the award held by Jupiter Award, describe award name, aired date and rating of that episode. held by Jupiter Award refers to organization = 'Jupiter Award'; won the award refers to result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Mention the episode ID, title and any three keywords of the episode which get the most number of votes in star classification of worst. star classification of worst refers to stars = 1; most number of votes refers to MAX(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes with excellent rating which were aired in 2008, describe the title, episode's image, award name and person who were nominated. excellent rating refers to 7 < = rating < = 10; aired in 2008 refers to SUBSTRACT(air_date, 0, 5) = '2008'; who were nominated refers to result = 'Nominee'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Describe the award title, person and character name of the award ID 326."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Describe name, birth country, role in episode and age in 2022 of the oldest crew member.. age in 2022 refers to SUBTRACT(2022, substr(birthdate, 0, 5)); oldest refers to MIN(birthdate)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Provide the number of credits, category, role and birthplace of the crew member who was born in North Korea. number of credits refers to credited; born in North Korea refers to birth_country = 'North Korea'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Find the winning rate of award in 2010. Describe the winner name, award name, episode title and role of the winner in that episode. in 2010 refers to year = 2010; winning rate refers to DIVIDE(COUNT(result = 'winner'), COUNT(*));"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name the title of the episode that received the highest star score and the highest number of votes. received the highest star score refers to MAX(stars); the highest number of votes refers to MAX(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the total number of awards won by The simpson 20s: Season 20? total number of awards refers to COUNT(award); awards won refers to result = 'Winner';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name the title of the episode that was nominated for Emmy's Outstanding Animated Program 21 times. nominated for refers to result = 'Nominee'; Outstanding Animated Program refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)'; Emmy's refers to organization = 'Primetime Emmy Awards'; 21 times refers to COUNT(episode_id) = 21;"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average number of stars assigned to The simpson 20s: S20-E12? What is the said episode all about? average number of stars refers to AVG(stars); simpson 20s: S20-E12 refers to episode_id = 'S20-E12'; episode all about refers to summary"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name the performer who won Emmy Award for Outstanding Voice-Over Performance by playing Homer simpson 20. Outstanding Voice-Over Performance refers to award = 'Outstanding Voice-Over Performance'; who won refers to result = 'Winner'; Emmy refers to organization = 'Primetime Emmy Awards'; playing Homer simpson 20 refers to character = 'Homer simpson 20'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the birth name of Al Jean and his role in creating The simpson 20s: Season 20?"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many nominations have Billy Kimball received in 2010 for The simpson 20s: Season 20? in 2010 refers to year = 2010; nominations refers to result = 'Nominee'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List all keywords associated with the episode 'Take My Life, Please'. episode 'Take My Life, Please' refers to title =   'Take My Life, Please'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Indicate the name and category of the most recent award received by the show. most recent refers to MAX(year); received refers to result = 'Winner'; name of award refers to award; category refers to award_category"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is The simpson 20s: Season 20 average awards winning rate? average awards winning rate refers to DIVIDE(SUM(result = 'winner'), COUNT(award));"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes were aired between October and November 2008? between October and November 2008 refers to air_date BETWEEN '2008-10-01' and '2008-11-30'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among episodes aired in 2009, which episode has received the worst response based on the rating. aired in 2009 refers to year(air_date) = 2009; received the worst response based on the rating refers to MIN(rating)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the categories for which Bonita Pietila was given credit and her role in creating the episodes."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who from The simpson 20s: Season 20 cast and crew was born in October 29, 1957 in Chicago, Illinois? born in October 29, 1957 refers to birthdate = '1957-10-29'; in Chicago refers to birth_place = 'Chicago'; Illinois refers to birth_region = 'Illinois'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who produced The simpson 20s: Season 20? produced refers to role = 'producer'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How old was composer of the show when he was nominated for Emmy's Outstanding Music Composition for a Series in 2009. Indicate his full name as well. in 2009 refers to year = 2009; old refers to SUBTRACT(2009, birthdate); composer of the show refers to role = 'composer'; Emmy's refers to organization = 'Primetime Emmy Awards'; nominated refers to result = 'Nominee'; Outstanding Music Composition refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode of The simpson 20s: Season 20 has received the most nominations? Indicate the title. received the most nomination refers to MAX(COUNT(episode_id))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please indicate the birthplace of the crew which name is Dan Castellaneta."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many crews were born in the USA? born in the USA refers to birth_country = 'USA'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list the name of crew that were born before 1970. born before 1970 refers to birthdate < '1970-01-01'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name of the crew that were born in California, USA between 1958 and 1969. born in California refers to birth_place = 'California'; USA refers to birth_country = 'USA'; between 1958 and 1969 refers to birthdate BETWEEN '1958-01-01' and '1958-12-31'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode ids are rated 5 stars and have more than 100 votes? more than 100 votes refers to votes > 100"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please indicate the keywords of the title ""Double, Double, Boy in Trouble""."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among episodes from 10 to 20, which episode has more than 200 votes? episodes from 10 to 20 refers to episode BETWEEN 10 and 20; more than 200 votes refers to COUNT(votes) > 200"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please indicate the keywords of the episode that won the Primetime Emmy Award category. Primetime Emmy Award refers to award_category = 'Primetime Emmy'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the recipient of the Primetime Emmy Award with the most votes? Primetime Emmy Award refers to award_category = 'Primetime Emmy'; the most votes refers to MAX(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode id did award Outstanding Animated Program (For Programming Less Than One Hour) with an episode star score of 10? star score of 10 refers to stars = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please give the name of the director who achieved the Outstanding Animated Program (For Programming Less Than One Hour) award whose episode title is ""No Loan Again, Naturally"". the director refers to role = 'director'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please indicate which writer has an episode star score greater than 5 in 2009. writer refers to role = 'writer'; star score greater than 5 refers to stars > 5; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many WGA Award (TV) award recipients were born in the USA from 2009 to 2010? WGA Award (TV) award refers to award_category = 'WGA Award (TV)'; born in the USA refers to birth_country = 'USA'; from 2009 to 2010 refers to birthdate BETWEEN '2019-01-01' and '2019-12-31'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode did the composer win for Outstanding Music Composition for a Series (Original Dramatic Score) with more than 200 votes? more than 200 votes refer to votes > 200; composer refers to role = 'composer'; Outstanding Music Composition for a Series (Original Dramatic Score) refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: The person named Al Jean achieved the Primetime Emmy Award category in 2009, which episode did AI Jean achieve? in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How much more votes for episode 1 than for episode 5? more votes refers to SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What award did the character Homer simpson 20 achieve in 2009? in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes have won the award for Outstanding Animated Program (Programming Under One Hour) with less than 100 votes? Calculate the percentage of episodes with less than 100 votes out of total episodes. less than 100 votes refers to votes < 100; percentage refers to DIVIDE(COUNT(episode_id when votes < 100), COUNT(episode_id)) * 100%"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many recipients of the Primetime Emmy Award category that were born in the USA? Find the percentage of Americans in the total number of the country. born in the USA refers to birth_country = 'USA'; recipients refers to person = 'recipients'; percentage refers to DIVIDE(COUNT(birth_country = 'USA'), count(award_id))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list two people who are the nominees for the ""Outstanding Voice-Over Performance"" award for season 20. season 20 refers to episode_id LIKE 'S20%'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many executive producers are the nominees for the award of ""Outstanding Animated Program (For Programming Less Than One Hour)""? the nominees refers to result = 'Nominee'; executive producers refers to role = 'executive producer'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In the crew, who was born in 1962 in California? born in 1962 refers to year(birthdate) = 1962; in California refers to birth_region = 'California'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many of the crew members who are taller than 1.70m were born in Canada? taller than 1.70m refers to height_meters > 1.70; born in Canada refers to birth_country = 'Canada'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people were considered as prospective recipients of the ""Animation"" award? prospective recipients refers to result = 'Nominee'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list any three episodes that have an excellent rating. an excellent rating refers to 7 < rating < = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the top five most popular episodes? most popular episodes refers to MAX(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list the three episodes with the highest number of votes for the worst star rating. highest number of votes refers to MAX(COUNT(votes)); worst star rating refers to stars = 1"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What was the character that Dan Castellaneta did the voice over for and was awarded? voice over for and was awarded refers to award like '%Voice-Over%';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list all of the episodes that aired in 2008 that have the highest number of votes for the maximum star rating. aired in 2008 refers to air_date like '2008%'; highest number of votes refers to MAX(votes); maximum star rating refers to stars = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the episode ""Take My Life, Please""? episode ""Take My Life, Please"" refers to title = 'Take My Life, Please'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please provide any two episodes' names that have the same keyword of ""1930s to 2020s""."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In 2010, which episode did Joel H. Cohen win an award for? In 2010 refers to year = 2010"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many votes of 5-star did the episode ""Lisa the Drama Queen"" receive? episode ""Lisa the Drama Queen"" refers to title = 'Lisa the Drama Queen';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the number of votes for 10-star for the episode that has the keyword ""reference to the fantastic four""? 10-star refers to stars = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the difference between the number of votes for 1-star vs. 10-star for the episode ""The Burns and the Bees""? 1-star refers to stars = 1; 10-star refers to stars = 10; episode ""The Burns and the Bees"" refers to title = 'The Burns and the Bees'; difference refers to SUBTRACT(votes when stars = 1, votes when stars = 10)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the least popular episode? least popular episode refers to MIN(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the episodes that have the average rating with more than 20 of 2-star votes? 2-star refers to stars = 2; average rating refers to 5 < rating < = 7; more than 20 of 2-star votes refers to votes > 20"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode has the largest number of votes? largest number of votes refers to MAX(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the oldest among all the casts and crews? oldest refers to MIN(birthdate)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the episodes Oscar Cervantes is credited with? is credited refers to credited = 'true';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the roles of the cast and crew from countries other than the USA? from countries other than the USA refers to birth_country ! = 'USA'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many 1 star ratings are there in the worst rated episode of the season? worst rated episode refers to MIN(rating)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which character did the ""Outstanding Voice-Over Performance"" winner voice? the ""Outstanding Voice-Over Performance"" refers to award = 'Outstanding Voice-Over Performance'; winner refers to result = 'Winner';"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the summary of the episode in which Emily Blunt is featured in?"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who did ""The Tiny Canadian"" play as in the show? ""The Tiny Canadian"" refers to nickname = 'The Tiny Canadian'; play as in the show refers to role"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes with an award nominee or winner, which has the highest percent of 5 star votes? highest percent of 5 star votes refers to max(percent) where star = 5"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the credited cast for the episode ""In the Name of the Grandfather""? credited cast refers to category = 'Cast' and  credited = 'true'; episode ""In the Name of the Grandfather"" refers to title = 'In the Name of the Grandfather'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List all of the award winners' birth dates. award winner refers to result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the writer for the episode with the most 10 star votes? writer refers to role = 'Writer'; most 10 star votes refers to max(votes) where stars = 10"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What award did the episode that aired on 11/30/2008 win? aired on 11/30/2008 refers to air_date = '11/30/2008'; win refers to result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List all of the information about the music department's casts and crews. information about the music department refers to category = 'Music Department'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords for episode 426 of the series? episode 426 refers to number_in_series = 426"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the titles of the episodes that have received more 7-star votes than the season average? episodes that have received more 7-star votes than the season average refers to votes > DIVIDE(SUM(votes), COUNT(stars = 7))"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What percentage of votes are from the nominated episodes? nominated episodes refers to result = 'Nominee'; percentage of votes = DIVIDE(SUM(result = 'Nominee), SUM(Votes)) as percentage"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down person's name who has nickname. has nickname refers to nickname is NOT NULL"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which country has the tallest person in the crew? country refers to birth_country; tallest person refers to max(height_meters)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average height of people from USA? people from USA refers to birth_country = 'USA'; average height = AVG(height_meters)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the percentage of people who were born after 1970 and from California. born after 1970 refers to birthdate > 1970; from California refers to birth_region = 'California'; percentage = divide(count(birthdate > 1970 and birth_region = 'California'), total(birthdate)) * 100%"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people were not born in Connecticut, USA? not born in Connecticut, USA refers to birth_region ! = 'Connecticut' and birth_country ! = 'USA'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the title of episode S20-E1, S20-E2 & S20-E3. episode S20-E1, S20-E2 & S20-E3 refers to episode_id = 'S20-E1' and episode_id = 'S20-E2' and episode_id = 'S20-E3'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down the website address which stores the episode image of episode 5. website address refers to episode_image"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: State the number of votes for episode with rating of 7 and above. rating of 7 and above refers to rating > 7.0"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many title's crew members are working from Casting Department? working from Casting Department refers to category = 'Casting Department'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many additional timers were born in USA? additional timers refers to role = 'additional timer'; born in USA refers to birth_country = 'USA'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people who were born after 1970 are animation executive producer? born after 1980 refers to birthdate > 1970; assistant to the producers refers to role = 'animation executive producer'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down the summary of episode whereby it has crew members that are not included in the credit list. are not included in the credit list refers to credited = ''"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the rating of episodes that were produced by Jason Bikowski. produced by Jason Bikowski refers to person = 'Jason Bikowski'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average heights of crew members from Animation Department? from Animation Department refers to category = 'Animation Department'; AVG(height_meters) where category = 'Animation Department'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the character that won the award in Primetime Emmy 2009? won the award in Primetime Emmy 2009 refers to award_category = 'Primetime Emmy' and year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the characters that were nominated for Primetime Emmy Award from 2009 to 2010 but did not win? nominated for Primetime Emmy Award but did not win refers to award_category = 'Primetime Emmy' and result = 'Nominee';  from 2009 to 2010 refers to year > = '2009' and  year < = '2010'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the total votes of episodes that Adam Kuhlman had involved. Adam Kuhlman had involved refers to person = 'Adam Kuhlman'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the keyword and crew member's name for episode id S20-E1."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the keyword for episodes with stars score of 10 at 30% and above? stars score of 10 at 30% and above refers to stars = 10 and percent > 29"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the percentage of star score 5 that was collected by title ""Sex, Pies and Idiot Scrapes""? percentage = DIVIDE(SUM(stars = 5), COUNT(stars)) as percentage"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please check is ""limbo dancing"" the keyword for title ""Dangerous Curves""?"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which title is the winner of Best International TV Series in 2017? winner refers to result = 'Winner'; Best International TV Series in 2017 refers to award = 'Best International TV Series' and year = '2017'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down all the keywords for winner of ""WGA Award (TV)"" award. winner of ""WGA Award (TV)"" award refers to award_category = 'WGA Award (TV)' and result = 'Winner'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: State the birth place of co-executive producer for nominee of ""Outstanding Animated Program (For Programming Less Than One Hour)"" award. co-executive producer refers to role = 'co-executive producer'; nominee of ""Outstanding Animated Program (For Programming Less Than One Hour)"" award refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)' and result = 'Nominee'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Sum up the votes from star 1 to 5 for all of the contestants in Blimp Award. contestants refers to result = 'Winner' and result = 'Nominee'; in Blimp Award refers to award = 'Blimp Award'; star 1 to 5 refers to 1 < stars < 5"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the total rating of winners in OFTA Television Award and WGA Award (TV). winners refers to result = 'Winner'; in OFTA Television Award and WGA Award (TV) refers to award = 'OFTA Television Award' and award = 'WGA Award (TV)'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Out of the rating of 6.8 scored by title ""No Loan Again, Naturally"", how many percent of it consists of scores 5 to 10? scores 5 to 10 refers to TOTAL(percent) where 1 < = stars < 5"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes have the star score greater than 8? star score greater than 8 refers to stars > 8"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode has the highest number of vote of the star score? highest number of vote of the star score refers to max(votes)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes have the keyword ""2d animation""?"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Name the organization which hold the award id 328."
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many awards had been held in 2009? had been held in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many awards classified as ""Primetime Emmy"" category? category refers to award_category"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out the birth name of crews who are co-executive producer and higher than 1.60 meters. co-executive producer refers to role = 'co-executive producer'; higher than 1.60 meters refers to height_meters > 1.60"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the percentage of the nominees who were born in USA. nominees refers to result = 'Nominee'; born in USA refers to birth_country = 'USA'; percentage = divide(sum(result = 'Nominee' and birth_country = 'USA'), count(Person.name)) * 100%"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the percentage of the winners who are higher than 1.75 meters. winners refers to result = 'Winner'; higher than 1.75 meters refers to height_meters > 1.75; percentage = divide(sum(result = 'Winner' and height_meters > 1.75), count(result = 'Winner' )) * 100%"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out the title of episodes which have star score of 2. star score of 2 refers to stars = 2"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out the star scores of episode which has title of ""How the Test Was Won"". star scores refers to stars"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes which have star score greater than 5, how many episodes have air date in 2008? star score greater than 5 refers to stars > 5; have air date in 2008 refers to air_date LIKE '2008%'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out the names of the awarded character in the awards held in 2009. in 2009 refers to year = 2009; name of awarded character refers to character"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which are the years that character Mr. Burns won an award?"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the awarded category that the awarded character Lenny won? 

awarded category refers to award_category"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the name of actor who took the role Smithers? name refers to person; the role Smithers refers to character = 'Smithers'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the episode which has title as Dangerous Curves?"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the episodes which have the air date in 2008? have air date in 2008 refers to air_date LIKE '2008%'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes which have star score less than 8, how many episodes were aired in 2009? star score less than 8 refers to stars < 8; aired in 2009 refers to air_date LIKE '2009%'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: State the birth name of crews who are director and have birth country in South Korea. director refers to role = 'director'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many awards did simpson 20 won in 2009? won refers to result = 'Winner'; in 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the total number of episode with a rating below 7? rating below 7 refers to rating < 7"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the names of person born in California, USA. California refers to birth_region = 'California'; USA refers to birth_country = 'USA'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In between the episode 5 and10 of season 2, how many of them are credited for casting? between the episode 5 and 10 of season 20 refers to episode_id IN('S20-E5', 'S20-E6', 'S20-E7', 'S20-E8', 'S20-E9', 'S20-E10'); credited refers to credited = 'true'; for casting refers to role = 'casting'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the episode ID that received 2 stars and 9 votes? 2 stars refers to stars = 2; 9 votes refers to votes = 9"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Give the title of the episode won in Primetime Emmy Awards 2009. won refers to result = 'Winner'; in Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; 2009 refers to year = 2009"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the episode ID of episodes aired in 2008 with 5 stars and below. aired in 2008 refers to air_date LIKE '2008%'; 5 stars and below refers to stars < 5"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episode with highest votes, what is the category credited to Carlton Batten? highest votes refers to max(votes); to Carlton Batten refers to person = 'Carlton Batten'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes aired in 2008 with votes ranges from 920 to 950, list their percent. aired in 2008 refers to air_date LIKE '2008%'; votes ranges from 920 to 950 refers to votes BETWEEN 920 AND 950"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the episode ID and title of episode where casting was credited to Bonita Pietila. was credited refers to credited = 'true'; to Bonita Pietila refers to person = 'Bonita Pietila'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In episode nominated in Annie Awards, how many of the episodes have a percent greater than 6? nominated refers to result = 'Nominee'; Annie Awards refers to organization = 'Annie Awards'; percent greater than 6 refers to percent > 6"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of episode nominated for WGA Award (TV) with votes greater than 1000? nominated refers to result = 'Nominee'; WGA Award (TV) refers to award_category = 'WGA Award (TV)'; votes greater than 1000 refers to votes > 1000"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the people in Animation Department, who are credited for additional time in the episode titled by ""How the Test Was Won""? Animation Department refers to category = 'Animation Department'; credited refers to credited = 'true'; for additional timer refers to role = 'additional timer'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the stars of episodes aired in November 2008. in November 2008 refers to air_date LIKE '2008-11%'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of episode with 5 stars and nominated for Prism Award which is aired on April 19, 2009? 5 stars refers to stars = 5; nominated refers to result = 'Nominee'; Prism Award refers to award_category = 'Prism Award'; on April 19 2009 refers to air_date = '2009-04-19'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In episode with the highest votes, list the category of awards it is nominated for. highest votes refers to max(votes); nominated refers to result = 'Nominee'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In episodes aired in 2009, how many of them are credited to Sam Im for additional timer? in 2009 refers to air_date LIKE '2009%'; credited refers to credited = 'true'; Sam Im refers to person = 'Sam Im'; for additional timer refers to role = 'additional timer'"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the title of the episode with stars greater than the 70% of average stars of all episodes. stars greater than the 70% of average stars refers to stars > multiply(avg(stars), 0.7)"
simpson_episodes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date text,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Person (
name text,
birthdate text,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (name),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
person text,
role text,
episode_id text,
season text,
song text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (person) REFERENCES Person(name),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Character_Award (
award_id integer,
character text,
FOREIGN KEY (award_id) REFERENCES Award(award_id),
);
CREATE TABLE Credit (
episode_id text,
category text,
person text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person) REFERENCES Person(name),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In year 2009, what is the percentage of the episode titled by ""Gone Maggie Gone"" being nominated? being nominated refers to result = 'Nominee'; percentage = divide(count(result = 'Nominee'), count(result)) * 100%"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have never been absent from school? have never been absent refers to `month` = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: For the students who have been absent from school for the longest time, how many months have they been absent? absent from school for the longest time refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students belong to the navy department? belong to the navy department refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students that have been absent from school for more than 5 months, how many of them are male? absent from school for more than 5 months refers to `month`  > = 5;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please list the names of the male students that belong to the navy department. belong to the navy department refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students that have filed for bankruptcy, how many of them have been absent from school for over 5 months? absent from school for over 5 months refers to `month` > 5;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students from the navy department, how many of them have payment due? from the navy department refers to organ = 'navy'; have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please list the male students that are disabled and have filed for bankruptcy. male students that are disabled and have filed for bankruptcy refers to name that appeared in all three male, disabled and filed_for_bankrupcy tables."
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many female students are disabled? females students are disabled refers to name that appeared in both disabled and male tables"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are unemployed and have payment due? are unemployed and have payment due refers to"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the longest time for a student from the navy department to be absent from school? navy department refers to organ = 'navy'; longest time to be absent from school refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students have never been absent from school? never been absent from school refers to month = 0"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please list the departments the students are absent from school for 9 months are in. absent from school for 9 months refers to month = 9"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which department has the most disabled students? department refers to organ; most disabled students refers to MAX(disabled.name)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please list all the female students that have filed for bankruptcy. females students have filed for bankruptcy refers to name that appeared in both filed_for_bankrupcy and male tables"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the percentage of male students in the navy department? in the navy department refers to organ = 'navy'; percentage refers to DIVIDE(COUNT(name where organ = 'navy'), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the average time for a disabled student to be absent from school? average time refers to DIVIDE(SUM(`month`), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Name all students enlisted in the foreign legion. in the foreign legion organ = 'foreign_legion';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Does student348 have a due payment? payment due refers to bool = 'pos' means the student has payment due , bool = 'neg' means the student does not have payment due;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which school is student829 enrolled in?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many months has student217 been absent?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List all students that have been absent for 6 months. absent for 6 months `month` = 6;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which organization did student285 enlist?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Is student281 disabled and which school is the student enrolled in?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List all students in the air force and which school they were enrolled at. in the air force refers to organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List 10 students that have no due payments and are not males. no due payments refers to bool = 'neg'; not males refers to not in male table"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Name 5 students with due payments that are enlisted alongside which organization they were enlisted. with due payments refers to bool = 'pos'; organization refers to organ"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Name all disabled students that are enrolled in SMC. enrolled in SMC refers to school = 'smc';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which students that filed for bankruptcy are also in the foreign legion? in the foreign legion refers to organ = 'foreign_legion';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many male students have no due payments? have no due payments refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which students that are in the marines have been absent for 6 months? in the marines refers to organ = 'marines'; absent for 6 months refers to month = 6"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students from SMC are unemployed? from SMC refers to school = 'smc';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students are there that have been absent for 6 months? absent for 6 months refers to month = 6;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Count the number of students from UCSD enlisted in the peace corps. in the peace corps refers to organ = 'peace_corps'; from UCSD refers to school = 'ucsd';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Student21 is enlisted in which organization and has the student been absent? organization refers to organ"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the percentage ratio of students who are enlisted in foreign legions that have a due payment? have a due payment refers to bool = 'pos'; in foreign legions refers to organ = 'foreign_legion'; ratio refers to DIVIDE(COUNT(bool = 'pos'), COUNT(bool = 'neg'))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What percentage of students who enlisted in the navy make up the number of students enrolled in OCC? in the navy refers to organ = 'navy'; enrolled in OCC refers to school = 'occ'"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out student IDs that have the longest absence duration from school. longest absence duration refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the total number of students in the school?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the longest students absence duration from school? longest students absence duration MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students were absence for 4 month? absence for 4 month refers to month = 4;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the number of unemployed and bankrupt students?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Does disable students join organization. If yes, please indicate the organization joined by the students. organization refers to organ"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed and bankrupt students that have payment dues? have payment dues refers to bool = 'pos'"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please check if student 124 is disabled male. if student name appear in disabled then student is disabled and vice versa; if student name appear in male then student is male and vice versa"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the employment, disability, gender and school debt status for student180 and student117? school debt status refers to bool; bool = 'pos' means has payment due; bool = 'neg' means doesn't has payment due; student appear in male.name means he is a male; student does not appear in male.name means she is a female;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many female students joined a marines and air force organization? joined a marines refers to organ = 'marines'; air force organization refers to organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out the organization joined and school enrolled by student27, student17 and student101? organization joined refers to organ"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the ratio of disable female to male students? ratio refers to DIVIDE(COUNT(name not from male), COUNT(name from male))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many female students are not joining any of the organization? female students refers to enlist.name who are NOT in male.name"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out all bankrupt students that are able to make payment before due? make payment before due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the average absence period of a student? average refers to DIVIDE(SUM(month), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the average of absence for an employed students? average refers to DIVIDE(SUM(month), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the average absence period of a disabled student? average refers to DIVIDE(SUM(month), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which organization does student 313 belong to? organization refers to organ"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students enlisted in the fire-department? enlisted in the fire-department refers to organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students who have never been absent from school? have never been absent refers to `month` = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have been absent above 2 months? absent above 2 months refers to month > 2;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State the number of students do not have payment due. do not have payment due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Give the number of students who have payment due. who have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Mention the name of disabled students who have never been absent from school. never been absent from school refers to month = 0"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students are enlisted in the navy organization? enlisted in the navy organization refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Count the number of male students who belong to foreign legion. belong to foreign legion refers to organ = 'foreign_legion';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out the number of female students who enlisted in the air force. enlisted in the air force refers to organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State name of disabled students who have the longest duration of absense from school. longest duration of absense refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State the unemployed students who enlisted in marines. enlisted in marines refers to organ = 'marines';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the average duration of absense of disabled students. average refers to DIVIDE(SUM(month), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the percentage of unemployed students who have been absent for 5 months from school? percentage refers to DIVIDE(COUNT(month > 5), COUNT(month))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed disabled students have been absent for 8 months from school? absent for 8 months refers to month = 8;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State name of unemployed students who have the longest duration of absense from school. longest duration of absense refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Mention the name of unemployed students who have never been absent from school. have never been absent from school refers to month = 0"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students have been absent for 3 months from school? have been absent for 3 months from school refers to month = 3"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Mention the name of students who filed for bankruptcy and have never been absent from school. have never been absent refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State name of students who filed for bankruptcy and have the longest duration of absense from school. longest duration of absense refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the gender of student1000? student name appear in Male table means student is a male, student does not appear in Male table means student is a female"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are disabled?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have been absents for more than 6 months? absents for more than 6 months refers to month > 6"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which students have absents the most? absents the most refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enlisted in the army? enlisted in the army refers to organ = 'army';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Find the average number of absences for each student. average refers to DIVIDE(SUM(month), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Sum up the number of students enlisted in foreign legion, peace corps and army. enlisted in foreign legion refers to organ = 'foreign_legion'; peace corps refers to organ = 'peace_corps'; army refers to organ = 'army'"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students enlisted in marines, how many of them are disabled? enlisted in marines refers to organ = 'marines';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students still have payment due? still have payment due refers to bool = 'pos'"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which female students had never been absent? had never been absent refers to month = 0"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which school has the highest number of disabled students? highest number of disabled students refers to MAX(COUNT(disabled.name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List all the organisations of students who filed for bankcrupcy. organization refers to organ; students who filed for bankrupcy refers to file_for_bankrupcy.name"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many male students join more than one organization? more than one organization refers to COUNT(organ) > 1"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List all the navy students who are disabled. navy students refers to organ = 'navy'; disabled student refers to disabled.name"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many SMC's students that absent for 7 months? SMC's students refers to school = 'smc'; absent for 7 months refers to month = 7"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List all the disabled female students."
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the ratio between unemployed students and disabled students. ratio refers to DIVIDE(COUNT(name from unemployed), COUNT(name from disabled))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Find the percentage of male students enlisted in the fire department. percentage refers to DIVIDE(COUNT(organ = 'fire_department'), COUNT(name))"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students has the longest absense from school for 5 months? absense from school for 5 month refers to month = 5"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enlisted in the Army organization? enlisted in the army refers to organ = 'army';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enrolled in UCLA school? enrolled in UCLA refers to school = 'ucla';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List at least 5 students who has the longest absense from schoool? longest absense refers to MAX(month)"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many of the students joined two organization? joined two organization refers to COUNT(organ) > = 2"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enlisted in the Navy organization? enlisted in the navy organization refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many male stuents do not have payment due? do not have payment due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enlisted in the Peace Corps organization are enrolled in UCSD school? enlisted in the Peace Corps refers to organ = 'peace_corps'; enrolled in UCSD school refers to school = 'ucsd';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the unemployed students, how many of them have no payment due? have no payment due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many female students have no payment due? have no payment due refers to bool = 'neg'; female students refers to name NOT in male table"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students have never been absent? never been absent refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List at least 10 students who have no payment due and are enlisted in Fire Department organization. no payment due refers to bool = 'neg'; organization refers to organ; organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many female students are enlisted in the Navy organization? female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students are enlisted in the Army organization? organization refers to organ; organ = 'army';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students have payment due? have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List at least 5 students who have payment due and are enlisted in Peace Corps organization? have payment due refers to bool = 'pos'; organization refers to organ; organ = 'Peace Corps';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students are female? female refers to disabled.name who are NOT in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students have payment due? have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the average number of female students who are disabled and who joined Foreign Legion organization. average = DIVIDE(COUNT(disabled.name who are not in male.name WHERE organ = 'foreign_legion'), COUNT(disabled.name)); female students who are disabled refers to disabled.name who are NOT in male.name; organization refers to organ; organ = 'Foreign Legion';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the ratio in percentage between the average number of female and male students who joined Fire Department organization. ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is NOT in male.name), COUNT(enlist.name WHERE organ = 'fire_department),'%'))) AS FEMALE; ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is IN male.name), COUNT(enlist.name WHERE organ = 'fire_department), 100))) AS MALE; female students refers to enlist.name who are NOT in male.name; male students refers to enlist.name who are IN male.name; organization refers to organ; organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students enlisted in the navy? navy refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the percentage of students who have never been absent. percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(name WHERE month = 0), 100), COUNT(name)),'%'); never been absent refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the ratio of students who have payment due and those who do not have payment due? ratio =  DIVIDE(COUNT(name WHERE `bool` = 'pos'), COUNT(name WHERE `bool` = 'neg')); have payment due refers to `bool` = 'pos'; no payment due refers to `bool` = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Provide the students' names and schools who enrolled for 15 months. enrolled for 15 months refers to month = 15;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the average enlisted students per organization. average = DIVIDE(FLOOR(COUNT(NAME), COUNT(DISTINCT organ)));"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List down the enrolled schools and duration of student214. enrolled schools refers to school; duration refers to month; student214 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among all students, calculate the percentage of disabled students. percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(disabled.name), 100), (COUNT(person.name that is not in disabled.name))),'%');"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among students who have been absent for nine months, how many of them are disabled? absent for 9 months refers to month = 9;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List down the student names who did not file for bankruptcy. students name who did not file a bankruptcy refers to person.name who are NOT in filed_for_bankrupcy.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List any five female students' names who enlisted for the air force. female students refers to enlist.name who are NOT in male.name; air force refers to organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the number of students who are not disabled. students who are not disabled refers to person.name who are NOT in disabled.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Define the gender of ""student995"" and his/her enrolled schools. male.name = 'student995' means student995's gender is male; if 'student995' can not be found in 'male.name', it means student995 is female;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students with disabilities, list any five students' names who are unemployed. students with disabilities who are unemployed refers to disabled.name who are IN unemployed.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many unemployed students filed for bankruptcy? unemployed students who filed for bankruptcy refers to unemployed.name who are IN filed_for_bankrupcy.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students who have been absent for four months, provide any five students' names and enlisted organizations. absent for four months refers to month = 4; enlisted organizations refers to organ;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students with payment due, how many of them are unemployed? with payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Provide the enlisted organizations of student160 and status of his/her payment due. enlisted organizations refers to organ; student160 is a name of student; status of his or her payment due is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List any ten male students who enlisted for foreign legion. male students are mentioned in male.name; foreign legion refers to organ = 'foreign_legion';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the percentage of female students. percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(person.name which is not in male.name)), 100), COUNT(person.name that is IN male.name),'%'); female students refers to person.name who are NOT in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are filed for bankruptcy?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enrolled in smc during month 1? smc refers to school = 'smc';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students enlist in the air force organization? organization refers to organ; organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the organization enlisted by student168? organization refers to organ; student168 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled male students joined an organization? organization refers to organ; disabled male students refers to disabled.name who are IN male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please provide a disability breakdown for each school. disability breakdown refers to the number of disabled students;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Please provide a gender breakdown for each organization. gender breakdown refers to the number of male and female; male are mentioned in male.name; female refers to enlist.name who are NOT in male.name; organization refers to organ;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out student names that enrolled in two schools and two organizations? enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the percentage difference between month 0 absence and month 9 absence? percentage difference = CONCAT(DIVIDE(MULTIPLY(SUBTRACT(COUNT(name WHERE month = 0), COUNT(name WHERE month = 9)), 100), COUNT(name WHERE month = 0)),'%');"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which school have the highest student enrollment? How many of those students are filed for bankruptcy? highest student enrollment refers to MAX(COUNT(school));"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students is disabled and unemployed at the same time? students who are disabled and unemployed at the same time refers to disabled.name = unemployed.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out students that enrolled in occ school and enlisted in a fire department. occ school refers to school = 'occ'; department refers to organ; organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which male students are unemployed, disable and were absent for 5 month? male students are mentioned in male.name; unemployed and disabled refers to unemployed.name = disabled.name; absent for 5 month refers to month = 5;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out female students that enrolled in occ school and ulca? female students refers to enrolled.name who are NOT in male.name; occ school and ulca refers to school IN('occ', 'ulca');"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the school and organization enrolled by student211? organization refers to organ; student211 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many male students filed for bankruptcy as compare to female students? difference = SUBTRACT(COUNT(filed_for_bankrupcy.name who are In male.name), COUNT(filed_for_bankrupcy.name who are NOT in male.name)); male students are mentioned in male.name; female students refers to filed_for_bankrupy.name who are NOT in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the average absent month for a unemployed male students? average = DIVIDE(SUM(month), COUNT(unemployed.name who are in male.name)); unemployed male students refers to unemployed.name who are IN male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the percentage difference between the attendence of disabled and non-disable students? Do the disable students show better attendance than non-disable students? difference = MULTIPLY(DIVIDE(SUBTRACT(COUNT(longest_absense_from_school.name that is in disabled.name), COUNT(longest _absense_from_school.name that is NOT in disabled.name), longest _absense_from_school.name), 100)); IF COUNT(longest_absense_from_school.name that is in disabled.name) < COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means, the disabled students have better attendance than non-disabled students; IF COUNT(longest_absense_from_school.name that is in disabled.name) > COUNT(longest _absense_from_school.name that is NOT in disabled.name), it means the disabled students do not have a better attendance than non-disabled students;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the average duration of absense of disabled male students. average duration = DIVIDE(SUM(month), COUNT(month)); duration of absence refers to month; disabled male students refers to disabled.name who are IN male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the ratio of unemployed students who have never been absent from school. ratio = CONCAT(DIVIDE(MULTIPLY(COUNT(unemployed.name WHERE month = 0), 100), COUNT(month)),'%'); unemployed students who have never been absent from school refers to (unemployed.name WHERE month = 0);"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State the number of male students who do not have payment due. do not have payment due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State the number of students who filed for bankruptcy and have payment due. have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the status of payment of student 124? status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student124 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State the number of disabled students who have payment due. have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State name of students who have the longest duration of absense from school and do not have payment due. longest duration of absence from school refers to MAX(month); do not have payment due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State name of students who have been absent for 5 months from school and do not have payment due. absent for 5 months refers to month = 5; do not have payment due refers to bool = 'neg';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out the number of disabled students who enlisted in marines. marines refers to organ = 'marines';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out the number of students who have the longest duration of absense from school and enlisted in the peace corps. longest duration of absence refers to MAX(month); peace corps refers to organ = 'peace_corps';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List out the number of students who filed for bankruptcy and enlisted in navy. navy refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Give the number of students who enlisted in marines and have payment due. marines refers to organ = 'marines'; have payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the ratio of disabled students who have never been absent from school. ratio = MULTIPLY(DIVIDE(SUM(month = 0), COUNT(disabled.name)), 100); never been absent from school refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students in the Air Force? Air Force refers to organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have been absent less than 4 months? absent less than 4 months refers to month < 4;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Count the number of female students who belong to marines organization. female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'marines';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the average duration of absense of female students. average duration = DIVIDE(SUM(month), COUNT(longest_absence_from_school.name which are NOT in male.name)); female students refers to longest_absence_from_school.name who are NOT in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: State name of female students who filed for bankruptcy. female students refers to filed_for_bankrupcy.name who are NOT in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Mention the status of payment of student 299. status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student299 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students are enlisted to the air force? Air Force refers to organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have absent from school? have absent from school refers to month > 1;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Provide the names of the students enlisted in the fire department. department refers to organ; organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students have payment due? payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students that filed for bankruptcy, how many of them have been enrolled in OCC? OCC refers to school = 'occ';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students are male? male students are mentioned in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List the names of disabled students enlisted in the navy. navy refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the male students, list down the names of students with payment due. male students are mentioned in male.name; with payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the employment and payment status of student110? employment status is mentioned in unemployment; unemployed.name = 'student110' means the student is unemployed; if 'student110' can not be found in unemployed.name, it means the student is employed; payment status is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student110 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among all students, calculate the percentage of male students. percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the school and gender of student34? male.name = 'student34' means student34's gender is male; if 'student34' can't be found in 'male.name', it means student34 is female; student34 is a name of student;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List the longest duration of absense for a student enlisted in the fire department. longest duration of absence refers to MAX(month); department refers to organ; organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among students with 1 month of absenses, how many of them are enlisted in the air force department? 1 month of absences refers to month = 1; department refers to organ; organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Provide the name of disabled male students that are unemployed. disabled male students that are unemployed refers to unemployed.name = male.name = disabled.name;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many male students are enrolled at OCC? male students are mentioned in male.name; OCC refers to school = 'occ';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students enrolled in UCLA, what is the percentage of male students in the air force department? UCLA refers to school = 'ucla'; percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name; department refers to organ; organ = 'air_force';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Calculate the average number of disabled female students enrolled in UCI. average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have never been absent in school? never been absent in school refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What are the names of the students who joined the Marines? Marines refers to organ = 'marines';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students enlisted in the Navy? Navy refers to organ = 'navy';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the name of the student with the longest duration of absence? longest duration of absence refers to MAX(month);"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: What is the name of the organization which most of the students are enlisted in? name of the organization refers to organ; organization which most of the students are enlisted in refers to MAX(COUNT(organ));"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many students have absences of no more than 3 months? absences of no more than 3 months refers to month < 3;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students that have a payment due, how many students are unemployed? students that have a payment due refers to bool = 'pos';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many female students have enlisted for the Army? female students refers to enlist.name who are NOT in male.name; Army refers to organ = 'army';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which organization has the least number of male students? organization refers to organ; male students are mentioned in male.name; least number of male students refers to MIN(male.name);"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many disabled students have zero absences? zero absences refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many of the unemployed students are disabled?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: List the names of the disabled students who were absent from school for more than 5 months. absent for more than 5 months refers to month > 5;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many bankrupt students are there in the Marines? Marines refers to organ = 'marines';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students who filed for bankruptcy, how many students are disabled?"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many months did a student in the Air Force miss school the most? Air Force refers to organ = 'air_force'; number of months a student miss school the most refers to MAX(COUNT(month));"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Among the students who filed for bankruptcy with an absence in school of no more than 6 months, how many students enlisted for the fire department? absence of no more than 6 months refers to month < 6; department refers to organ; organ = 'fire_department';"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: How many employed disabled students have zero absences? employed students refers to disabled.name who are NOT in unemployed.name; zero absences refers to month = 0;"
student_loan,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE bool (
name text,
PRIMARY KEY (name),
);
CREATE TABLE person (
name text,
PRIMARY KEY (name),
);
CREATE TABLE disabled (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enlist (
name text,
organ text,
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE filed_for_bankrupcy (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE longest_absense_from_school (
name text,
month integer,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE male (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE no_payment_due (
name text,
bool text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
FOREIGN KEY (bool) REFERENCES bool(name),
);
CREATE TABLE unemployed (
name text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES person(name),
);
CREATE TABLE enrolled (
name text,
school text,
month integer,
FOREIGN KEY (name) REFERENCES person(name),
);
---------------------
QUESTION: Which organization has the highest number of male students? Calculate for the percentage of the male students in the said organization. organization refers to organ; highest number of male students refers to MAX(COUNT(male.name)); percentage = DIVIDE(COUNT(male.name), COUNT(person.name)), 1.0;"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users answered ""No"" to question 19? Question 19 refer to QuestionID = 19; No refer to AnswerText = 'No'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: From 2016 to 2019, how many users each year were asked the question 13? From 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; Question 13 refer to QuestionID"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users, between the age 27 to 35, were surveyed in 2018? Age 27 to 35 refer to AnswerText 27 BETWEEN 35 where questionid = 1; 2018 refer to SurveyID"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: In 2019, how many users in the United States have a family history of mental illness? 2019 refer to SurveyID; Users in the United States refers to AnswerText = 'United States' where questionid = 3; have a family history of mental illness refers to AnswerText = 'Yes' where questionid = 6"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Betweeen 2016 to 2019, which year recorded the highest number of people with mental illness? Between 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; People with mental illness refers to AnswerText = 'Yes' where questionid = 34"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many female users were surveyed in the mental health survey for 2017 in the state of Nebraska? AnswerText = 'Yes' where questiontext = 'Do you have a family history of mental illness?'; AnswerText = 'Female' where questionid = 2; AnswerText = 'Nebraska' where questionid = 4"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users believed that their productivity is ever affected by a mental health issue overall? Users who believed that their productivity is affected by a mental health issues overall refers to AnswerText = 'Yes' where questionid = 54"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What are the ages of the oldest and youngest user that were surveyed? Indicate their user id. Oldest user refer to MAX(AnswerText) where questionid = 1; Youngest user refer to MIN(AnswerText) where questionid = 1"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Which country have the least number of users being surveyed? Indicate the name of the country. If there are multiple countries having the same number of users, indicate all of their names. Country with least number of users being surveyed refers to MIN(COUNT(AnswerText)) where questionid = 3"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What is the average age of the survey respondents in the United States? Average age refer to AVG(AnswerText) where questionid = 1; respondents in the United States refers to AnswerText = 'United States' where questionid = 3"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What is the percentage of the the users who would bring up a mental health issue with a potential employer in an interview? Percentage = DIVIDE(SUM(AnswerText = 'Yes' Or AnswerText = 'Maybe'), COUNT(QuestionID = 12))* 100"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many questions in 2014's survey had more than 200 answers? 2014 refer to SurveyID; COUNT(QuestionID) where COUNT(AnswerText) > 200"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What is the oldest age of the users in 2014's survey? what is your age? refer to QuestionText; 2014 refer to SurveyID; oldest age refers to MAX(AnswerText)"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users answered ""No"" to the question ""Would you bring up a mental health issue with a potential employer in an interview?"" in 2014's survey? 2014 refer to SurveyID; Answered No refer to AnswerText = 'No'; Question refer to questiontext"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Please list the IDs of the users who answered ""Yes"" to the question ""Do you think that discussing a physical health issue with your employer would have negative consequences?"" in 2014's survey. 2014 refer to SurveyID; Question refer to questiontext; yes refer to AnswerText = 'Yes'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users participated in the mental health survey for 2014? mental health survey for 2014 refers to SurveyID = 2014"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Please list all the answers to the question ""Any additional notes or comments"" that are not null in 2014's survey. question refers to questiontext; the answers that are not null refers to AnswerText ! = -1"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Please list all the common questions in 2014's survey and 2016's survey. question refers to questiontext; all the common questions in 2014's survey and 2016's survey refers to QuestionID(SurveyID(2014)) = QuestionID(SurveyID(2016))"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users lived in Canada according to 2018's survey? lived in Canada refers to AnswerText(QuestionID(3)) = 'Canada'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Please list all the questions in the mental health survey for 2014. mental health survey for 2014 refers to SurveyID = 2014"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: According to 2016's survey, what is the number of users with a mental health disorder in the past? users with a mental health disorder in the past refers to AnswerText(QuestionID(32)) = 'Yes'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users answered ""Yes"" to the question ""Have you had a mental health disorder in the past?"" in 3 consecutive years starting from 2016? question refers to questiontext; answered 'Yes' to question refers to AnswerText = 'Yes'; 3 consecutive years starting from 2016 refers to SurveyID = 2016 and SurveyID = 2017 and SurveyID = 2018"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What is the average result of the question ""What is your age?"" in 2014's survey? average result refers to avg(AnswerText(SurveyID = 2014& QuestionID = 1))"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What is the rate of increase of users with a current mental disorder from 2019's survey to 2016's survey? rate of increase = subtract(divide(count(SurveyID = 2019& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2019& QuestionID = 33)), divide(count(SurveyID = 2016& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 33)))"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Tell the question ID for ""Would you bring up a physical health issue with a potential employer in an interview?""."
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users answered the question No.20? question No.20 refers to QuestionID = 20"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many questions did user No.5 answer? user No.5 refers to userID = 5"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users participated in the Survey No.2016? Survey No.2016 refers to SurveyID = 2016"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: State the number of questions that were asked in the ""mental health survey for 2018"". mental health survey for 2018 refers to SurveyID = 2018"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Tell the number of surveys that contained the question “What country do you work in?”. question refers to questiontext"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What answer did user No. 2681 give to the question ""Do you currently have a mental health disorder?""? question refers to questiontext; user No. 2681 refers to UserID = 2681"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Provide the number of users who took part in the ""mental health survey for 2016"". mental health survey for 2016 refers to SurveyID = 2016"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What was the most common answer for the question ""What country do you work in?""? most common answer refers to AnswerText where MAX(COUNT(AnswerText(QuestionID = 3)))"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many different answers did the question ""Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions."" get?"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: For the question “What US state or territory do you work in?”, how many people gave ""Kansas"" as the answer? question refers to questiontext; AnswerText = 'Kansas'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many people wrote comments for the question ""Any additional notes or comments.""? question refers to questiontext; wrote comments refers to AnswerText(QuestionID = 103) ! = -1"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: For all the users who have been asked ""Have you ever been diagnosed with a mental health disorder?"", how many of them said ""Yes""? have asked refers to questiontext; said 'Yes' refers to AnswerText = 'Yes'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Give the number of users who took the ""mental health survey for 2018"". mental health survey for 2018 refers to SurveyID = 2018"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many users answered the question ""Overall, how much importance does your employer place on physical health?""? question refers to questiontext"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: For which question did the user No.2183 gave the answer ""Mood Disorder (Depression, Bipolar Disorder, etc)""? question refers to questiontext; user No.2183 refers to userID = 2183"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What was the percentage for the answer of ""Yes"" was given to the question ""Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?""? percentage = divide(count(QuestionID = 15& AnswerText = 'Yes'), count(QuestionID = 15))*100%"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many times more for the number of users who took the ""mental health survey for 2017"" than ""mental health survey for 2018""? How many times more = subtract(count(UserID(SurveyID = 2017)), count(UserID(SurveyID = 2018)))"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: Among respondents who participated in the survey in 2016, what percentage had a mental health disorder in the past? respondents and 'users' are synonyms; percentage = divide(count(SurveyID = 2016& QuestionID = 32 & AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 32))*100%"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many respondents younger than 25 years old did participate in the survey in 2016? respondents' and 'users' are synonyms; younger than 25 years old refers to AnswerText(SurveyID = 2016& QuestionID = 1)< 25"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: What is the average number of respondents per survey between 2014 and 2019? respondents and 'users' are synonyms; average number = avg(count(userID(SurveyID = 2014)), count(userID(SurveyID = 2019)))"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many respondents who participated in the survey in 2019 have ever sought treatment for a mental health disorder from a mental health professional? respondents' and 'users' are synonyms, have ever sought treatment for a mental health disorder from a mental health professional refers to AnswerText(SurveyID = 2019& QuestionID = 7) = 1"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many respondents who participated in the survey in 2014 work remotely at least 50% of the time? respondents' and 'users' are synonyms; work remotely at least 50% of the time refers to AnswerText(SurveyID = 2014& QuestionID = 93) = 'Yes'"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many questions were asked in the questionary for the mental health survey?"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: How many respondents of the mental health survey were diagnosed with 'Substance Use Disorder'? respondents' and 'users' are synonyms"
mental_health_survey,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Question (
questiontext text,
questionid integer,
PRIMARY KEY (questionid),
);
CREATE TABLE Survey (
SurveyID integer,
Description text,
PRIMARY KEY (SurveyID),
);
CREATE TABLE Answer (
AnswerText text,
SurveyID integer,
UserID integer,
QuestionID integer,
);
---------------------
QUESTION: List the top three popular responses to the question of the survey in 2017 with the question ID no.85. 

survey in 2017 refers to SurveyID = 2017; questionID = 85; MAX(COUNT(AnswerText))"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How much more total box office gross did the Walt Disney Company have in revenue in 1998 than in 1997? SUBTRACT(SUM(Year = 1998), SUM(Year = 1997))"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: In which segment did the Walt Disney Company earned a bigger revenue in 1998, Studio Entertainment or Disney Media Networks? Studio Entertainment[NI 1]' > 'Disney Media Networks' where Year = 1998;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the director of the movie Pinocchio? Pinocchio is the name of the movie;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Please list the villains of all the movies directed by Wolfgang Reitherman. Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among the movies directed by Wolfgang Reitherman, how many of them were released in December? Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; released in December refers to (release_date, instr(release_date, '-') + 1, 3) = 'Dec';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: The song ""Once Upon a Dream"" is associated with the movie directed by whom? directed by whom refers to director; movie refers to movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the voice actor for the villain of the movie ""Alice in Wonderland""? Alice in Wonderland refers to movie_title = 'Alice in Wonderland'; villain refers to character like '%'||T1.villian||'%';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Please list the release dates of all the movies in which Alan Tudyk is a voice actor. FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among the movies in which Alan Tudyk is a voice actor, how many of them were released after 2012? released after 2012 refers to (release_date, instr(release_date, '-') + 5) > 12;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among the movies directed by Wolfgang Reitherman, how many of them are Comedies? directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; comedies refers to genre = 'Comedy'; movies refer to movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among the movies directed by Wolfgang Reitherman, which one of them was the most popular? directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the most popular movie refers to MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Please list the movies directed by Wolfgang Reitherman that can be watched by the general audience. directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; movies refer to movie_title; general audience refers to MPAA_rating = 'G';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which character is the villain of the most popular movie? the most popular movie refers to movie_title where MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is the genre of the movie whose villain is Commander Rourke? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the villain of the movie ""Beauty and the Beast""? Beauty and the Beast refers to movie_title = 'Beauty and the Beast';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which movie is the character Robin Hood in? Robin Hood is the main character of the movie which refers to hero = 'Robin Hood'; movie refers to movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Give the name of the movie which the song ""I Thought I Lost You"" is associated with. name of the movie refers to movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the voice actor of the character ""Binkie Muddlefoot""? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the hero character of the movie whose total gross was $222,527,828? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which song is associated with the most popular Disney movie in 1970s? the most popular movie refers to movie_title where MAX(total_gross); in 1970s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1970 and 1979);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the hero character of the Disney movie directed by Will Finn? Will Finn refers to director = 'Will Finn';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the voice actor of the hero character from the movie The Little Mermaid? The Little Mermaid refers to movie_title = 'The Little Mermaid';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Give the name of the director of the movie in which Verna Felton was the voice actor for its character ""Aunt Sarah"". FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: For the movie in which Tress MacNeille was the voice actor for its character ""Hyacinth Hippo"", what was the release date of that movie? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the director of the adventure movie which was released on 2007/3/30? released on 2007/3/30 refers to release_date = 'Mar 30, 2007'; adventure movie refers to genre = 'Adventure' ;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Wolfgang Reitherman has directed several Disney movies, which one has the highest grossing after accounting for inflation? Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; the highest grossing after accounting for inflation refers to MAX(inflation_adjusted_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the hero character of the adventure movie which was released on 2016/3/4? released on 2016/3/4 refers to release_date = '4-Mar-16'; adventure movie refers to genre = 'Adventure' ;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: The character Donald Duck has appeared in two Disney movies, which one has more grossing? Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; which one has more grossing refers to movie_title where MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many movies did Wolfgang Reitherman direct? Wolfgang Reitherman refers director = 'Wolfgang Reitherman';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the most productive director? Most productive director refers to director where MAX(COUNT(name));"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many restricted horror movies were released between 1/1/1990 to 12/31/2015? Restricted refers to MPAA_rating = 'R'; horror refers to genre = 'Horror'; released between 1/1/1990 to 12/31/2015 refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2015);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What are the names of the characters voiced by Frank Welker? Frank Welker refers to voice-actor = 'Frank Welker';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How much is the total gross of the movie with a song titled ""Little Wonders""? song = 'Little Wonders'"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is the Motion Picture Association of America rating for the movie featuring a villain named Turbo? The Motion Picture Association of America rating refers to MPAA_rating; villian = 'Turbo';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many movies for mature audiences or parental guidance suggested did Bill Thompson work as a voice actor? movies for mature audiences or parental guidance refer to movie_title where MPAA_rating = 'PG';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many of Gary Trousdale's movies are adventure movies? Gary Trousdale refers director = 'Gary Trousdale'; the adventure movie refers to genre = 'Adventure';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which director did Bill Thompson work the most with? Bill Thompson refers to voice-actor = 'Bill Thompson'; worked the most refers to MAX(COUNT(name));"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is the most popular movie directed by Ron Clements? Ron Clements refers to director = 'Ron Clements'; the most popular movie refers to movie_title where MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List all the voice actors in the movie directed by Ben Sharpsteen which was released on February 9, 1940. Ben Sharpsteen refers to director = 'Ben Sharpsteen'; released on February 9, 1940 refers to release_date = 'Feb 9, 1940';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many PG adventure movies did Ron Clements direct? Ron Clements refers to director = 'Ron Clements'; PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG'; adventure movie refers to genre = 'Adventure';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many horror movies are there? Horror refers to genre = 'Horror';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the villain in the movie ""The Great Mouse Detective""? The Great Mouse Detective refers to movie_title = 'The Great Mouse Detective';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the voice actors from the movie ""Meet the Robinsons"". Meet the Robinsons refers to movie_title = 'Meet the Robinsons';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which director has made the most movies? the most movies refers to MAX(COUNT(name));"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: From 2000 to 2010, in which year did the studio entertainment segment make the most revenue? From 2000 to 2010 refers to Year between 2000 and 2010; the most revenue refers to MAX(""Studio Entertainment[NI 1]"");"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List all the songs associated with drama movies. drama refers to genre = 'Drama';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who are the voice actors for all the heroes? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide a list of directors from the 1990s. the 1990s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2000);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who voiced the villain in ""The Rescuers""? The Rescuers refers to movie_title = 'The Rescuers'; who voiced refers to voice-actor;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List all of Wolfgang Reitherman's movies and their voice actors. Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What are the characters in the PG movies? PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is the highest grossing movie without a song? the highest grossing movie without song refers to movie_title where MAX(total_gross) and song = 'null';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who directed the movie with the most voice actors? who directed refers director;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who are the voice actors in the movie that came out on 11/24/2010? Came out on 11/24/2010 refers to release_date = 'Nov 24, 2010';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the directors of movies that feature a song. movies that feature a song refer to movie_title where song is not NULL;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What are the total grosses for the movies with Jim Cummings as the voice actor? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which of the movies directed by Ron Clements has the highest total gross? Ron Clements refer to director = 'Ron Clements'; the highest total gross refers to MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is the average total gross for the movies featuring Sterling Holloway? DIVIDE(SUM(total_gross where voice-actor = 'Sterling Holloway'); COUNT(movie_title where voice-actor = 'Sterling Holloway'));"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What proportion of the total gross of all movies is from movies with songs? Movies with songs refer song = 'not null'; DIVIDE(SUM(total_gross where song = 'not null'), sum(total_gross)) as percentage;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the movies and genres released in 2016. released in 2016 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '2016'; movies refer to the movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the villain in Little Mermaid? Little Mermaid refers to movie_title = 'Little Mermaid';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the movie titles directed by Jack Kinney. Jack Kinney refers to director = 'Jack Kinney';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the movie titles and the estimated inflation rate of the highest total grossed movie. The highest grossed movie refers to MAX(total_gross); DIVIDE(inflation_adjusted_gross, total_gross) as percentage;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the PG-13 romantic comedy movie titles and their release dates. PG-13 refers to MPAA_rating = 'PG-13'; romantic comedy refers to genre = 'Romantic Comedy';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the movie titles and character names by Bill Thompson. Bill Thompson refers to voice-actor = 'Bill Thompson';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the movie titles and associated songs directed by Ron Clements. Ron Clements refers director = 'Ron Clements';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the titles, main characters, and associated songs of the movies directed by Wolfgang Reitherman in 1977. Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; 1997 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1977'; the titles refer to movie_title; main characters refer to hero;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which movies had the main character named Donald Duck and who directed them? Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; movies refer to movie_title; who directed refers director;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Describe the hero, director, and the release date of Mulan. Mulan refers to movie_title = 'Mulan';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the title, total gross, and MPAA rating of the movie which has a hero named Elsa. Elsa is the main character of the movie which refers to hero = 'Elsa'; title refers to movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the title, director, and release date of the movie voice-acted by Freddie Jones. Freddie Jones refers to voice-actor = 'Freddie Jones'; title refers to movie_title;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among Frank Welker's voice-acted movies, list the movie titles and the total gross when the estimated inflation rate was less than 2. Frank Welker refers to voice-actor = 'Frank Welker'; estimated inflation rate was less than 2 can be computed as follows DIVIDE(inflation_adjusted_gross, total_gross) as percentage < 2;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who directed the most popular movie? The most popular movie refers MAX(total_gross); who directed refers to director;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Describe the voice actors and villains in Cinderella. Cinderella refers to movie_title = ' Cinderella';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who is the voice actor of the hero in Lion King? Lion King refers to movie_title = 'Lion King';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the directors and MPAA ratings of the musical movies released in 1993. Musical movies refer to genre = 'Musical'; released in 1993 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1993';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among the movies released from 1991 to 2000, calculate the percentage of comedy movies. Provide any five movie titles and directors. DIVIDE(COUNT(movie_title where genre = 'Comedy'), COUNT(movie_title)) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) between '1991' and '2000';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among the movies released from 2001 to 2005, list down the titles and directors of the movies which had a total gross of more than 100% above the average. Released from 2001 to 2005 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '2001' and '2005'; DIVIDE(SUM(total_gross), COUNT(movie_title));"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the voice actor of the character Calliope in the movie Hercules. Hercules refers to movie = 'Hercules';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many voice actors for the movie Aladdin? Aladdin is the name of the movie which refers to movie = 'Aladdin';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the movie titles with the voice actor Jeff Bennet Jeff Bennett refers to voice-actor = 'Jeff Bennett';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the director's name of Wreck-It Ralph movie. Wreck-It Ralph is the name of the movies which refers to name = 'Wreck-It Ralph';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What movies did director Jack Kinney direct? FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many movies were released between 1937 and 1950? released between 1937 and 1950 refers to substr(release_date, length(release_date) - 1,length(release_date)) between '37' and '50';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the name of the song from the movie directed by Ben Sharpsteen. Ben Sharpsteen refers to director = 'Ben Sharpsteen';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Indicate the release date of the film The Lion King directed by Roger Allers. The Lion King refers to movie_title = 'The Lion King'; Roger Allers refers to director = 'Roger Allers';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the villain of the movie with Scott Weinger and Brad Kane as voice actors. FALSE;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which movies of director Wolfgang Reitherman do not have villain? which movies do not have villain refer to movie_title where villian is null;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the titles of movies directed by Jack Kinney that were released before 1947. Jack Kinney refers to director = 'Jack Kinney'; released before 1947 refers to substr(release_date, length(release_date) - 1, length(release_date)) < '47';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List the names of the directors whose films grossed over $100 million. films grossed over $100 million refer to movie_title where total_gross > 100000000;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which movie's song title has the highest total gross? The highest total gross refers to MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which director had the most popular film from 1937 to 1990? from 1937 to 1990 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '1937' and '1990'; the most popular film refers to movie_title where MAX(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: List all the main characters of the movie that are comedy genre. Comedy refers to genre = 'Comedy'; the main character of the movie refers to hero;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Provide the names of voice actors for the characters of films directed by Wolfgang Reitherman. Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What genre of movie has Taran as the main character? Taran is the main character of the movie which refers to hero = 'Taran';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: The main character Elsa is voiced by which actor and who is the director of the movie? Elsa is the main character of the movie which refers to hero = 'Elsa'; voiced by which actor refers to voice-actor;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Calculate the percentage of directors whose films grossed over $100 million. DIVIDE(COUNT(director where total_gross > 100000000), COUNT(director)) as percentage;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Calculate the percentage of voice actors whose main character in the movie is in the Drama genre. DIVIDE(COUNT(voice-actor where genre = 'Drama'), COUNT(voice-actor)) as percentage;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the first movie released by Disney. The first movie released refers to movie_title where substr(release_date, length(release_date) - 1, length(release_date)) asc limit 1;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many movies were released by Disney between 2010 and 2016? Movies refer to movie_title; released between 2010 and 2016 refers to substr(release_date, length(release_date) - 1, length(release_date)) between '10' and '16';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Who was the first ever Disney villain? the first ever villian is villian that was released before all others in time which refers to substr(release_date, length(release_date) - 1, length(release_date)) desc limit 1;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is Disney's highest grossing action movie? action movie refers to movie_title where genre = 'Action'; highest grossing movie refers to MAX(total_gross)"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Which actor voices Akela from The Jungle Book? Akela refers character = 'Akela'; which actor voices refers to voice-actor;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Determine Disney's total box office gross between 2010 and 2016. between 2010 and 2016 refers to Year between 2010 and 2016;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the main character of Disney's most popular adventure movie based on its inflation-adjusted gross. adventure movie refers to genre = 'Adventure'; the main character of the movie refers to hero; most popular movie based on its inflation-adjusted gross refers to where MAX(inflation_adjusted_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the director of Disney's lowest grossing movie. lowest grossing movie refers to movie_title where MIN(total_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Find out what proportion of total revenue Walt Disney Parks and Resorts received in 2010. DIVIDE(Walt Disney Parks and Resorts where year = 2010), SUM(year = 2010) as percentage;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Determine the average gross for Disney's PG-13-rated action movies. DIVIDE(SUM(total_gross where genre = 'Action' and MPAA_rating = 'PG-13'), COUNT(movie_title where genre = 'Action' and MPAA_rating = 'PG-13'));"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: How many voice-actors were involved in the Bambi movie? Bambi is the name of the movie which refers to movie = 'Bambi';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Find the estimated inflation rate that was used to adjust the 1995 box office revenue for Disney's films. DIVIDE(inflation_adjusted_gross, total_gross) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) = '1995';"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: What is the difference in the current gross of Cars and its sequel, Cars 2? Which movie is more popular? SUBTRACT(inflation_adjusted_gross where movie_title = 'Cars', inflation_adjusted_gross where movie_title = 'Cars 2'); more popular movie refers to movie_title where MAX(inflation_adjusted_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the most recent movie directed by Chris Buck. Which of his movies was more successful in terms of grossing? Use the current gross for comparison. Chris Buck refers to director = 'Chris Buck'; the most recent movie refers to movie_title where MAX(release_date); current gross refers to inflation_adjusted_gross; more successful movie refers to MAX(inflation_adjusted_gross);"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name actors who voiced more than five Disney characters. Actors who voiced refer to voice-actor;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Name the top 5 highest-grossing Disney movies adjusted for inflation. Identify the percentage they contributed to the total of Disney's current gross. The top 5 highest-grossing movies adjusted for inflation refer to MAX(inflation_adjusted_gross)LIMIT 5; DIVIDE(SUM(MAX(inflation_adjusted_gross LIMIT 5)), SUM(inflation_adjusted_gross)) as percentage;"
disney,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE characters (
movie_title text,
release_date text,
hero text,
villian text,
song text,
PRIMARY KEY (movie_title),
FOREIGN KEY (hero) REFERENCES voice-actors(character),
);
CREATE TABLE director (
name text,
director text,
PRIMARY KEY (name),
FOREIGN KEY (name) REFERENCES characters(movie_title),
);
CREATE TABLE movies_total_gross (
movie_title text,
release_date text,
genre text,
MPAA_rating text,
total_gross text,
inflation_adjusted_gross text,
FOREIGN KEY (movie_title) REFERENCES characters(movie_title),
);
CREATE TABLE revenue (
Year integer,
Studio Entertainment[NI 1] real,
Disney Consumer Products[NI 2] real,
Disney Interactive[NI 3][Rev 1] integer,
Walt Disney Parks and Resorts real,
Disney Media Networks text,
Total integer,
PRIMARY KEY (Year),
);
CREATE TABLE voice-actors (
character text,
voice-actor text,
movie text,
PRIMARY KEY (character),
FOREIGN KEY (movie) REFERENCES characters(movie_title),
);
---------------------
QUESTION: Among all Disney movies directed by Gary Trousdale, determine the percentage that earned over USD100m based on actual grossing. DIVIDE(COUNT(movie_title where director = 'Gary Trousdale' and total_gross > 100000000), COUNT(movie_title where director = 'Gary Trousdale')) as percentage;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many current legislators do not have an account on ballotpedia.org ? do not have an account on ballotpedia.org refers to ballotpedia_id IS NULL OR ballotpedia_id = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Please list the official full names of all the current legislators who do not have an account on C-SPAN's video website. legislators who do not have an account refers to cspan_id IS NULL OR cspan_id = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many current legislators were born after the year 1960? born after the year 1960 refers to birthday_bio > '1960-01-01'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among all the current female legislators, how many of them have not been registered in Federal Election Commission data? have not been registered refers to fec_id IS NULL; female refers to gender_bio = 'F'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the google entity ID of current legislator Sherrod Brown? Sherrod Brown is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which current legislator is older, Sherrod Brown or Maria Cantwell? older refers to MAX(birthday_bio); 'Sherrod Brown' and 'Maria Cantwell' are official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the username of the current official Facebook presence of current legislator Todd Young? Todd Young is an official_full_name; username of current official Facebook presences refers to facebook;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many current legislators do not have an account on instagram? do not have an account on instagram refers to instagram is null"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: To which current legislator does twitter ID234128524 belong? Please give his or her full official name. full official name refers to official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Please list the current official YouTube usernames of all the current female legislators. official YouTube usernames refers to youtube; female refers to gender_bio = 'F'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the username of the current official Facebook presence of the oldest current legislator? username of the official Facebook refers to facebook; the oldest refers to MAX(birthday_bio)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the current legislators who do not have accounts on OpenSecrets.org., how many of them do not have instagram accounts either? do not have accounts on OpenSecrets.org refers to opensecrets_ID is NULL OR opensecrets_id = ''; do not have instagram accounts refers to instagram is null"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Current legislator Roger F. Wicker has not been a representative for how many terms? Roger F. Wicker is an official_full_name; not a representative refers to district IS NULL OR district = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: For how many terms has current legislator Sherrod Brown served? Sherrod Brown is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Please list the official full names of all the current legislators who were once a senator during his or her terms. once a senator during term refers to state_rank IS NOT NULL"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: For which state did current legislator Sherrod Brown serve during his term that started on 1993/1/5? Sherrod Brown is an full official name; started on 1993/1/5 refers to start = '1993-01-05';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among all the female current legislators, how many of them have served for more than 4 terms? female refers to gender_bio = 'F'; served for more than 4 terms refers to COUNT(bioguide > 4)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the current legislators who have served for more than 6 terms, how many of them were born after 1960? served for more than 6 terms refers to COUNT(bioguide > 6); born after 1960 refers to birthday_bio > = '1960-01-01'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the average number of terms for a current female legislator? female refers to gender_bio = 'F'; calculation refers to DIVIDE(COUNT(bioguide WHERE gender_bio = 'F'), COUNT(bioguide_id))"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among all the current legislators whose religion is Roman Catholic, what is the percentage of the ones without an instagram account? religion is Roman Catholic refers to religion_bio = 'Roman Catholic'; calculation = MULTIPLY(DIVIDE(COUNT(instagram is null), COUNT(bioguide_id)), 1.0)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many males were members of the current legislators? male refers to gender_bio = 'M'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many current legislators chose Republican as their political party? chose Republican as their political party refers to party = 'Republican'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many legislators have an Instagram account? have an Instagram account refers to instagram is NOT null and instagram <>''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many females were members of the past legislators? female refers to gender_bio = 'F'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many male legislators are Roman Catholic? male refers to gender_bio = 'M'; Roman Catholic is a religion_bio"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What type of political party Sherrod Brown has in 2005? political party refers to party; Sherrod Brown is an official_full_name; official_full_name refers to first_name, last_name; 2005 refers to start = 2005"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full name of all the senior senators in year 2013. full name refers to official_full_name; senior refers to state_rank = 'senior'; senators refers to type = 'sen'; 2013 refers to start LIKE '2013%'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the current official Youtube username of Chris Van Hollen? Youtube username refers to youtube; Chris Van Hollen is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many official social media does Mark Warner have? official social media refers to facebook is not null, instagram is not null, twitter is not null, youtube is not null; Mark Warner is an official_full_name; official_full_name refers to first_name, last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the last name of all current legislators who live in California. California refers to state = 'CA'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full name of all current female senators. full name refers to official_full_name; female refers to gender_bio = 'F'; senators refers to type = 'sen'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the numeric ID of Chris Van Hollen on GovTrack.us? Chris Van Hollen is an official_full_name; numeric ID on GovTrack.us refers to govtrack"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the current official Twitter handle of Roger F. Wicker? Twitter handle refers to twitter; Roger F. Wicker is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full name of all past legislators that chose Pro-Administration as their political party in year 1791. full name refers to official_full_name; chose Pro-Administration as their political party refers to party = 'Pro-Administration'; 1791 refers to start < = 1791 AND END > = 1791"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the full name of all current female legislators that chose Republican as their political party. full name refers to official_full_name; official_full_name refers to first_name, last_name; female refers to gender_bio = 'F'; chose Republican as their political party refers to party = 'Republican'; current legislators refers to END > Date()"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the district number that Chris Van Hollen serving? Chris Van Hollen is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many times did Richard Durbin become a legislator in district 20? Richard Durbin is an official_full_name;  official_full_name refers to first_name, last_name; district 20 refers to district = 20"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Calculate the average number of current male legislators who chose Democrat from 2000 until 2021. male refers to gender_bio = 'M'; legislators who chose Democrat refers to party = 'Democrat'; from 2000 until 2021 refers to start > = 2000 AND END < = 2021; calculation = DIVIDE(COUNT(bioguide_id), 22)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Calculate the percentage of the total number of current female legislators and past female legislators. State which one has the highest value. female refers to gender_bio = 'F'; calculation = MULTIPLY(DIVIDE(COUNT(current.gender_bio = 'F' THEN current.bioguide_id)), (COUNT(historical.gender_bio = 'F' then historical.bioguide_id)), 1.0); the highest value refers to MAX(calculation)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the YouTube ID of the channel 'RepWassermanSchultz.' RepWassermanSchultz refers to youtube"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What are the Facebook, Twitter and YouTube usernames of Adam Kinzinger? Facebook, Twitter and YouTube usernames refers to facebook, twitter, youtube; Adam Kinzinger is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which party does Christopher Henderson Clark belong to? Christopher Henderson Clark is full name; full name refers to first_name, middle_name, last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the official full names of 10 legislators who have a YouTube account but no Instagram account. have a YouTube account but no Instagram account refers to facebook is not null and (instagram is null or instagram = '')"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the official full names of legislators representing Virginia. Virginia refers to state = 'VA'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which historical legislators are members of the National Greenbacker party? Write their first and last names. members of the National Greenbacker party refers to party = 'National Greenbacker'; first and last names refers to first_name, last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which legislator has the YouTube channel 'RoskamIL06?' Write the official full name. YouTube channel 'RoskamIL06' refers to youtube = 'RoskamIL06';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full names of 10 legislators who only have a Facebook account. full names refers to official_full_name; only have a Facebook account refers to youtube is NULL or youtube = '', instagram is NULL or instagram = '', twitter is NULL or twitter = '', facebook is not NULL and facebook = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Write the full names of junior ranked Republicans. full name refers to official_full_name; junior refers to state_rank = 'junior'; Republicans refers to party = 'Republican'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the contact URL of Claire McCaskill? contact URL refers to contact_form; Claire McCaskill is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the Wikipedia IDs of historical legislators who are Readjuster Democrats. Readjuster Democrats refers to party = 'Readjuster Democrat'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full names of Republican legislators who have a nickname. full names refers to official_full_name; Republican refers to party = 'Republican'; nickname refers to nickname_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which state did Veronica Grace Boland represent and which party is she affiliated? Veronica Grace Boland is a full name; full name refers to first_name, middle_name, last_name; party affiliated refers to party"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many historical legislators were born in 1973? born in 1973 refers to birthday_bio = 1973"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the ratio of males and females among historical legislators? male refers to gender_bio = 'M'; female refers to gender_bio = 'F'; calculation = DIVIDE(COUNT(gender_bio = 'M' THEN bioguide_id), COUNT(gender_bio = 'F' THEN bioguide_id))"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the legislators who will end in 2009, how many are from the Republican party? the legislators who will end in 2009 refers to END 2009; from the Republican party refers to party = 'Republican'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the official full names and genders of legislators who have Collins as their last name. genders refers to gender_bio; Collins is a last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many percent of senators were from class 1? senator refers to type = 'sen'; class 1 refers to class = 1; calculation = MULTIPLY(DIVIDE(COUNT(class = 1 then bioguide), COUNT(bioguide)), 1.0)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the current legislators' official full names who are from the Independent party. Independent party refers to party = 'Independent'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many years had Jr. John Conyers served in total? Jr. John Conyers is an official_full_name; years served refers to SUM(SUBTRACT(END, start))"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How old was Jr. F. James Sensenbrenner when he first started as a legislator? Jr. F. James Sensenbrenner is an official_full_name; How old refers to SUBTRACT(MIN(start), birthday_bio)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full names, religions, and parties of legislators who have served in Maine. full names refers to official_full_name; religion refers to religion_bio; Maine refers to state = ""ME"""
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among legislators who have an Instagram account, list down their full names and nicknames who have a Thomas ID of less than 1000. have an Instagram account refers to instagram is not null; full names refers to official_full_name; nicknames refers to nickname_name; Thomas ID of less than 1000 refers to thomas_id < 1000;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: When was the last serving date of Matt Salmon? Matt Salmon is an official_full_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the legislators who have served in the U.S. House, provide the party and the state of the legislators who were born in 1738. have served in the U.S. House refers to house_history_id IS NOT NULL; born in 1738 refers to birthday_bio = 1738"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the IDs and full names of legislators from the Liberal Republican party. full_name refers to first_name, last_name; from the Liberal Republican party refers to party = 'Liberal Republican'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the legislators who started a term on 2nd December 1793, how many of them were males? started a term on 2nd December 1793 refers to start = '1793-12-02'; male refers to gender_bio = 'M'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Compare the number of legislators who started the term in 1875 and 2005. started the term in 1875 refers to start LIKE '1875%'; started the term in 2005 refers to start LIKE '2005%'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full names, Twitter IDs, and YouTube IDs of legislators who have Richard as their first name. full names refers to official_full_name; Richard as their first name refers to first_name = 'Richard'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the start date, end date, and party of Pearl Peden Oldfield. start date refers to start; end date refers to end date; Pearl Peden Oldfield refers to official_full_name; official_full_name refers to first_name, middle_name, last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the birthday of Amy Klobuchar? birthday refers to birthday_bio; Amy Klobuchar refers to full name; full name refers to first_name, last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many legislators have not been registered in Federal Election Commission data? have not been registered in Federal Election Commission data refers to fec_id is null OR fec_id = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: State the number of female legislators in the list. female refers to gender_bio = 'F'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the full name of legislators who have accounts on OpenSecrets.org. full name refers to first_name, last_name; have accounts on OpenSecrets.org refers to opensecrets_id IS NOT NULL AND opensecrets_id <> ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the middle name of the legislator whose birthday was on 8/24/1956? birthday was on 8/24/1956 refers to birthday_bio = '1956-08-24'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many legislators hold the title ""Majority Leader""?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the title of legislator whose birthday on 2/20/1942? birthday on 2/20/1942 refers to birthday_bio = '1942-02-20'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the gender of the legislator whose address at 317 Russell Senate Office Building Washington DC 20510? gender refers to gender_bio"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List out the first name of legislators who are senior Senator. senior refers to state_rank = 'senior'; only senator has this value 'senior'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among male legislators, state number of the legislators who are not the senator. male refers to gender_bio = M; not the senator refers to class IS NULL OR class = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Calculate the percentage of legislators who are Senator and were born in 1964. are senator refers to class IS NOT NULL; born in 1964 refers to birthday_bio = 1964; calculation = MULTIPLY(DIVIDE(COUNT(class IS NOT NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Calculate the percentage of legislators who are not Senator and were born before 1975. not Senator refers to class is NULL; born before 1975 refers to birthday_bio < = 1975; calculation = MULTIPLY(DIVIDE(COUNT(class IS NULL THEN bioguide_id), COUNT(bioguide_id)), 1.0)"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the twitter name of the legislator whose birthday was on 5/27/1946? birthday on 5/27/1946 refers to birthday_bio = '1946-05-27'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: State the opensecrets_id of the legislator whose YouTube name is Bluetkemeyer. Bluetkemeyer refers to youtube"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Mention the username of Facebook of Ralph Abraham. username of Facebook refers to facebook; Ralph Abraham is an official_full_name; official_full_name refers to first_name, last_name"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the first name of the legislator whose address at 1005 Longworth HOB; Washington DC 20515-1408?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the Instagram name of the legislator whose birthday was on 8/24/1952? Instagram name refers to instagram; birthday on 8/24/1952 refers to birthday_bio = '1952-08-24'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: State number of legislators who are not the senator among female legislators. not the senator refers to class IS NULL OR class = ''; female refers to gender_bio = 'F';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the religion of the legislator whose YouTube name is MaxineWaters. MaxineWaters relates to youtube"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many minority leaders have not been registered in Federal Election Commission data? minority leaders is a title; have not been registered in Federal Election Commission data refers to fec_id IS NULL OR fec_id = ''"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many of the legislators are male? male refers to gender_bio = 'M';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the facebook ID of the facebook account named ""RepWilson""."
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the total number of legislators with ""John"" as their first name?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the district numbers with an Anti-Administration party."
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the full name of legislators whose born in 1960. full name refers to official_full_name; born in 1960 refers to birthday_bio like '1960%';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the google entity ID of Benjamin Hawkins?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Who is the Pro-Administration senator that runs from March 4, 1789 to December 31, 1791? Pro-Administration refers to party = 'Pro-Administration'; senator refers to type = 'sen'; runs from March 4, 1789 refers to start = '1789-03-04'; runs to refers to end = '1791-12-31';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What are the first and last name of the representatives of the house in district 9? representatives refers to type = 'rep';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the full name of the legislators with an independent party. full name refers to official_full_name;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List down the open secrets and thomas ID of the democrat senators of New Jersey. open secrets refers to opensecrets_id; democrat refers to party = democrat; senators refers to type = 'sen'; New Jersey refers to state = 'NJ';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the google entity ID of the senators in New York. google entity ID refers to google_entity_id_id; senators refers to type = 'sen'; New York refers to state = 'NY';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the religion of the legislator with RSS url of http://www.corker.senate.gov/public/index.cfm/rss/feed. religion refers to religion_bio;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the party of the legislator named Susan M. Collins? legislator's name refers to offical_full_name;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List down the district number of the representative of the house named Jonathan Grout. district number refers to district; representative of the house refers to type = 'rep';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the party and state of the legislator that has an open secrets ID of N00003689 and thomas ID of 186?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the full name and birth date of the legislator with a contact form of http://www.brown.senate.gov/contact/. full name refers to official_full_name; birth date refers to birthday_bio;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the state and type of term of the legislator with the google entity ID of kg:/m/02pyzk. type of term refers to type; google entity ID refers to google_entity_id_id; google_entity_id_id = 'kg:/m/02pyzk';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the type and end date of the term of the legislator named John Vining. end date of the term refers to end;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Find the difference between the number of female senators and representatives born between 1930 to 1970. difference = SUBTRACT(SUM(type = 'sen' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970'), SUM(type = 'rep' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970')); female refers to gender_bio = 'F'; senators refers to type = 'sen'; representatives refers to type = 'rep'; born between 1930 to 1970 strftime('%Y', birthday_bio) between '1930' and '1970';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the male legislators born between 1955 to 1965, what is the percentage of the legislators with an independent party? male refers to gender_bio = 'M'; born between 1955 to 1965 refers to strftime('%Y', birthday_bio) between '1955' and '1965'; percentage = MULTIPLY(DIVIDE(SUM(party = 'Independent' WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965'), COUNT(party WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965')), 100.0);"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the name of the legislator with the ID of W000059? name of the legislator = first_name, last_name; ID of W000059 refers to bioguide_id = 'W000059';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Does Thomas Carnes have an account on ballotpedia.org? if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is null then Thomas Carnes doesn't have an account on ballotpedia.org; if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is NOT null then Thomas Carnes have an account on ballotpedia.org;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many legislators were born in 1736? born in 1736 refers to birthday_bio like '1736%';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which legislators are woman? woman refers to gender_bio = 'F';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many districts are in Idaho? Idaho refers to state = 'ID';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many legislators are not senator? not senator refers to class is null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the ratio between male and female legislators? ratio = DIVIDE(SUM(gender_bio = 'M'),  SUM(gender_bio = 'F')); male refers to gender_bio = 'M'; female refers to gender_bio = 'F'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Calculate the percentage of famous_legislatorss. percentage = MULTIPLY(DIVIDE(SUM(wikipedia_id is not null), (bioguide_id)), 100.0); famous legislators refers to wikipedia_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which legislators do not have instagram account? do not have instagram account refers to instagram is null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List all the representatives in 1789 along with the districts and state. representatives refers to type = 'rep'; in 1789 refers to start like '1789%';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: State all the district that Benjamin Contee has served before."
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: State the address of Amy Klobuchar at the term of 4th of January 2001. at the term of 4th of January 2001 refers to start = '2001-04-01';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List all the junior senators in 1997. junior senators refers to state_rank = 'junior'; in 1997 refers to start like '1997%';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many female legislators become representatives for California in 2015? female legislators refers to gender_bio = 'F'; representatives refers to type = 'rep'; for California refers to state = 'CA'; in 2015 refers to the year of start date is '2015';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the Twitter ID of Emanuel Cleaver?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: State all the Facebook ID for current legislators under the democrat party."
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which historical female legislator that have their term ended on the 3rd of March 1791? female legislator refers to gender_bio = 'F'; term ended on the 3rd of March 1791 refers to end = '1791-03-03';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List all the Jewish current legislators that had served in Florida. Jewish refers to religion_bio = 'Jewish'; in Florida refers to state = 'FL';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the ratio between famous current legislators and famous historical legislators? ratio = DIVIDE(COUNT(current.bioguide_id WHERE current.wikipedia_id is not null), COUNT(historical.bioguide_id WHERE historical.wikipedia_id is not null)); famous current legislators refers to current.wikipedia_id is not null; famous historical legislators refers to historical.wikipedia_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Based on the number of current legislators, calculate the percentage of legislators that served in 21st-Century. percentage = MULTIPLY(DIVIDE(SUM(strftime('%Y', start) between '2000' and '2017'), COUNT(bioguide_id)), 100.0); 1st-Century refers to strftime('%Y', T2.start) between '2000' and '2017';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many Catholic legislators do not have an account on ballotpedia.org? Catholic refers to religion_bio = 'Catholic'; do not have an account on ballotpedia.org refers to ballotpedia_id is null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many class 1 senators belong to the Republican party? senators refers to type = 'sen';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What are the full names of the non-google female entity legislators that have not been registered in Federal Election Commission data? full names = first_name, last_name; non-google entity refers to google_entity_id_id is null; female refers to gender_bio = 'F'; have not been registered in Federal Election Commission data refers to fec_id is null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: In California, how many representatives ended their term in 1995? California refers to state = 'CA'; representatives refers to type = 'rep'; ended the term in 1995 refers to end like '1995%';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the full name of the oldest legislator? full name = first_name, last_name; oldest legislator refers to MIN(birthday_bio);"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List all of the ids of the representatives belonging to the Democrat party in district 13 that ended their term on 1/3/2019? ids refers to bioguide; representatives refers to type = 'rep'; ended the term on 1/3/2019 refers to end = '2019-01-03';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the official Twitter handle of Jason Lewis? official Twitter handle refers to twitter;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the Independent senators that started their term in 2011 and onwards, what are the official full names of the senators that caucused with the Democrat? Independent refers to party = 'Independent'; senators refers to type = 'sen'; started the term in 2011 and onwards refers to strftime('%Y', start) > = '2011'; caucused with the Democrat refers to caucus = 'Democrat';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many Jewish legislators do not have facebook? Jewish legislators refers to religion_bio = 'Jewish'; do not have facebook refers to facebook is null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which party has the highest number of legislators who are Baptist? party that has the highest number of legislators refers to MAX(COUNT(party)); Baptist refers to religion_bio = 'Baptist';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the official full names of all the legislators who have facebook, instagram, twitter and youtube accounts. have facebook, instagram, twitter and youtube accounts refers to 'facebook' is not null AND 'instagram' is not null AND 'twitter' is not null AND 'youtube' is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many districts did John Conyers, Jr. serve in total?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What are the Wikipedia page names of all the anti-administration senators? Wikipedia page names refers to wikipedia_id; anti-administration refers to party = 'Anti-Administration'; senators refers to type = 'sen';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List the official full names of all the legislators that served 13 district for 26 consecutive years. served only one district for 26 consecutive years refers to SUBTRACT(SUM(cast(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 26"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many Federalist representatives are there whose first names are Benjamin? Federalist refers to party = 'Federalist'; representatives refers to type = 'rep';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many female representatives served in the state of California for at least 10 years? female refers to gender_bio = 'F'; representatives refers to type = 'rep'; served for at least 10 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) > 10;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the party of the oldest legislator? oldest legislator refers to MIN(birthday_bio);"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Who is the Lutheran representative that served in the state of Ohio for 14 years before becoming a senator? Lutheran refers to religion_bio = 'Lutheran'; representative refers to type = 'rep'; served for 14 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 14;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among all the current legislators born after the year 1960, how many of them are not google entities? born after the year 1960 refers to strftime('%Y', birthday_bio) > '1960'; not google entities refers to google_entity_id_id is null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Please list the official full names of all the current legislators who have served in the U.S. House. have served in the U.S. House refers to house_history_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many current legislators have both accounts on both VoteView.com and maplight.org? have both accounts on both VoteView.com and maplight.org refers to icpsr_id is not null AND maplight_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among all the current female legislators, how many of them have attended in Senate roll call votes? female refers to gender_bio = 'F'; have attended in Senate roll call votes refers to lis_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the religion of current legislator Sherrod Brown? religion refers to religion_bio;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the religion with the most occurrrence of the current legislators? religion with the most occurrrence of the current legislators refers to MAX(count(religion_bio));"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the current official Instagram handle of current legislator Bob Corker? official Instagram handle refers to instagram;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the current legislators who have accounts on both http://thomas.gov, how many of them have accounts on instagram? have accounts on both http://thomas.gov refers to thomas_id is NOT null; have accounts on instagram refers to instagram is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Please list the username of the current official Facebook presence of all the current legislators that are famous or impact. username of the current official Facebook presence of the legislators refers to facebook; legislators that are famous or impact refers to wikipedia_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: For how many terms have the oldest current legislator served? oldest legislator refers to MIN(birthday_bio);"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What was current legislator Sherrod Brown's Washington, D.C. office phone number during his term starting on 2013/1/3? Washington, DC office phone number refers to phone; terms starting on 2013/1/3 refers to start = '2013-01-03';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Current legislator Sherrod Brown has been in the Democrat party during how many terms that he has served?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Please list the full official names of all the current legislators who served the term that started on 2013/1/3. term that started on 2013/1/3 refers to start = '2013-01-03';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the current legislators who served the term starting on 2013/1/3, how many of them are female? term starting on 2013/1/3 refers to start = '2013-01-03; female refers to gender_bio = 'F';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the full official name of the current legislator that has served for the most number of terms? served for the most number of terms refers to MAX(COUNT(bioguide));"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: For how many terms has current legislator Sherrod Brown served as a representative for district no.13? district no. 13 refers to district = 13;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the official full name of the current legislator whose current official Facebook presence is ""senjoniernst""? current official Facebook presence is ""senjoniernst"" refers to facebook = 'senjoniernst';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Which current legislator has served for more terms, Sherrod Brown or Maria Cantwell? if sum(official_full_name = 'Maria Cantwell') > sum(official_full_name = 'Sherrod Brown') then Maria Cantwell has served for more term than Sherrod Brown; if sum(official_full_name = 'Sherrod Brown') > sum(official_full_name = 'Maria Cantwell'), then Sherrod Brown has served for more terms than Maria Cantwell;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among all the current legislators who have served for more than 4 terms, what is the percentage of them being female? have served for more than 4 years refers to count(bioguide) > 4; percentage = MULTIPLY(DIVIDE(SUM(gender_bio = 'F'), count(bioguide)), 100.0); female refers to gender_bio = 'F'"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the average number of terms served for a current legislator that's famous or impact? average = DIVIDE(COUNT(bioguide), COUNT(bioguide_id)); legislator that's famous or impact refers to wikipedia_id is not null;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many of the legislators are female? female refers to gender_bio = 'F';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the total number of senators New Jersey have? senators refers to type = 'rep'; New Jersey refers to state = 'NJ';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the address of the legislator with the contact form of http://www.carper.senate.gov/contact/."
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Provide the Instagram username of the legislator named Benjamin Hawkins. Instagram username refers to instagram;"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the alphanumeric ID of the Catholic legislators in Nebraska. alphanumeric ID refers to bioguide; Catholic legislators refers to religion_bio = 'Catholic'; Nebraska refers to state = 'NE';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: List down the MapLight ID of the representatives in Maine. representatives refers to type = 'rep'; Maine refers to state = 'ME';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Give the type and start date of the term of the legislator born on November 26, 1727. start date of the term refers to start; born on November 26, 1727 refers to birthday_bio = '1727-11-26';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: What is the contact form of the legislator named Rick Crawford?"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: How many female representatives are there in Michigan? female refers to gender_bio = 'F'; representatives refers to type = 'rep'; Michigan refers to state = 'MI';"
legislator,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE current (
ballotpedia_id text,
bioguide_id text,
birthday_bio date,
cspan_id real,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id real,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id integer,
votesmart_id real,
wikidata_id text,
wikipedia_id text,
);
CREATE TABLE current-terms (
address text,
bioguide text,
caucus text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
CREATE TABLE historical (
ballotpedia_id text,
bioguide_id text,
bioguide_previous_id text,
birthday_bio text,
cspan_id text,
fec_id text,
first_name text,
gender_bio text,
google_entity_id_id text,
govtrack_id integer,
house_history_alternate_id text,
house_history_id real,
icpsr_id real,
last_name text,
lis_id text,
maplight_id text,
middle_name text,
nickname_name text,
official_full_name text,
opensecrets_id text,
religion_bio text,
suffix_name text,
thomas_id text,
votesmart_id text,
wikidata_id text,
wikipedia_id text,
PRIMARY KEY (bioguide_id),
);
CREATE TABLE historical-terms (
address text,
bioguide text,
chamber text,
class real,
contact_form text,
district real,
end text,
fax text,
last text,
middle text,
name text,
office text,
party text,
party_affiliations text,
phone text,
relation text,
rss_url text,
start text,
state text,
state_rank text,
title text,
type text,
url text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES historical(bioguide_id),
);
CREATE TABLE social-media (
bioguide text,
facebook text,
facebook_id real,
govtrack real,
instagram text,
instagram_id real,
thomas integer,
twitter text,
twitter_id real,
youtube text,
youtube_id text,
PRIMARY KEY (bioguide),
FOREIGN KEY (bioguide) REFERENCES current(bioguide_id),
);
---------------------
QUESTION: Among the female legislators, what is the percentage of the senators in Maine? female refers to gender_bio = 'F'; percentage = MULTIPLY(DIVIDE(SUM(type = 'sen'), COUNT(type)), 100.0); senators refers to type = 'sen'; Maine refers to state = 'ME';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Please list the names of all the Olympic games that John Aalberg has taken part in. name of the Olympic games refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What was the name of the Olympic game that John Aalberg took part in when he was 31? when he was 31 refers to age = 31; name of the Olympic games refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: When John Aalberg took part in the 1994 Winter Olympic Game, how old was he? how old was he refers to age; 1994 Winter refers to games_name = '1994 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Olympic competitors are from Finland? competitors refer to person_id; from Finland refers to region_name = 'Finland';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Please list the names of all the Olympic competitors from Finland. names of competitors refer to full_name; from Finland refers to region_name = 'Finland';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: The Olympic competitor John Aalberg is from which region? from which region refers to region_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the NOC code of the region where the tallest male Olympic competitor is from? NOC code of the region refers to noc; male refers to gender = 'M'; the tallest refers to MAX(height);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Among all the Olympic competitors from Finland, how many of them are female? competitors from Finland refer to id where region_name = 'Finland'; female refers to gender = 'F';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which city was the 1992 Summer Olympic Games held? In which city refers to city_name; 1992 Summer Olympic Games refer to games_name = '1992 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Please list the names of the Olympic games that were held in London. held in London refers to city_name = 'London';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which year did London hold its earliest Olympic game? In which year refers to games_year; London refers to city_name = 'London'; earliest Olympic game refers to MIN(games_year);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: For how many times has London held the Olympic games? London refers to city_name = 'London'; how many times refer to COUNT(games_id);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average height of the male Olympic competitors from Finland? DIVIDE(SUM(height), COUNT(id)) where region_name = 'Finland' and gender = 'M';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Among the competitors of the 1994 Winter Olympic Game, what is the percentage of those from Finland? DIVIDE(COUNT(id where region_name = 'Finland'), COUNT(id)) as percentage where games_name = '1994 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which sport does the event ""Shooting Women's Trap"" belong to? sport refers to sport_name; event ""Shooting Women's Trap"" refers to event_name = 'Shooting Women''s Trap';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which city was the host of 1936 Winter Olympic Games? Which city refers to city_name; 1936 Winter Olympic refers to games_name = '1936 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Olympic Games has London hosted? London refers to city_name = 'London';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Tell the number of swimming related events. swimming refers to sport_name = 'Swimming';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: For Peter Kohnke, show the name of his/her region. name of his/her region refers to region_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game. id of the game refers to games_id;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Show the name of the sport with the most events. name of the sport with the most events refers to sport_name where MAX(COUNT(id));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Give the name of the tallest athlete from Sweden. the tallest athlete refers to id where MAX(height); from Sweden refers to region_name = 'Sweden'; name refers to full_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes in the database are from Guatemala? from Guatemala refers to region_name = 'Guatemala';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Who has participated in the most Olympic Games in the database? Who refers to full_name; participated in the most Olympic Games refers to MAX(COUNT(games_id));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Show the name of the competitor id 90991. name of the competitor refers to full_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many competitor ids does Martina Kohlov have?"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Calculate the bmi of the competitor id 147420. DIVIDE(weight), MULTIPLY(height, height) where id = 147420;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of male athletes from Estonia? DIVIDE(COUNT(id where gender = 'M'), COUNT(id)) as percentage where region_name = 'Estonia';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Who is the youngest person who participated in the Olympics? Who is the youngest person refers to full_name where MIN(age);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many 24 years old competitors competed in Men's Basketball? 24 years old competitors refer to id where age = 24; Men's Basketball refers to event_name = 'Basketball Men''s Basketball';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What are the names of the events under Art Competitions? Art Competitions refer to sport_name = 'Art Competitions'; names of events refers to event_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many gold medals does Henk Jan Zwolle have? gold medals refer to medal_name = 'Gold';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the event where competitors received the most gold medals? received the most gold medals refers to MAX(COUNT(medal_name = 'Gold'));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes are from Australia? from Australia refer region_name = 'Australia';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which cities hosted at least 3 Olympic games? cities refer to city_name; hosted at least 3 Olympic games refers to COUNT(games_id) > = 3;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Summer games were held in Stockholm? Summer games refer to id where season = 'Summer'; in Stockholm refers to city_name = 'Stockholm';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which region do most of the athletes are from? region refers to region_name; most of the athletes refer to MAX(COUNT(person_id));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Where was the first Olympic game held? Where it was held refers to city_name; the first Olympic game refers to id where MIN(games_year);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the game in which the oldest Olympian has ever participated? the oldest Olympian refers to id where MAX(age); name of the game refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes competed in the 1992 Summer Olympics? 1992 Summer Olympics refer to games_name = '1928 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Olympic events did Michael Phelps II join in total? Find the percentage of the events where he won a gold medal. DIVIDE(COUNT(event_id where medal_name = 'Gold'), COUNT(event_id)) as percentage where full_name = 'Michael Fred Phelps, II';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games. the most number of competitors refer to MAX(COUNT(person_id)); SUBTRACT(COUNT(person_id where games_name = '1988 Summer'), COUNT(person_id where games_name = '1988 Winter'));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What age of the competitors is the most numerous? age is the most numerous refers to age where MAX(COUNT(person_id));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which cities beginning with the letter M have the Olympic Games been held? cities beginning with the letter M refer to city_name LIKE 'M%';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which cities were the 1976 winter and summer games held? cities refer to city_name; 1976 winter and summer games refer to games_name IN ('1976 Winter', '1976 Summer');"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What was the medal that Coleen Dufresne got? What medal refers to medal_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the competitor who has won the most medals? name of the competitor refers to full_name; won the most medals refer to MAX(COUNT(medal_id));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Where is competitor Estelle Nze Minko from? Where competitor is from refers to region_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of all the sports Chin Eei Hui has competed in? name of the sport refers to sport_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the oldest person who participated in the Olympic Games? the oldest person refers to person_id where MAX(age); name refers to full_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which Olympic Games have the largest number of women participation? the largest number of women participation refers to MAX(COUNT(gender = 'F')); In which Olympic Games refer to games_year;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many males from Belgium have participated in an Olympic Games? males refer to gender = 'M'; Belgium refers to region_name = 'Belgium';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many persons participated in the Sapporo Olympics? the Sapporo Olympics refer to games_id where city_name = 'Sapporo';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which Olympic Games has Morten Aleksander Djupvik participated? In which Olympic Games refer to games_year;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many persons in total have participated in 12 meter Mixed Sailing competitions? 12 meter Mixed Sailing competitions refer to event_name = 'Sailing Mixed 12 metres';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many different events are there of Modern Pentathlon? Modern Pentathlon refers to sport_name = 'Modern Pentathlon';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Calculate the percentage of women who have participated in Equestrianism Mixed Three-Day Event, Individual. DIVIDE(COUNT(person_id where gender = 'F), COUNT(person_id)) as percentage where event_name = 'Equestrianism Mixed Three-Day Event, Individual';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Calculate the average age of the persons who participated in the 1992 Summer Games. DIVIDE(SUM(age), COUNT(person_id)) where games_name = '1992 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List out years that only have summer games. years refer to games_year; only have summer games refer to games_year where COUNT(games_name) = 1 and season = 'Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Olympics games were held during the 90s? games refer to id; during the 90s refers to games_year BETWEEN 1990 AND 1999;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes participated in the 2014 Winter Olympics? athletes refer to person_id; 2014 Winter Olympics refer to games_name = '2014 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes from region 151 have won a medal? athletes refer to person_id; region 151 refers to region_id = 151; won a medal refers to medal_id <> 4;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athlete from China participate in the 2016 Summer Olympics? athletes from China refer to person_id where region_name = 'China'; the 2016 Summer Olympics refer to games_name = '2016 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many gold medals were given to the winners in the Ice Hockey Men's Ice Hockey event? gold medals given to the winners refer to competitor_id where medal_name = 'Gold'; Ice Hockey Men's Ice Hockey refers to event_name = 'Ice Hockey Men''s Ice Hockey';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which region has the highest medal number? region refers to region_name; the highest medal number refers to MAX(COUNT(medal_id <> 4));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List out all the gold medalist winners in cycling sport. gold medalist winners refer to full_name where medal_name = 'Gold'; cycling sport refers to sport_name = 'Cycling';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List out all the medals won by Lee Chong Wei. medals refer to medal_id where medal_id <> 4;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of female athletes below 20s who participated in the 2002 Winter Olympic? DIVIDE(COUNT(person_id where gender = 'F' and age < 20), COUNT(person_id)) as percentage where games_name = '2002 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the ratio male to female athletes in the 2012 Summer Olympic? DIVIDE(COUNT(gender = 'M'), COUNT(gender = 'F')) where games_name = '2012 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which summer Olympic have the highest and lowest number of participants? the highest number of participants refers to MAX(COUNT(person_id)); the lowest number of participants refers to MIN(COUNT(person_id)); Which summer Olympic refers to games_name where season = 'Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes from Malaysia have won a medal? Malaysia refers to region_name = 'Malaysia'; athletes won a medal refer to competitor_id where medal_id <> 4;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes playing in Canoeing fall into overweight BMI category in the 2008 Summer games? fall into overweight BMI category refers to DIVIDE(weight), MULTIPLY(height, height) < 30; Canoeing refers to a sport name; the 2008 Summer games refer to games_name = '2008 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average height of male athletes playing basketball sport? AVG(height) where sport_name = 'Basketball' and event_name = 'Basketball Men''s';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many female athletes are from the Philippines? female athletes refer to id where gender = 'F'; from the Philippines region_name = 'Philippines';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which region is Yao Ming from? region refers to region_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: At what age did Michael Fred Phelps, II join the Olympics? At what age join the Olympics refers to MIN(age);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes are there in the region where Clara Hughes is from?"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in? Men's 200 Metres Freestyle events refer to event_name = 'Swimming Men''s 200 metres Freestyle'; events compete in refers to event_id;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many times was Larysa Semenivna Latynina (Diriy-) declared as champion in Gymnastics Women's Individual All-Around? Gymnastics Women's Individual All-Around refers to event_name = 'Gymnastics Women''s Individual All-Around'; declared as champion refers to medal_name = 'Gold' or medal_id = 1;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What are the names of the cities where Carl Lewis Borack competed? name of the cities refers to city_name"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Olympic games were held in London? London refers to city_name = 'London';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which city was the 1992 Summer Olympic held? city refers to city_name; 1992 Summer Olympic refers to games_name = '1992 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes over the age of 59 competed in the 2016 Summer Olympics? over the age of 59 refers to age > 59; the 2016 Summer Olympics refer to games_name = '2016 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Among the Olympic games held in Los Angeles, what is the name of the Olympic game that has the most number of competitors? Los Angeles refers to city_name = 'Lost Angeles'; the Olympic game refers to games_name; the most number of competitors refers to MAX(COUNT(games_name));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many 10-year old athletes participated in the Gymnastics Men's Parallel Bars, Teams event? 10-year old athletes refer to competitor_id where age = 10; Gymnastics Men's Parallel Bars, Teams refer to event_name = 'Gymnastics Men''s Parallel Bars, Teams';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average age of the athletes from the United States of America who competed in the 2016 Summer Olympics? AVG(age) where games_name = '2016 Summer' and region_name = 'USA';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which region does the NOC code ""COL"" stand for? region refers to region_name; NOC code ""COL"" refers to noc = 'COL';"
