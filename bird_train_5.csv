db_id,train_example
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: State the name of sport id 19. name of sport refers to sport_name"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Give the id of the event ""Shooting Mixed Skeet"". ""Shooting Mixed Skeet"" refers to event_name = 'Shooting Mixed Skeet';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Provide hockey's sport id. hockey's sport refers to sport_name = 'hockey';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Tell the weight of Dagfinn Sverre Aarskog."
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the id of Rio de Janeiro? Rio de Janeiro refers to city_name = 'Rio de Janeiro';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many people have won the gold medal of the event ""Rowing Women's Coxed Eights""? won the gold medal refers to medal_name = 'Gold'; event ""Rowing Women's Coxed Eights"" refers to event_name = 'Rowing Women''s Coxed Eights';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many kinds of events belong to the sport of cycling? kinds of events refer to event_name; sport of cycling refers to sport_name = 'Cycling';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is Vijay Singh Chauhan's region name?"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: When did Roma host the Olympic Games? Roma refers to city_name = 'Roma'; When host refers to games_year;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many 20 years old athletes were there in the 1984 Summer Olympic Games? 20 years old athletes refer to person_id where age = 20; 1984 Summer Olympic Games refer to games_name = '1984 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many games has Prithipal Singh participated in? games refer to games_id;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: State the number of athletes in the 1984 Summer Olympic Games who were more than 50 years old. the 1984 Summer Olympic Games refer to games_name = '1984 Summer'; athletes more than 50 years old refer to person_id where age > 50;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many kinds of events does athletics have? kinds of events refer to event_name; athletics refer to sport_name = 'Athletics';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Who is the heaviest athlete from Russia? the heaviest athlete refers to full_name where MAX(weight); from Russia refers to region_name = 'Russia';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Give the height of the tallest athlete from Portugal. the tallest athlete refers to id where MAX(height); from Portugal refers to region_name = 'Portugal';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Tell the host city of the 1968 Winter Olympic Games. host city refers to city_name; the 1968 Winter Olympic Games refer to games_name = '1968 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which region has the most athletes? region refers to region_name; the most athletes refer to MAX(COUNT(region_name));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of athletes from Vanuatu who are taller than 175? DIVIDE(COUNT(id where height > 175), COUNT(id)) as percentage where region_name = 'Vanuatu';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Calculate the average weight of male athletes from Tonga. AVG(weight) where region_name = 'Tonga' and gender = 'M';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Where was the 1920 Summer held? where it was held refers to city_name; the 1920 Summer refers to games_name = '1920 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: From 1900 to 1992, how many games did London host? From 1900 to 1992 refers to games_year BETWEEN 1900 AND 1992; London refers to city_name = 'London'; games refer to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Summer games are there that were held in Paris? Summer games refer to games_id where season = 'Summer'; Paris refers to city_name = 'Paris';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Please list all game names that were held in Los Angeles. Los Angeles refers to city_name = 'Los Angeles';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which city hosted the most games? Which city refers to city_name; the most games refer to MAX(COUNT(city_name));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the game name that was held in Beijing in 2008? Beijing refers to city_name = 'Beijing'; in 2008 refers to games_year = '2008';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of champions at the age of over 30? DIVIDE(COUNT(competitor_id where age > 30), COUNT(competitor_id))as percentage where medal_id = 1;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: At which age did A Lamusi participate in 2012 Summer? 2012 Summer refers to games_name = '2012 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many competitors were there who participated in 2000 Summer with age 31? in 2000 Summer refers to games_name = '2000 Summer'; age = 31"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many male competitors were there who participated in 1948 Summer? male competitors refers to id where gender = 'M'; in 1948 Summer refers to games_name = '1948 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Please list all competitors' names who participated in 1936 Summer. competitors' names refer to full_name; in 1936 Summer refers to games_name = '1936 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Who is the youngest competitor that participated in 2014 Winter? the youngest competitor refers to full_name where MIN(age); in 2014 Winter refers to games_name = '2014 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average age of competitors who participated in 1988 Winter? AVG(age) where games_name = '1988 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of female competitors whose heights are over 170 that participated in the game in 1988? DIVIDE(COUNT(person_id where gender = 'F' and height > 170), COUNT(person_id)) as percentage where games_year = 1988;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the sport name of ""Cross Country Skiing Men's 10/15 kilometres Pursuit"" event? ""Cross Country Skiing Men's 10/15 kilometres Pursuit"" refers to event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of people whose age greater than 24 and participate in winter season? DIVIDE(COUNT(season = 'Winter' and age > 24), COUNT(person_id)) as percentage;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the region id of Christine Jacoba Aaftink?"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Mention the height of people who belong to region id 7."
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: State the name of the city that held game id 3. name of city refers to city_name"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What are the id of the games held in London? London refers to city_name = 'London';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many people who are below 30 and participated in the summer season? people who are below 30 refer to person_id where age < 30; the summer season refers to season = 'Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List out the name of the game that the people participated in games id 13. name of games refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average age of the people who participated in the winter season? AVG(age) where season = 'Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the percentage of the people who are under 35 and participated in the summer season? DIVIDE(COUNT(age < 35) / COUNT(person_id)) as percentage where season = 'Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: State the event name of Basketball. basketball refers to sport_name = 'Basketball';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of medal that competitor id 9 obtained? name of medal refers to medal_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List out the id of event that achieve the gold medal. the gold medal refers to medal_name = 'Gold';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Who is the heaviest athlete? Who refers to full_name; the heaviest refers to MAX(weight);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which city were the Olympic games held in 1992? city refers to city_name; in 1992 refers to games_year = 1992;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which region is the majority of the athletes from? region refers to region_name; the majority of the athletes from refer to MAX(COUNT(region_name));"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the oldest competitor? name refers to full_name; the oldest refers to MAX(age);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Which sport did John Aalberg participate in? sport refers to sport_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many Belgian men have competed in an Olympic Games? Belgian men refer to gender = 'M' where region_name = 'Belgium';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many athletes took part in the Olympic games held in Barcelona? Barcelona refers to city_name = 'Barcelona';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many different football events are there? events refer to event_name; football refers to sport_name = 'Football';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What were the cities in which John Aalberg competed? cities refer to city_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In Barcelona, how many Olympic games were held? Barcelona refers to city_name = 'Barcelona';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many competitors over the age of 30 participated in the 1992 Winter Olympics? competitors over the age of 30 refer to person_id where age > 30; the 1992 Winter Olympics refers to games_name = '1992 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the Olympic game with the most competitors held in Barcelona? Barcelona refers to city_name = 'Barcelona'; the most competitors refer to MAX(COUNT(games_name)); name of game refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List the name of competitors from Argentina. name refers to full_name; Argentina refers to region_name = 'Argentina';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average age of Argentina's athletes who participated in the Summer Olympics in 2012? AVG(age) where games_name = '2012 Summer' and region_name = 'Argentina';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Calculate the percentage of bronze medals won by men's basketball players. DIVIDE(COUNT(competitor_id where medal_name = 'Bronze'), COUNT(competitor_id)) as percentage where event_name = 'Basketball Men''s Basketball';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List the name of the games that Georgios Abaris participated. name of games refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Provide the name of competitors from Greece. name refers to full_name; Greece refers to region_name = 'Greece';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Calculate the average age of the competitors who participated in the 1924 Winter. AVG(age) where games_name = '1924 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the NOC code of the region of the competitors weighted 77 kg? NOC code refers to noc; competitors weighted 77 kg refer to person_id where weight = 77;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List the names of the games held in Paris. Paris refers to city_name = 'Paris'; names of games refers to games_name;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Provide the competitors' names who joined the 2000 Summer. the competitors' names refer to full_name; the 2000 Summer refers to games_name = '2000 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which city was the game held where the oldest competitor participated? in which city refers to city_name; the oldest refers to MAX(age);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the name of the youngest competitor? name refers to full_name; the youngest refers to MIN(age);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: List down the games ID of games held in Tokyo. Tokyo refers to city_name = 'Tokyo';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Give the NOC code and region name of the heaviest competitor. NOC code refers to noc; the heaviest refers to MAX(weight);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In what year and season did Sohail Abbas compete? year refers to games_year;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the average weight of the competitors who won a silver medal? AVG(weight) where medal_name = 'Silver';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In which city the 2004 Summer was held? in which city refers to city_name; the 2004 Summer refers to games_name = '2004 Summer';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: What is the season of the game where a competitor who weighted 73 kg and 180 cm tall, participated? competitor who weighted 73 kg and 180 cm tall refers to person_id where height = 180 and weight = 73;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Provide the names of competitors who received a gold medal. names of competitors refer to full_name; gold medal refers to medal_name = 'Gold';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Compute the average height of competitors whose age ranges from 22 to 28. AVG(height) where age BETWEEN 22 AND 28;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: How many female competitors were from Iran? female competitors refer to person_id where gender = 'F'; from Iran refers to region_name = 'Iran';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Provide the age of the tallest competitor. the tallest refers to MAX(height);"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg. SUBTRACT(COUNT(weight > 70), COUNT(weight < 70)) where age < 24;"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: In the 2014 Winter game, what is the percentage of competitors who age 28 years old? DIVIDE(COUNT(age = 28), COUNT(id)) as percentage where games_name = '2014 Winter';"
olympics,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
id integer,
city_name text,
PRIMARY KEY (id),
);
CREATE TABLE games (
id integer,
games_year integer,
games_name text,
season text,
PRIMARY KEY (id),
);
CREATE TABLE games_city (
games_id integer,
city_id integer,
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (city_id) REFERENCES city(id),
);
CREATE TABLE medal (
id integer,
medal_name text,
PRIMARY KEY (id),
);
CREATE TABLE noc_region (
id integer,
noc text,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE person (
id integer,
full_name text,
gender text,
height integer,
weight integer,
PRIMARY KEY (id),
);
CREATE TABLE games_competitor (
id integer,
games_id integer,
person_id integer,
age integer,
PRIMARY KEY (id),
FOREIGN KEY (games_id) REFERENCES games(id),
FOREIGN KEY (person_id) REFERENCES person(id),
);
CREATE TABLE person_region (
person_id integer,
region_id integer,
FOREIGN KEY (person_id) REFERENCES person(id),
FOREIGN KEY (region_id) REFERENCES noc_region(id),
);
CREATE TABLE sport (
id integer,
sport_name text,
PRIMARY KEY (id),
);
CREATE TABLE event (
id integer,
sport_id integer,
event_name text,
PRIMARY KEY (id),
FOREIGN KEY (sport_id) REFERENCES sport(id),
);
CREATE TABLE competitor_event (
event_id integer,
competitor_id integer,
medal_id integer,
FOREIGN KEY (event_id) REFERENCES event(id),
FOREIGN KEY (competitor_id) REFERENCES games_competitor(id),
FOREIGN KEY (medal_id) REFERENCES medal(id),
);
---------------------
QUESTION: Among the males, list the region name of people with height greater than 87% of the average height of all people listed. males refer to gender = 'M'; height greater than 87% of the average height refers to height > MULTIPLY(AVG(height), 0.87);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the total number of households in Arecibo county? ""ARECIBO"" is the county; total number of households refer to sum(households)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which residential area in Arecibo county has the highest average house value? Please give its zip_code. ""ARECIBO"" is the county; highest average house value refers to Max(avg_house_value)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Please list the numbers of males in all the residential areas in Arecibo county. ""ARECIBO"" is the county; number of males refers to Sum(male_population)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among all the residential areas in Delaware, how many of them implement daylight saving? ""Delaware"" is a county; implement daylight savings refers to daylight_saving = 'Yes'"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among all the residential areas in Arecibo county, what is the zip_code of the one with the highest white population? ""ARECIBO"" is the county; highest white population refers to Max(white_population)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: In which county is the residential area with the highest average income per household located? highest average income per household refers to Max(avg_income_per_household)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Please list the names of all the counties with at least one residential area that implements daylight saving. implements daylight savings refers to daylight_savings = 'Yes'"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Please list the zip_codes of all the residential areas in Huntingdon county with over 30 employees. over 30 employees refers to employee > 30; 'HUNTINGDON' is the county"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Please list the Asian populations of all the residential areas with the bad alias ""URB San Joaquin"". ""URB San Joaquin"" is the bad_alias"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the residential areas with the bad alias ""Internal Revenue Service"", how many of them are in the Eastern time zone? ""Internal Revenue Service"" is the bad_alias; in Eastern time zone refers to time_zone = 'Eastern'"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the bad alias of the residential area with the highest average house value? highest average house value refers to Max(avg_house_value)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Please list the bad alias of all the residential areas with a median female age of over 32. median female age of over 32 refers to median_female_age > 32"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the highest gender ratio of the residential areas in Arecibo county? ""ARECIBO"" is the county; highest gender ration refers to Max(Divide (male_population, female_population))"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the average median female age of all the residential areas in the Arecibo county? ""ARECIBO"" is the county; average median female age = Divide (Sum(median_female_age), Count(country))"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the area code of the city with the female median age over 32 years old?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the alias of the city called Hartford? ""Hartford"" is the city"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many counties are there in Alabama? ""Alabama"" is the name"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many post offices are there in New York? ""New York"" refers to state = 'NY' and name = 'New York'; 'Post Office' is the type"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the precise locations of the cities with an area code of 787? precise location refers to latitude, longitude"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: In California, how many delivery receptacles are there in the community post office that has the highest number of delivery receptacles? in California refers to name = 'California' and state = 'CA'; 'Community Post Office' is the Type"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: In which county can you find the city with the highest number of females? highest number of females refers to Max(female_population)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the names of the states whose postal point is not affiliated with any organization? postal point is not affiliated with any organization refers to division is null"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the difference in the most populated city of Allentown-Bethlehem-Easton, PA-NJ in 2020 against its population in 2010? ""Allentown-Bethlehem-Easton, PA-NJ"" is the CBSA_name; most populated city refers to Max(population_2020); difference = Subtract (population_2020, population_2011)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List all the zip codes in the county of New Castle in Delaware. ""NEW CASTLE"" is the county; 'Delaware' is the name of state"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many representatives are there in the state with the highest monthly benefit payments for retired workers? state with highest monthly benefits payment for retired workers refers to Max(monthly_benefits_retired_workers)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: In the state where Lisa Murkowski is the representative, how many cities have zero employees? zero employee refers to employees = 0"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the top 3 states with the highest Asian population? List the full names of all the representatives in the said states. city with highest asian population refers to Max(Sum(asian_population)); full name refers to first_name, last_name"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which state is Outagamie County in? Give the full name of the state. ""OUTAGAMIE"" is the county"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What party does the area with the zip code 91701 belong to?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many males are there in New Haven County's residential areas? ""NEW HAVEN"" is the county; male refers to male_population"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Show the alias for the county at coordinate (18.090875, -66.867756). coordinates refers to latitude, longitude; latitude = '18.090875; longitude = '-66.867756'"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: For the city with the most elders, what's its area code? city with most elders refers to Max(over_65)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: For the county represented by Thompson Bennie G, how many bad aliases does it have?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give the location coordinates of the city with area code 636. location coordinate refers to (latitude, longitude)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Show the zip code of the county represented by Buchanan Vernon."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which state is area code 878 in? Give the name of the state."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many counties are there in Virginia State? ""Virginia"" is the state"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give the name and the position of the cbsa officer from the area with the zip code 45503. position refers to latitude, longitude"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Tell the name of the county which is represented by Hartzler Vicky. name of county refers to county"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the average male median age of all the residential areas in Windham county. average male median age refers to Divide (Sum(male_median_age), Count(county)); 'WINDHAM' is the county"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: For the county where DeSantis Ron is from, what is the average female median age? average female median age refers to Divide (Sum(female_median_age), Count(county))"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the area code of Bishopville, SC? ""Bishopville"" is the city; 'SC' is the state"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Name the bad alias of Geneva, AL. ""Geneva"" is the city; 'AL' is the state"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which city and state has the bad alias of Lawrenceville? ""Lawrenceville"" is the bad_alias"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Name both the alias and the bad alias of zip code 38015."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the zip code of the district represented by Steven A King?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the CBSA name and type in York, ME? ""York"" is the city; 'ME' is the state; type refers to CBSA_type"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List 10 cities with a median age over 40. Include their zip codes and area codes. median age over 40 refers to median_age > 40"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Name the county that has the bad alias of Druid Hills. ""Druid Hills"" is the bad_alias"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the area code of Phillips county in Montana? ""PHILLIPS"" is the county; 'Montana' is the name of state"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which district has the largest land area in Wisconsin? Write the full name of the congress representative and include the postal codes. ""Wisconsin"" is the state; largest land area refers to Max(land_area); full name refers to first_name, last_name; postal code refers to zip_code"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many states are in the central time zone? Write their full names. central time zone refers to time_zone = 'Central'"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Name 10 cities with their states that are under the Lexington-Fayette, KY office of the Canada Border Services Agency. ""Lexington-Fayette, KY"" is the CBSA_name"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the percentage ratio between Democrats and Republicans in Indiana? List the zip codes belonging to Democrats. ""Democrats"" and ""Republicans"" refers to party = 'Democrat"" and party = 'Republican'; percentage ratio = Multiply (Divide (Count(party = 'Democrat""), Count(party = 'Republican')), 100)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the ratio between the number of representatives in Alabama and the number of representatives in Illinois. ""Alabama"" and ""Illinois"" are both state; Ratio = Divide (Count(state = 'Alabama'), Count(state = 'Illinois'))"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the average of 2020's population in each zip code. average of 2020 population in each zip code refers to Divide (Sum(population_2020), Count(zip_code))"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: State the male population for all zip code which were under the Berlin, NH CBSA. ""Berlin, NH"" is the CBSA_name"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which CBSAs have more than 10 zip codes? has more than 10 zip codes refers to CBSA where count(CBSA) > 10"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List all the bad alias for zip codes in Puerto Rico. ""Puerto Rico"" refers to state = 'PR'"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the longitude and latitude for the district represented by Grayson Alan?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the state for area code of 787?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List all representatives of districts which have more than 30 000 population in 2020. more than 30000 population in 2020 refers to population_2020 > 30000; representative refers to first_name, last_name"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which zip code in Massachusetts that have more than 1 area code? ""Massachusetts"" is the state; zip code more than 1 area code refers to Count (zip_code) > 1"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: State the county for Arecibo City. ""Arecibo"" is the city"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many zip codes are under Barre, VT? ""Barre, VT"" is the CBSA_name"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the zip code under Saint Croix county, which zip code has the biggest land area? biggest land area refers to Max(land_area); ""SAINT CROIX"" is the county"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the difference between the 2020 population and the 2010 population for the districts represented by Griffin Tim. difference = Subtract (population_2020, population_2010)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Based on the population in 2020, calculate the percentage for the population of Asian in the zip code where the CBSA was Atmore, AL. ""Atmore, AL"" is CBSA_name; percentage = Divide(asian_population, population_2020) * 100"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the cities with an area code 939, which city has the highest Asian population? highest asian population refers to Max(asian_population)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give the name of the country and state of the city with elevation of 1039. elevation of 1039 refers to elevation = 1039"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the alias and elevation of the city with zip code 1028."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the area code of the city with the largest land area? largest land area refers to Max(land_area)"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give the area code of the city with the white population ranging between 1700 to 2000."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the Asian population in the city with the alias Leeds?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List down the area code and country of the city named Savoy. Savoy is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the alias of the cities with 0 population in 2010? with 0 population in 2010 refers to population_2010 = 0;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the cities with area code 608, how many cities implement daylight savings? implement daylight savings refers to daylight_savings = 'Yes';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the average elevation of the cities with alias Amherst. AVG(elevation) where alias = 'Amherst';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the country and state of the city named Dalton? Dalton is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give at least five alias of cities with a postal point of post office. postal point of post office refers to type = 'Post Office';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the difference in the number of cities with P.O. box only and cities with Post Office among the cities with area code 787? SUBTRACT(COUNT(type = 'P.O. Box Only'), COUNT(type = 'Post Office')) where area_code = 787;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the cities belonging to the country named Arroyo, calculate the percentage of increase in the population in these cities from 2010 to 2020. DIVIDE(SUBTRACT(SUM(population_2020)), SUM(population_2010)), SUM(population_2010) as percentage where county = 'ARROYO';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the postal points in Texas, provide the zip codes and cities of postal points which have total beneficiaries of above 10000. Texas is the name of the state, in which name = 'Texas'; total beneficiaries of above 10000 refer to total_beneficiaries > 10000;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the postal points in the District of Columbia, how many of them have an area with above 20000 black population? District of Columbia refers to county = 'DISTRICT OF COLUMBIA'; postal points refer to zip_code; area with above 20000 black population refers to black_population > 20000;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the city where zip code 19019 is located and the alias of that city."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List the bad alias of the postal point located in Camuy. postal points refer to zip_code; Camuy is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020. representative's full names refer to first_name, last_name; area which has highest population in 2020 refers to MAX(population_2020);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the daylight savings areas in the Midwest region, how many postal points are there in Illinois? postal points refer to zip_code; the daylight savings areas refer to daylight_savings = 'Yes'; Illinois is the name of the state, in which name = 'Illinois';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the countries and the zip codes in the Virgin Islands. the Virgin Islands refer to state where name = 'Virgin Islands';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes and the alias of Greeneville. Greeneville is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Compare the numbers of postal points under Smith Adrian and Heck Joe. COUNT(zip_code where first_name = 'Smith' and last_name = 'Adrian') > COUNT(zip_code where first_name = 'Heck' and last_name = 'Joe');"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes and CBSA officers of the postal point in Oxford. CBSA officers refer to CBSA_name; postal point refers to zip_code; Oxford is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes and their affiliated organization for the postal point under Kingsport-Bristol, TN-VA. postal point under Kingsport-Bristol, TN-VA refers to zip_code where CBSA_name = 'Kingsport-Bristol, TN-VA'; affiliated organization refers to organization from CBSA;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes and the congress representatives' names of the postal points which are affiliated with Readers Digest. representative's full names refer to first_name, last_name; postal points affiliated with Readers Digest refer to zip_code where organization = 'Readers Digest';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the postal points in California, calculate the percentage of them in post office types. DIVIDE(COUNT(zip_code where type = 'Post Office'), COUNT(zip_code)) as percentage where name = 'California';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the zip code for the Senate house? House of Repsentatives can stand for senate house"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which city has the most bad aliases? the most bad aliases refer to MAX(COUNT(bad_alias));"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List all the counties in Georgia. Georgia is the name of the state, in which name = 'Georgia';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List all the locations of postal points with the area code ""410"". latitude and longitude coordinates can be used to identify the location; postal points refer to zip_code;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the name of the CBSA of the city with the highest average house value? the highest average house value refers to avg_house_value;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the bad aliases of the postal points from East Setauket? East Setauket is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What was the population of Wilcox County in 2010? population of Wilcox County in 2010 refers to SUM(population_2010) where county = 'WILCOX';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the code of the area with the largest Asian population? the code of the area refers to area_code; area with the largest Asian population refers to MAX(asian_population);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List all the cities with micro CBSA. micro CBSA refers to CBSA_type = 'Micro';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the name of the state with the most counties? the most counties refer to MAX(COUNT(county));"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the number of households in the ""FL-10"" district?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the average household income in the city known as ""Danzig""? average household income refers to avg_income_per_household; city known as ""Danzig"" refers to bad_alias = 'Danzig';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What are the states with an above-average female population? above-average female population refers to female_population > DIVIDE(SUM(female_population), COUNT(state));"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What percentage of households are in ""Coroyell"" out of its state? DIVIDE(SUM(households where county = 'CORYELL'), SUM(households)) as percentage;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the name and the position of the CBSA officer in the city of Cabo Rojo? name of the CBSA officer refers to CBSA_name; position of the CBSA officer refers to CBSA_type;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Indicate the country name of the city Las Marias."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many cities does congressman Pierluisi Pedro represent?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the names of bad aliases in the city of Aguadilla."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Indicate the name of the congressman represent in Guanica. name of congressman implies full name which refers to first_name, last_name; Guanica is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which state has the most bad aliases? the most bad aliases refer to MAX(COUNT(bad_alias));"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the difference in the number of bad alias between Aguada city and Aguadilla city? SUBTRACT(COUNT(bad_alias where city = 'Aguada'), COUNT(bad_alias where city = 'Aguadilla'));"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Which state has greater than 50 CBSA officers of metro type? greater than 50 CBSA officers of metro type refers to COUNT(CBSA_type = 'Metro') > 50;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the population of Arecibo in 2020. population of Arecibo in 2020 refers to SUM(population_2020) where county = 'ARECIBO';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Indicate the name of the country with a population greater than 10000 in 2010. population greater than 10000 in 2010 refers to population_2010 > 10000;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Name the country with the largest number of households in a residential area. the largest number of households refers to MAX(households);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the percentage of households in residential areas of countries over 10000. DIVIDE(SUM(households > 10000), SUM(households)) as percentage;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the types of postal points in Saint Croix, what percentage of postal points is the post office? DIVIDE(COUNT(type = 'Post Office' ), COUNT(type)) as percentage where county = 'SAINT CROIX';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the area code 787, list the country of the cities with a postal point type of unique postal office. postal point type of unique postal office refers to type = 'Unique Post Office';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the elevation of the city with the alias East Longmeadow?"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: In cities that do not implement daylight savings, what is the total number of cities? do not implement daylight savings refers to daylight_savings = 'No';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give the country and area code of the city with zip code 1116."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the cities with alias St Thomas, provide the type of postal point for each city."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List down the names of the cities belonging to Noble, Oklahoma. the county of Noble is located in the state of Oklahoma;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the listed cities, provide the area code of the city with the largest water area. the largest water area refers to MAX(water_area);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the alias of the city with the highest population in year 2020. the highest population in year 2020 refers to MAX(population_2020);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the elevation of the city belonging to Hampden, Massachusetts? the county of Hampden is located in the state of Massachusetts."
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List the area code of the city with the highest Hispanic population. the highest Hispanic population refers to MAX(hispanic_population);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Give the alias of the cities with an Asian population of 7. Asian population of 7 refers to asian_population = 7;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: What is the average of the white population in the cities with area code 920? AVG(white_population) where area_code = 920;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Among the cities with alias Ponce, what is the percentage of cities with a country level FIPS code of less than 20? DIVIDE(COUNT(county_fips < 20), COUNT(county_fips)) as percentage where alias = 'Ponce';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: List down the country of the cities with a population greater than 97% of the average population of all countries in 2020. population_2020 > MULTIPLY(0.97, AVG(population_2020));"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Count the number of postal points in the district represented by Kirkpatrick Ann. postal points refer to zip_code;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes and coordinates of the postal points under Allentown-Bethlehem-Easton, PA-NJ. coordinates refer to latitude and longitude; under Allentown-Bethlehem-Easton, PA-NJ refers to CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes, cities, and locations of the postal points that have Shared Reshipper as a bad alias. latitude and longitude coordinates can be used to identify the location;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Who are the congress representatives of the postal points in Garfield? Who are the congress representatives refer to first_name, last_name; Garfield is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Count the number of postal points under New York-Newark-Jersey City, NY-NJ-PA. postal points refer to zip_code; under New York-Newark-Jersey City, NY-NJ-PA refers to CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many postal points are there under the congress representative in Puerto Rico? postal points refer to zip_code; Puerto Rico refers to state = 'Puerto Rico';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Describe the number of postal points and the countries in West Virginia. postal points refer to zip_code; West Virginia is the name of the state, in which name = 'West Virginia';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the zip codes and area codes of the postal points with the community post office type at the elevation above 6000. community post office type refers to type = 'Community Post Office'; elevation above 6000 refers to elevation > 6000;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many postal points are there under the congress representative from the House of Representatives in Mississippi? postal points refer to zip_code; Mississippi is the name of the state, in which name = 'Mississippi';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Provide the congress representatives' IDs of the postal points in East Springfield. congress representatives' IDs refer to CID; East Springfield is the city;"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Who is the CBSA officer of the post point in the area with the highest number of employees? CBSA officer refers to CBSA_name; the highest number of employees refers to MAX(employees);"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: How many postal points with unique post office types are there in Ohio? postal points refer to zip_code; unique post office types refer to type = 'Unique Post Office'; Ohio is the name of the state, in which name = 'Ohio';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the average number of beneficiaries per postal point in Guam. DIVIDE(SUM(total_beneficiaries), COUNT(zip_code)) where name = 'Guam';"
address,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CBSA (
CBSA integer,
CBSA_name text,
CBSA_type text,
PRIMARY KEY (CBSA),
);
CREATE TABLE state (
abbreviation text,
name text,
PRIMARY KEY (abbreviation),
);
CREATE TABLE congress (
cognress_rep_id text,
first_name text,
last_name text,
CID text,
party text,
state text,
abbreviation text,
House text,
District integer,
land_area real,
PRIMARY KEY (cognress_rep_id),
FOREIGN KEY (abbreviation) REFERENCES state(abbreviation),
);
CREATE TABLE zip_data (
zip_code integer,
city text,
state text,
multi_county text,
type text,
organization text,
time_zone text,
daylight_savings text,
latitude real,
longitude real,
elevation integer,
state_fips integer,
county_fips integer,
region text,
division text,
population_2020 integer,
population_2010 integer,
households integer,
avg_house_value integer,
avg_income_per_household integer,
persons_per_household real,
white_population integer,
black_population integer,
hispanic_population integer,
asian_population integer,
american_indian_population integer,
hawaiian_population integer,
other_population integer,
male_population integer,
female_population integer,
median_age real,
male_median_age real,
female_median_age real,
residential_mailboxes integer,
business_mailboxes integer,
total_delivery_receptacles integer,
businesses integer,
1st_quarter_payroll integer,
annual_payroll integer,
employees integer,
water_area real,
land_area real,
single_family_delivery_units integer,
multi_family_delivery_units integer,
total_beneficiaries integer,
retired_workers integer,
disabled_workers integer,
parents_and_widowed integer,
spouses integer,
children integer,
over_65 integer,
monthly_benefits_all integer,
monthly_benefits_retired_workers integer,
monthly_benefits_widowed integer,
CBSA integer,
PRIMARY KEY (zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
FOREIGN KEY (CBSA) REFERENCES CBSA(CBSA),
);
CREATE TABLE alias (
zip_code integer,
alias text,
PRIMARY KEY (zip_code),
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE area_code (
zip_code integer,
area_code integer,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE avoid (
zip_code integer,
bad_alias text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
);
CREATE TABLE country (
zip_code integer,
county text,
state text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (state) REFERENCES state(abbreviation),
);
CREATE TABLE zip_congress (
zip_code integer,
district text,
FOREIGN KEY (zip_code) REFERENCES zip_data(zip_code),
FOREIGN KEY (district) REFERENCES congress(cognress_rep_id),
);
---------------------
QUESTION: Calculate the percentage of congress representatives from the Democrat party. Among them, how many postal points are in the Hawaii state? DIVIDE(COUNT(party = 'Democrat'), COUNT(congress_rep_id)) as percentage; postal points refer to zip_code; state = 'Hawaii';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the name of the root beer brand that has the longest history? name of the root beer brand refers to BrandName; longest history refers to MIN(FirstBrewedYear);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many breweries are located in North America? North America refers to country = 'United States'; North America is the name of continent where country = 'United States' is located;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Please list the names of all the root beer brands that are advertised on facebook. name of the root beer brand refers to BrandName; advertised on facebook refers to FacebookPage IS not NULL;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the name of the root beer brand with the lowest unit profit available to wholesalers? name of the root beer brand refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the description of the root beer brand A&W? A&W refers to BrandName = 'A&W';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: In which city is the brewery AJ Stephans Beverages located? AJ Stephans refers to BreweryName = 'AJ Stephans Beverages';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many transactions had Frank-Paul Santangelo made in July, 2014? in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the transactions made in July, 2014, how many of them were made by a male customer? in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07'; male customer refers to Gender = 'M';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014? users permit the company to send regular emails to them refers to subscribedtoemaillist = 'TRUE'; Visa card refers to creditcardtype = 'Visa'; in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the full name of the customer that had made the most transactions in August, 2014? full name = First, Last; made the most transactions refers to MAX(COUNT(TransactionID)); in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Please list the brands of all the root beer that Frank-Paul Santangelo had purchased on 2014/7/7. brands of the root beer refers to BrandName; purchased on 2014/7/7 refers to transactiondate = '2014-07-07';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Of the 4 root beers that Frank-Paul Santangelo purchased on 2014/7/7, how many of them were in cans? on 2014/7/7 refers to transactiondate = '2014-07-07'; in cans refers to containertype = 'Can';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many root beers of the Bulldog were purchased in August, 2014? Bulldog refers to BrandName = 'Bulldog'; purchased in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Please list the full names of the customers who have purchased at least one root beer produced by AJ Stephans Beverages. full name = First, Last; customers who have purchased at least one root beer refers to CustomerID > = 1; produced by AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014? do not advertise on Twitter refers to twitter IS NULL; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the number of the credit card that Frank-Paul Santangelo used to purchase root beers on 2014/7/7? number of the credit card refers to CreditCardNumber; on 2014/7/7 refers to TransactionDate = '2014-07-07';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among all the root beers purchased by Frank-Paul Santangelo, how many of them were non-sweetened? non-sweetened refers to honey = 'FALSE' AND artificialsweetener = 'FALSE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Please list the dates on which a male customer has purchased more than 3 root beers. dates of purchase refers to TransactionDate; male customer refers to Gender = 'M'; purchased more than 3 root beers refers to COUNT(CustomerID) > 3;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the average number of root beers of the brand A&W sold in a day in August, 2014? average = DIVIDE(SUM(COUNT(RootBeerID WHERE BrandName = 'A&W' AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08')), 31); A&W refers to BrandName = 'A&W'; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among all the root beers sold in 2014, what is the percentage of the root beers produced by the brewery AJ Stephans Beverages? sold in 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014'; percentage = DIVIDE(MULTIPLY(SUM(BreweryName = 'AJ Stephans Beverages'), 1.0), COUNT(RootBeerID)) WHERE SUBSTR(TransactionDate, 1, 4) = '2014'; AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Tell the number of reviews given by James House. FALSE;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Show the credit card number of Lisa Ling. FALSE;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: State the coordinate of Sac State American River Courtyard. coordinate = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Provide the name of the location where transaction no.100885 happened. name of the location refers to LocationName; transaction no. refers to TransactionID; TransactionID = 100885;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which city does the customer who finished transaction no.103545 live in? transaction no. refers to TransactionID; TransactionID = 103545;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the phone number of the customer who owns the credit card of number 6011179359005380? FALSE;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which customer has the most reviews? State the full name. customer that has the most reviews refers to MAX(COUNT(CustomerID)); full name = First, Last;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: For the customer who leaves the review content of ""Tastes like Australia."", when was his/her first purchase date? review content of ""Tastes like Australia."" refers to Review = 'Tastes like Australia.';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: When did Natalie Dorris buy her first root beer? when a customer bought their first root beer refers to FirstPurchaseDate;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: For the root beer brand with the most 5 star ratings, what is the name of the brewery? most 5 star ratings refers to MAX(COUNT(StarRating = 5)); name of the brewery refers to BreweryName;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: For the customer who gave a 3 star rating to Frostie brand on 2014/4/24, did the user permit the company to send regular emails to him/her? 3 star rating refers to StarRating = 3; Frostie refers to  BrandName = 'Frostie'; if SubscribedToEmailList = 'TRUE', it means the user permit the company to send regular emails to him/her; if SubscribedToEmailList = FALSE', it means the user did not permit the company to send regular emails to him/her; rating on 2014/4/24 refers to ReviewDate = '2014-04-24';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: For the root beer brand which got the review with the content of ""The quintessential dessert root beer. No ice cream required."", what is the current retail price of the root beer? review with the content of ""The quintessential dessert root beer. No ice cream required."" refers to Review = 'The quintessential dessert root beer. No ice cream required.';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the percentage of 5 star ratings River City brand root beer get? percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE StarRating = 5), COUNT(BrandID) WHERE BrandName = 'River City'), 1.0); 5 star ratings refers to StarRating = 5; River City refers to BrandName = 'River City';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the average number of reviews of all the root beer brands from ""CA"" State? average = DIVIDE(COUNT(CustomerID), COUNT(BrandID) WHERE state = CA);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many female customers permit the company to send regular emails to them? female refers to Gender = 'F'; customer permits the company to send regular emails to them refers to SubscribedToEmailList = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the name of the brand of the beer with the shortest brewed history? name of the brand of the beer refers to BrandName; shortest brewed history refers to MAX(FirstBrewedYear);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What are the full names of the first top 10 customers? full name = First Last; first top 10 customers refers to MIN(FirstPurchaseDate) LIMIT 10;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many breweries are there in Australia? Australia refers to Country = 'Australia';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many customers are named Charles in Sacramento? Sacramento refers to City = 'Sacramento';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many transactions were paid through MasterCard in 2014? MasterCard refers to CreditCardType = 'MasterCard'; in 2014 refers to TransactionDate > = '2014-01-01' AND TransactionDate < = '2014-12-31';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brand of root beer did Jayne Collins give the lowest rating? brand of root beer refers to BrandName; lowest rating refers to MIN(StarRating);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many sweet bottled root beers that do not contain cane sugar were purchased in 2015 through the selling company located in Sac State American River Courtyard? sweet refers to Honey = 'TRUE'; bottled refers to ContainerType = 'Bottle'; do not contain cane sugar refers to CaneSugar = 'FALSE'; in 2015 refers to PurchaseDate < = '2015-12-31'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brewery does the most purchased root beer in 2016 belong to? most purchased root beer refers to MAX(COUNT(BrandID)); in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What are the full names of the customer who gave River City a 5-star? full name = First, Last; River City refers to BrandName = 'River City'; 5-star refers to StarRating = 5;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many root beers did Tom Hanks purchase between 2015 to 2016? between 2015 to 2016 refers to TransactionDate > = '2015-01-01' AND TransactionDate < '2016-12-31';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brand of root beer was highly rated by customers? brand of root beer refers to BrandName; highly rated refers to MAX(COUNT(StarRating = 5));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many Henry Weinhard's were bought by Nicholas Sparks? Henry Weinhard's refers to BrandName = 'Henry Weinhard''s';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the root beer brands that do not advertise on Facebook and Twitter, which brand has the highest number of purchases? do not advertise on Facebook and Twitter refers to FacebookPage IS NULL AND Twitter IS NULL; highest number of purchases refers to MAX(COUNT(BrandID));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Between Sac State Union and Sac State American River Courtyard, which location sold the most Dog n Suds root beer? Between Sac State Union and Sac State American River Courtyard refers to LocationName IN('Sac State American River Courtyard', 'Sac State Union'); Dog n Suds refers to BrandName = 'Dog n Suds'; sold the most root beer refers to MAX(COUNT(BrandID));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many canned A&W were purchased in 2016? canned refers to ContainerType = 'Can'; A&W refers to BrandName = 'A&W'; in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the precise location of Sac State Union? precise location = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What are the brands of the root beers that received 5-star ratings from no less than 5 customers? brand of the root beer refers to BrandName; 5-star ratings refers to StarRating = 5; no less than 5 customers refers to COUNT(CustomerID) > = 5;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List the brands of root beer produced by Dr Pepper Snapple Group and calculate their percentage of purchases between 2014 to 2016. brand of root beer refers to BrandName; produced by Dr Pepper Snapple Group refers to BreweryName = 'Dr Pepper Snapple Group'; percentage of purchases = MULTIPLY(DIVIDE(SUM(BrandID WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31'), COUNT(BrandID) WHERE BreweryName = 'Dr Pepper Snapple Group'), 1.0); between 2014 to 2016 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brand of root beer has the lowest unit profit available to wholesalers? Indicate the ID of the customer that has the highest number of purchases of the said brand. brand of root beer refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost)); ID of the customer refers to CustomerID; highest number of purchases refers to MAX(COUNT(CustomerID));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List the full name and phone number of male customers from Fair Oaks who are subscribed to the email list. full name = First, Last; male customers refers to Gender = 'M'; Fair Oaks refers to City = 'Fair Oaks'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the root beer purchased in 2014, what percentage were sold in cans? in 2014 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'; percentage = MULTIPLY(DIVIDE(SUM(ContainerType = 'Can'), COUNT(RootBeerID) WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2014-12-31'), 1.0); in cans refers to ContainerType = 'Can';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Give the name of the brands that brewed their first drink between 1996 and 2000 in the descending order of the date brewed. name of the brands refers to BrandName; between 1996 and 2000 refers to FirstBrewedYear > = 1996 AND FirstBrewedYear < = 2000;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Find the brand Id of the root beer which has the most number of customers who gave 1-star ratings. most number of customers who gave 1-star ratings refers to MAX(COUNT(StarRating = 1)); 1-star ratings refers to StarRating = 1;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the transactions, what percentage is done by using a visa card? visa card refers to CreditCardType = 'Visa'; percentage = MULTIPLY(DIVIDE(SUM(CreditCardType = 'Visa'), COUNT(TransactionID)), 1.0);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many brands of root beers are available in cans and contain corn syrup and artificial sweeteners? available in cans refers to AvailableInCans = 'TRUE'; contain corn syrup refers to CornSyrup = 'TRUE'; contain artificial sweeteners refers to ArtificialSweetener = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Calculate the percentage of sales done at Sac State American River Courtyard. percentage =   MULTIPLY(DIVIDE(SUM(LocationName = 'Sac State American River Courtyard'), COUNT(LocationID)), 1.0); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: On average how many caffeinated root beers are sold a day? average = DIVIDE(COUNT(RootBeerID WHERE Caffeinated = 'TRUE'), COUNT(PurchaseDate)); caffeinated refers to Caffeinated = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Find the root beer with the most and least amount of profit per unit and list the container types in which these root beers are sold. most amount of profit per unit refers to MAX(SUBTRACT(CurrentRetailPrice, WholesaleCost)); least amount of profit per unit refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the average cost of root beers purchased for more than 2 dollars and sold in bottles? average cost = DIVIDE(SUM(PurchasePrice > 2), COUNT(RootBeerID) WHERE PurchasePrice > 2); more than 2 dollars refers to PurchasePrice > 2; in bottles refers to ContainerType = 'Bottle';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the root beers sold in bottles, how many are sold at the location 38.559615, -121.42243? in bottles refers to ContainerType = 'Bottle';  location 38.559615, -121.42243 refers to latitude = 38.559615 AND longitude = -121.42243;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the customers not subscribed to the mailing list, what percentage has given three or more stars in a review? not subscribed to the mailing list refers to SubscribedToEmailList = 'FALSE'; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE StarRating > 3), COUNT(CustomerID) WHERE SubscribedToEmailList = 'FALSE'), 1.0);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which root beer got the most five stars in 2012? Give the brand name of this beer. most five stars refers to MAX(COUNT(StarRating = 5)); in 2012 refers to FirstBrewedYear = 2012;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: In the female customers, how many bought root beer that contains artificial sweetener? female refers to Gender = 'F'; contains artificial sweetener refers to ArtificialSweetener = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Calculate the difference between the number of root beers sold that use cane sugar and corn syrup. difference = SUBTRACT(SUM(CaneSugar = 'TRUE'), SUM(CornSyrup = 'TRUE')); use cane sugar refers to CaneSugar = 'TRUE'; corn syrup refers to CornSyrup = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brewery brewed the most sold root beer in 2015? brewery refers to BreweryName; most sold root beer refers to MAX(COUNT(BrandID)); in 2015 refers to TransactionDate > = '2015-01-01' AND TransactionDate < = '2015-12-31';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Among the male customers in Sacramento, what percentage bought Dominion root beer in 2013? male customers refers to Gender = 'M'; Sacramento refers to City = 'Sacramento'; percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE BrandName = 'Dominion'), COUNT(BrandID) WHERE City = 'Sacramento'), 1.0); Dominion refers to BrandName = 'Dominion'; in 2013 refers to TransactionDate > = 2013-01-01 AND TransactionDate < 2014-01-01;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the difference in the average number of sales per day of root beer brands that contain honey and that don’t contain honey. difference in the average = SUBTRACT(DIVIDE(MULTIPLY(SUM(Honey = 'TRUE'), 1.0), COUNT(TransactionDate)), DIVIDE(MULTIPLY(SUM(Honey = 'FALSE'), 1.0), COUNT(TransactionDate))); contain honey refers to Honey = 'TRUE'; don’t contain honey refers to Honey = 'FALSE'"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Find and list the full name and email of the customers who used American Express cards in Sac State Union. full name = First, Last; American Express cards refers to CreditCardType = 'American Express'; Sac State Union refers to LocationName = 'Sac State Union';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: In the reviews of September 2014. Which brand of beers obtained the highest star ratings? September 2014 refers to ReviewDate LIKE '2014-09%'; brand of beers refers to BrandName; highest star ratings refers to MAX(StarRating);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the precise location of all paying customers with American Express? precise location refers to Latitude, Longitude; American Express refers to CreditCardType = 'American Express';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many Folsom customers prefer to pay with Visa? Folsom refers to City = 'Folsom'; Visa refers to CreditCardType = 'Visa';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: From which cities are the customers who gave 5 stars in their reviews in November 2012? 5 stars refers to StarRating = 5; in November 2012 refers to ReviewDate LIKE '2012-11%';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What brands of beer has Peg Winchester consumed? brands of beer refers to BrandName;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What brand of beer has been the worst rated most times? brand of beer refers to BrandName; worst rated most times refers to MAX(COUNT(StarRating = 1));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What credit card is the most used in the purchase of non-alcoholic beer? credit card that is the most used refers to MAX(COUNT(CreditCardType)); non-alcoholic beer refers to Alcoholic = 'FALSE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the name of all the customers who have ever given a 5-star review? name of the customer = First, Last; 5-star review refers to StarRating = 5;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: At what latitude is the Thomas Kemper brand beer consumed the most? Thomas Kemper refers to BrandName = 'Thomas Kemper';  latitude the beer is consumed the most refers to MAX(COUNT(Latitude));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What star rating is the most common for beers containing corn syrup? most common refers to MAX(COUNT(StarRating)); containing corn syrup refers to CornSyrup = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the precise location of zip code 95819? precise location = Latitude, Longitude;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What brands of beers are manufactured at coordinates 38,566,129, -121,426,432? coordinates 38,566,129, -121,426,432 refers to Latitude = 38.566129 AND Longitude = -121.426432;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the average unit profit for wholesalers of canned beers? average unit profit = DIVIDE(SUM(SUBTRACT(CurrentRetailPrice, WholesaleCost)), COUNT(ContainerType = 'Can')); canned beers refers to ContainerType = 'Can';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What percentage of customers who paid with a Discover Credit Card gave a 3-star rating? percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE StarRating = 3), COUNT(CustomerID) WHERE CreditCardType = 'Discover'), 100); Discover Credit Card refers to CreditCardType = 'Discover'; 3-star rating refers to StarRating = 3;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List the brand IDs of the beers whose star rating is more than 3. star rating is more than 3 refers to StarRating > 3;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many brands of bottle root beer were purchased between 4/3/2015 and 10/26/2015? bottle root beer refers to ContainerType = 'Bottle'; purchased between 4/3/2015 and 10/26/2015 refers to PurchaseDate BETWEEN '2015-04-23' AND '2015-10-26';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the full name of the customer who gave a 5-star rating and commented ""The quintessential dessert root beer. No ice cream required"" on his review? full name = First, Last; 5-star rating refers to StarRating = 5; commented ""The quintessential dessert root beer. No ice cream required"" refers to Review = 'The quintessential dessert root beer. No ice cream required.';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Tally the email addresses and phone numbers of customers from Sacramento who gave a star rating of more than 3 in 2014. email addresses refers to Email; Sacramento refers to City = 'Sacramento'; star rating of more than 3 refers to StarRating > 3; in 2014 refers to ReviewDate LIKE '2014%';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many female mailing list subscribers from Sacramento gave a 4-star rating between 1/3/2016 and 10/26/2016? female refers to Gender = 'F'; mailing list subscribers refers to SubscribedToEmailList = 'TRUE'; Elk Grove refers to City = 'Sacramento'; 4-star rating refers to StarRating = 4; between 1/3/2016 and 10/26/2016 refers to ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Give me the brewery and brand names of canned root beer that were purchased before 6/6/2015. canned root beer refers to ContainerType = 'Can'; purchased before 6/6/2015 refers to PurchaseDate < '2015-06-06';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List the brand names of bottled root beer whose first brewing year is no later than 1930. bottled root beer refers to ContainerType = 'Bottle'; first brewing year is no later than 1930 refers to FirstBrewedYear < 1930;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many times did Anna Himes use her Mastercard when paying between 12/25/2014 and 5/20/2016 ? Mastercard refers to CreditCardType = 'MasterCard'; between 12/25/2014 and 5/20/2016 refers to TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the average star rating given by female customers to brand ID 10018 from 1/25/2015 to 3/10/2015? average star rating = AVG(StarRating); female customers refers to Gender = 'F; from 1/25/2015 to 3/10/2015 refers to ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the brand name of the root beer that gained a 1-star rating from customer ID 331115 while saying, ""Yuk, more like licorice soda""? 1-star rating refers to StarRating = 1; saying, ""Yuk, more like licorice soda"" refers to Review = 'Yuk, more like licorice soda.';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Calculate the total purchases made by customers using their Visa credit cards in the Sac State American River Courtyard between 6/3/2014 and 11/27/2015. total purchases = SUM(PurchasePrice); Visa credit card refers to CreditCardType = 'Visa'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; between 6/3/2014 and 11/27/2015 refers to TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many transactions were made in Sac State Union using the American Express credit card in 2014? Sac State Union refers to LocationName = 'Sac State Union'; American Express credit card refers to CreditCardType = 'American Express'; in 2014 refers to TransactionDate LIKE '2014%';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the precise coordinate of Sac State Union? precise coordinate = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What did the customer say in his or her review of Bulldog root beer on 7/26/2013? Bulldog refers to BrandName = 'Bulldog'; on 7/26/2013 refers to ReviewDate = '2013-07-26';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List down the brand names of root beer that gained a 5-star rating from a customer's review in 2013. Calculate the unit profit available to wholesalers for each brand. 5-star rating refers to StarRating = 5; in 2013 refers to ReviewDate LIKE '2013%'; unit profit available to wholesalers = SUBTRACT(CurrentRetailPrice, WholesaleCost);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Give me the full name of the first customer, and tell me how long ago he or she wrote his or her first review since making his or her first purchase. full name = First, Last; how long ago = SUBTRACT(ReviewDate, FirstPurchaseDate);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the credit card type used by Kenneth Walton? FALSE;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the container type, brand name and star rating for root beer ID 10054? FALSE;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List out the root beers bought by Tim Ocel and Dawn Childress. FALSE;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List out the root beer ID for the brand Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's. Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's refers to BrandName IN('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many bottles of beer have been bought by Jim Breech? bottles refers to ContainerType = 'Bottle';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many transactions have been made to purchase a root beer brand from California? California refers to State = 'CA';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the average review given by a subscriber? average review = AVG(StarRating); subscriber refers to SubscribedToEmailList = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the amount difference between the bottles of root beer sold from Louisiana and Missouri? difference = SUBTRACT(COUNT(ContainerType = 'Bottle' WHERE State = 'LA'), COUNT(ContainerType = 'Bottle' State = 'MO')); bottles refers to ContainerType = 'Bottle'; Louisiana refers to State = 'LA'; Missouri refers to State = 'MO';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the transaction ratio being made at Sac State American River Courtyard and Sac State Union? transaction ratio = DIVIDE(SUM(TransactionID WHERE LocationName = 'Sac State American River Courtyard'), SUM(TransactionID WHERE LocationName = 'Sac State Union')); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Sac State Union refers to LocationName = 'Sac State Union';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List out the name of the top 10 spenders and what credit card type are they using. top 10 spenders refers to MAX(PurchasePrice) LIMIT 10;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: List out root beer brand that is not caffeinated and not containing cane sugar. What is the total amount sold for this products? root beer brand refers to BrandName; not caffeinated refers to Caffeinated = 'FALSE'; not containing cane sugar refers to CaneSugar = 'FALSE'; total amount sold = SUM(PurchasePrice);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which of the root beer brand have the lowest purchase? root beer brand refers to BrandName; lowest purchase refers to MIN(COUNT(BrandID));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the best seller root beer brand and what is the average star rating for this root beer? best seller root beer refers to MAX(COUNT(BrandID)); average star rating = AVG(StarRating);"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the percentage difference of River City sale compare to Frostie? percentage difference = (DIVIDE(MULTIPLY(SUBTRACT(SUM(PurchasePrice WHERE BrandName = 'River City'), SUM(PurchasePrice WHERE BrandName = 'Frostie')), 100), SUM(PurchasePrice WHERE BrandName = 'Frostie'))); River City refers to BrandName = 'River City'; Frostie refers to BrandName = 'Frostie';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Please name all of the cities in California. California refers to State = 'CA';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the percentage of female customers who subscribed to the email list? percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE Gender = 'F'), COUNT(CustomerID) WHERE SubscribedToEmailList = 'TRUE'), 1.0); female refers to Gender = 'F'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which type of card did Dick Ruthven use to pay for all of his transactions? type of card refers to CreditCardType;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many transactions were made at Sac State Union? Sac State Union refers to LocationName = 'Sac State Union';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many stars did Urijah Faber rate for Frostie? stars refers to StarRating; Frostie refers to BrandName = 'Frostie';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brand has the lowest star rating with a ""Too spicy!"" review? lowest star rating refers to MIN(StarRating); ""Too spicy!"" review refers to Review = 'Too Spicy!';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many purchases were made at Sac State American River Courtyard using Master Card? Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Master Card refers to CreditCardType = 'MasterCard';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which brand in 2012 has the lowest star rating and contains cane sugar as well as honey? brand refers to BrandName; in 2012 refers to ReviewDate LIKE '2012%'; lowest star rating refers to MIN(StarRating); contains cane sugar as well as honey refers to CaneSugar = 'TRUE' AND Honey = 'TRUE';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the precise location of the place where Tommy Kono made a purchase in 2014? precise location = Latitude, Longitude; in 2014 refers to TransactionDate LIKE '2014%';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the email address of the customer who made a purchase in transaction 100016? email address refers to Email; transaction 100016 refers to TransactionID = 100016;"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: How many transactions were made to purchase a bottle of beer using American Express? bottle of beer refers to ContainerType = 'Bottle'; American Express refers to CreditCardType = 'American Express';"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Which location sold more bottles of beer? location refers to LocationName; bottle of beer refers to ContainerType = 'Bottle'; location that sold more bottles of beer refers to MAX(COUNT(LocationID WHERE ContainerType = 'Bottle'));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: Please name any three root beer brands that have the highest market evaluation and acceptance. root beer brands refers to BrandName; highest market evaluation and acceptance refers to MAX(COUNT(StarRating = 5));"
beer_factory,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customers (
CustomerID integer,
First text,
Last text,
StreetAddress text,
City text,
State text,
ZipCode integer,
Email text,
PhoneNumber text,
FirstPurchaseDate date,
SubscribedToEmailList text,
Gender text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE geolocation (
LocationID integer,
Latitude real,
Longitude real,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
);
CREATE TABLE location (
LocationID integer,
LocationName text,
StreetAddress text,
City text,
State text,
ZipCode integer,
PRIMARY KEY (LocationID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerbrand (
BrandID integer,
BrandName text,
FirstBrewedYear integer,
BreweryName text,
City text,
State text,
Country text,
Description text,
CaneSugar text,
CornSyrup text,
Honey text,
ArtificialSweetener text,
Caffeinated text,
Alcoholic text,
AvailableInCans text,
AvailableInBottles text,
AvailableInKegs text,
Website text,
FacebookPage text,
Twitter text,
WholesaleCost real,
CurrentRetailPrice real,
PRIMARY KEY (BrandID),
);
CREATE TABLE rootbeer (
RootBeerID integer,
BrandID integer,
ContainerType text,
LocationID integer,
PurchaseDate date,
PRIMARY KEY (RootBeerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
FOREIGN KEY (LocationID) REFERENCES geolocation(LocationID),
);
CREATE TABLE rootbeerreview (
CustomerID integer,
BrandID integer,
StarRating integer,
ReviewDate date,
Review text,
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (BrandID) REFERENCES rootbeerbrand(BrandID),
);
CREATE TABLE transaction (
TransactionID integer,
CreditCardNumber integer,
CustomerID integer,
TransactionDate date,
CreditCardType text,
LocationID integer,
RootBeerID integer,
PurchasePrice real,
PRIMARY KEY (TransactionID),
FOREIGN KEY (CustomerID) REFERENCES customers(CustomerID),
FOREIGN KEY (LocationID) REFERENCES location(LocationID),
FOREIGN KEY (RootBeerID) REFERENCES rootbeer(RootBeerID),
);
---------------------
QUESTION: What is the precise location of the Sac State American River Courtyard? precise location = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales ids are there for customer id 80?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Count the total quantity for sales from id 1 to 10. sales from id 1 to 10 refers to SalesID BETWEEN 1 AND 10;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average quantity per sales from sales id 20 to 30. average quantity = AVG(Quantity); SalesID BETWEEN 20 AND 30;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the product id for products with the highest quantity. highest quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many product ids have the lowest price? lowest price refers to MIN(Price);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down product names of free gifts. free gifts refers to Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the product name for products from id 1 to 10. products from id 1 to 10 refers to ProductID BETWEEN 1 AND 10;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the product with the lowest quantity? lowest quantity refers to MIN(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customer ids have purchased Hex Nut 9? Hex Nut 9' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total sales ids that were sales of Flat Washer 8. Flat Washer 8' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down all of the product names that were placed by sales person with id 10. id refers to SalesPersonID; SalesPersonID = 10"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the first name of customers who placed order for product id 1."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the last name of the customer who placed an order for sales id 178?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down product ids that were purchased by customers called Abby."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down all of the product ids that were placed by Meander."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the last name of sales person for sales id 100?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the first name of employee who handled sales for customer called Abigail?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many free gifts have customer with id 11782 received? free gifts refers to Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of customers who dealt with sales person with id 5? full name = FirstName, MiddleInitial, LastName;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down all of the sales IDs for sales handled by sales people with first name starting with alphabet ""s"". first name starting with alphabet ""s"" refers to FirstName LIKE 's%';"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among customers with IDs from 1 to 100, what is the highest price of products they purchased? IDs from 1 to 100 refers to CustomerID BETWEEN 1 AND 100 ; highest price refers to MAX(Price);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among customers with the last name of Valdez, who purchased the highest quantity? highest quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Sum up the number sales ids handled by employees called Morningstar, Heather and Dean. SUM = ADD(SUM(SalesID WHERE FirstName = 'Morningstar'), SUM(SalesID WHERE FirstName = 'Heather'), SUM(SalesID WHERE FirstName = 'Dean'));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Has Alex purchased product with id 498? WHEN ProductID = 498 AND FirstName = 'Alex' means that Alex purchased a product; WHEN ProductID = 498 AND FirstName NOT 'Alex' means Alex has not purchased a product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total price of products purchased by Adam. total price = SUM(MULTIPLY(Price, Quantity));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total price for products from id 400 to 500. total price = SUM(MULTIPLY(Price, Quantity)); from id 400 to 500 refers to ProductID BETWEEN 400 AND 500;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total quantity of products with name starting with alphabet ""c"". name starting with alphabet ""c"" refers to Name LIKE 'C%';"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total quantity of products purchased by customer called Adrian."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the product ID of the top five products, by descending order, in terms of price. top 5 products in terms of Price refers to MAX(Price) LIMIT 5;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products, how many of them are freebies? freebies refers to Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down the name of products whose sale quantity is more than 950. quantity is more than 950 refers to Quantity > 950;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of employee who sold 1000 units? full name of employee = FirstName, MiddleInitial, LastName; units refers to quantity; Quantity = 100"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Tally the product name and quantity of the first ten sales. first ten sales refers to SalesID BETWEEN 1 AND 10;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total sales amount for Reflector? total sales amount = SUM(MULTIPLY(Price, Quantity)); 'Reflector' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the best selling colour for HL Mountain Frame, 42? best selling colour refers to name of product with higher total sales; SUM(SalesID WHERE Name = 'HL Mountain Frame - Silver, 42') > SUM(Name = 'HL Mountain Frame - Black, 42') means Silver is the best selling colour, otherwise Black is the best seling colour;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the difference in price between HL Mountain Frame - Black, 42 and LL Mountain Frame - Black, 42? difference = SUBTRACT((Price WHERE Name = 'HL Mountain Frame - Black, 42'), (Price WHERE Name = 'HL Mountain Frame - Black, 42'));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total number of sales closed by Michel E. DeFrance?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average number of customers per sales person? average = DIVIDE(COUNT(CustomerID), COUNT(EmployeeID));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among all customers handled by Innes E. del Castillo, how many have purchased Short-Sleeve Classic Jersey, L? Short-Sleeve Classic Jersey, L' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the sales person who helped Elizabeth A. White to purchase Road-250 Black, 48. name of the sales person = FirstName, MiddleInitial, LastName; 'Road-250 Black, 48' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales people managed to sell Headlights - Weatherproof? Headlights - Weatherproof' is name of product"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the revenue produced through sales of HL Road Frame - Red, 56. revenue = MULTIPLY(SUM(Quantity, Price)); 'HL Road Frame - Red, 56' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales transactions were given by the customer named Joe L. Lopez? sales transactions refers to SalesID;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the customers who received 'Touring Rim' as a free gift. name of the customer = FirstName, MiddleInitial, LastName; 'Touring Rim' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the number of customers handled by each of the sales people."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales people are handling all the customers?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the name of the sales person with employee ID 7. name of the sales person = FirstName, MiddleInitial, LastName;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the most expensive and the least expensive products available, excluding free gifts. most expensive product refers to MAX(Price); least expensive product refers to MIN(Price); excluding free gifts refers to not including Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among all the customers who have purchased ML Bottom Bracket, identify the percentage of sales by Albert I. Ringer? ML Bottom Bracket' is name of product; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE FirstName = 'Albert' AND MiddleInitial = 'I' AND LastName = 'Ringer'), COUNT(CustomerID)), 1.0);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customers have the first name Abigail?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the quantity of Blade products sold. Blade' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the full name of the employee who has sold the most quantity. full name of the employee = FirstName, LastName; most quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the full name of the customer who purchased the most quantity of products. full name of the customer = FirstName, LastName; most quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the product that is most sold by sale person id 20? most sold refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the first names of employees with trading quantity for more than 500. trading quantity for more than 500 refers to Quantity > 500;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the first names of customers who have purchased products from sale person id 1."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total trading quantity of Abraham sold to Aaron Alexander. total trading quantity = SUM(Quantity WHERE Employees.FirstName = 'Abraham' AND Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander');"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the full names of customers who have purchased products in quantity over 600. full names of customers = FirstName, LastName; quantity over 600 refers to quantity > 600;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the customers whose first name is Cameron, who bought the product in the most quantity? most quantity refers to MAX(Quantity); who refers to FirstName, LastName;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please provide sales ID for products named Hex Nut with a price greater than 100. price greater than 100 refers to price > 100;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify customer IDs who bought products priced from 1000 to 2000. priced from 1000 to 2000 refers to Price BETWEEN 1000 AND 2000;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total quantity of products that are gifts. total quantity = SUM(Quantity); gifts refers to Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the quantity percentage of the gift products in the total trading quantity. percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Price = 0), SUM(Quantity)), 1.0); gift products refers to Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the percentage of sold blades in the total number of transactions. percentage = MULTIPLY(DIVIDE(SUM(Quantity WHERE Name = 'Blade'), SUM(Quantity)), 1.0); 'blades' refers to name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many of the employees have the last name ""Ringer"" ?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products with product ID lower than 15, how many of them costs 10 and below? product ID lower than 15 refers to ProductID < 15; costs 10 and below refers to Price; Price < = 10;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the product's name brought by Aaron Alexander."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the product ID and name of the product with the highest prices among the quantity ranges from 400 to 500. highest prices refers to MAX(Price); quantity ranges from 400 to 500 refers to Quantity BETWEEN 400 AND 500;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among customers named Kate, who has the highest quantity? highest quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products that have price ranges from 100 to 150, what is the customer ID and sales ID of the product with a quantity lower than 25? price ranges from 100 to 150 refers to Price BETWEEN 100 AND 150; quantity lower than 25 refers to Quantity < 25;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the quantity and price of the product bought by Abigail Henderson."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In sales with a quantity of 60, how many of them have a price not greater than 500?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In customers with the first name of Erica, how many of them bought a quantity below 200? quantity below 200 refers to quantity < 200;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among products bought by Kathryn Ashe, what is the name of the product with the highest quantity? highest quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the price and quantity of the product named Seat Tube?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the price and name of the product bought by Erica Xu?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the sales ID of the product with a quantity of 590 and named ""External Lock Washer 7"". External Lock Washer 7' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In sales ID between 30 and 40, who is the customer that bought a total quantity of 403? who refers to FirstName, LastName;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products. quantity greater than 90% of the average quantity = Quantity > MULTIPLY(AVG(Quantity), 0.9);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the sales ID ranges from 1 to 200, what is the percentage of the products with a price ranging from 200 to 300? sales ID ranges from 1 to 200 refers to SalesID between 1 and 200; percentage = MULTIPLY(DIVIDE(SUM(Price between 200 and 300), COUNT(Price)), 1.0);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the most expensive product? most expensive product refers to MAX(Price);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customers are named Madison?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many types of ""HL Touring Frames"" are there? types of HL Touring Frames refers to Name like '%HL Touring Frame%';"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customers share the most common last name? most common last name refers to MAX(COUNT(LastName));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many free or gift products are there? free gift refers to Price = 0;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the sales person who handled the highest number of sales? name of the sales person = FirstName, MiddleInitial, LastName; highest number of sales refers to MAX(COUNT(SalesID));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the customer who purchased the highest amount of total price in a single purchase? full name of the customer = FirstName, MiddleInitial, LastName; highest amount of total price refers to MAX(MULTIPLY(Quantity, Price));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many ""Mountain-500 Black 42"" were sold in total? Mountain-500 Black 42' is name of product; sold in total = SUM(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much is the total amount of sales handled by Heather McBadden? total amount of sales = SUM(MULTIPLY(Quantity, Price));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many ""Mountain-100 Silver, 38"" were sold by Stearns MacFeather? Mountain-100 Silver, 38' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many type of products did Dalton M. Coleman purchase?"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the full names of the top 3 employees who handled the highest number of sales? full names of employees = FirstName, MiddleInitital, LastName; highest number of sales refers to MAX(COUNT(SalesID));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the ""Mountain-500 Black"" product types, which type was purchased the most? Mountain-500 Black product types refers to Name like 'Mountain-500 Black%'; purchased the most refers to MAX(SUM(Quantity));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees sold ""ML Road Frame-W - Yellow, 40""? ML Road Frame-W - Yellow, 40' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many chainring bolts were sold under sales ID 551971? Chainring Bolts' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees sold over 20,000 quantities of ""Touring-2000 Blue, 50""? over 20,000 quantities refers to Quantity > 20000; 'Touring-2000 Blue, 50' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total cost of all the ""Road-650, Red, 60"" products that Abraham E. Bennet sold? total cost = SUM(MULTIPLY(Quantity, Price)); 'Road-650, Red, 60' is name of product;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which product has the highest total amount of quantity sold? Calculate its overall total price. highest total amount of quantity refers to MAX(Quantity); overall total price = SUM(MULTIPLY(Quantity, Price));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the first name of all the customers whose last name is Chen."
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the employee names, what is the most common middle initial? most common middle initial refers to MAX(COUNT(MiddleInitial));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average price of products that cost between 100 and 200? average price = DIVIDE(SUM(Price, COUNT(Price))); cost refers to Price; Price BETWEEN 100 AND 200;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find and list the full name of customers who bought products above-average quantity. full name of the customer = FirstName, MiddleInitial, LastName; above-average quantity = Quantity > AVG(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the full name of the customer who bought the most amount of products. full name of the customer = FirstName, MiddleInitial, LastName; most amount of products refers to MAX(MULTIPLY(Quantity, Price));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Of the employees who sold Blade, who has the most amount of sales? Blade' is name of product; most amount of sales refers to MAX(MULTIPLY(Quantity, Price));"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the full name of customers who spend more than 50,000 in descending order the amount spend. full name of the customer = FirstName, MiddleInitial, LastName; more than 50,000 in the amount refers to MULTIPLY(Quantity, Price) > 50000;"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the product that sold the most quantity. most quantity refers to MAX(Quantity);"
sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
FirstName text,
MiddleInitial text,
LastName text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Products (
ProductID integer,
Name text,
Price real,
PRIMARY KEY (ProductID),
);
CREATE TABLE Sales (
SalesID integer,
SalesPersonID integer,
CustomerID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (SalesID),
FOREIGN KEY (SalesPersonID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find and list the products that sold below the average quantity. below the average quantity refers to Quantity < AVG(Quantity);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes do not have correct data for the year in which it appeared first? do not have correct data refers to first_appeared < 1851 or first_appeared > 2012;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Which dish lasted longer, Anchovies or Fresh lobsters in every style? if (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Anchovies') > (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Fresh lobsters in every style'), it means 'Anchovies' lasted longer; if (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Fresh lobsters in every style') > (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Anchovies') it means 'Fresh lobsters in every style' last longer;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among all the dishes that were once free, what is the name of the dish that had appeared on most menus? dishes that were once free refers to lowest_price = 0; appeared on most menus refers to MAX(menus_appeared);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menus with the name ""Waldorf Astoria"" have 4 pages? 4 pages refers to page_count = 4;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the name of the dish that appeared on the upper left corner on menu page no. 1389? appeared on the upper left corner on menu refers to xpos < 0.25 AND ypos < 0.25; menu page no. refers to menu_page_id; menu_page_id = 1389;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the prices of the dish ""Clear green turtle"" on every menu page it appeared on. Clear green turtle is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among all the menu pages with the appearance of the dish ""Clear green turtle"", how many of them have the dish at a stable price? Clear green turtle is a name of dish; stable price refers to highest_price is null;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the highest price of the dish ""Clear green turtle"" on a menu page? highest price refers to MAX(Price); Clear green turtle is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the IDs of all the menus in which the dish ""Clear green turtle"" had appeared. Clear green turtle is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus in which the dish ""Clear green turtle"" had appeared, how many of them used the dollar as their currency? Clear green turtle is a name of dish; dollar as currency refers to currency = 'Dollars';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus in which the dish ""Clear green turtle"" had appeared, how many of them did not support taking out or booking in advance? Clear green turtle is a name of dish; not support taking out or booking in advance refers to call_number is null;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the names of all the dishes that appeared on the menu ""Zentral Theater Terrace"". Zentral Theater Terrace is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Which dish has the highest price on the menu ""Zentral Theater Terrace""? Please give its name. highest price refers to MAX(Price); Zentral Theater Terrace is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes are there on the menu ""Zentral Theater Terrace""? Zentral Theater Terrace is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes are there in total in the menus with the name ""Waldorf Astoria""? FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the IDs of the menus that are DIYs of the restaurant and have the dish ""Clear green turtle"". IDs of the menus refers to menu_id; menus that are DIYs of the restaurant refers to sponsor is null; Clear green turtle is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the average page number of the menus that have the dish ""Clear green turtle""? average page number = AVG(page_number); Clear green turtle is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the average price of the dishes on the menu ""Zentral Theater Terrace""? average price = AVG(price); Zentral Theater Terrace refers to menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menu items were created on 28th March 2011? created on 28th March 2011 refers to created_at like '2011-03-28%';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes are included in the menu page ID 144? FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menus were used in Dutcher House? Dutcher House refers to location = 'Dutcher House';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes appeared on a menu more than once? appeared on a menu more than once refers to times_appeared > menus_appeared;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menus were created for steamship? steamship refers to venue = 'STEAMSHIP';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many pages were there on the menu created on 17th November 1898? created on 17th November 1898 refers to date = '1898-11-17';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Name the dishes that were on the menu page ID 174. FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List the names and menu page IDs of the dishes that first appeared in 1861. first appeared in 1861 refers to first_appeared = 1861;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the dishes on menu page ID 7610, list the names and highest prices of the dishes in menu items that were created on 23rd May 2011. highest prices of the dishes refers to MAX(price); created on 23rd May 2011 refers to created_at like '2011-05-23%';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List the dishes included on page number 30 with the least in full height. least in full height refers to MIN(full_height);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Provide the page IDs and name of the menu which had the highest page count. page IDs refers to page_number; highest page count refers to MAX(page_count);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: On the menu with the most dishes, how many dishes were there on its second page? menu with the most dishes refers to menu.id with MAX(dish_count); second page refers to page_number = 2;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Provide the numbers of the menu item which includes Fresh lobsters in every style and location where that dish was used on a menu. Fresh lobsters in every style' is a name of dish; location where the dish was used on a menu = (xpos, ypos);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List the dishes that appeared at the left upper corner of the CHAS.BRADLEY'S OYSTER & DINING ROOM""s sponsored menu. appeared at the left upper corner refers to xpos < 0.25 and ypos < 0.25; CHAS.BRADLEY'S OYSTER & DINING ROOM refers to sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Provide the sponsor and event of the menu which includes Cerealine with Milk. Cerealine with Milk is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many percent of Bluefish dishes are located at the center of the menu page? percent = MULTIPLY(DIVIDE(SUM(xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75), COUNT(id)), 1.0); Bluefish is a sub name of dish; located at the center of the menu page refers to xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Who is the sponsor of menu with ID 12463? FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the event sponsored by the Republican House? sponsored by the Republican House refers to sponsor = 'REPUBLICAN HOUSE';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Where is the place that menu with ID 12472 was created for? place refers to location;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please describe the menu sponsored by Noviomagus physically. describe the menu physically refers to physical_description; sponsored by Noviomagus refers to sponsor = 'Noviomagus';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the occasion for menu with ID 12463? FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down the locations of menu sponsored by Norddeutscher Lloyd Bremen. sponsored by Norddeutscher Lloyd Bremen refers to sponsor = 'Norddeutscher Lloyd Bremen';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down the menu page IDs for menu sponsored by Occidental & Oriental? menu page IDs refers to MenuPage.id; sponsored by Occidental & Oriental refers to sponsor = 'Occidental & Oriental';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down the image IDs for menu located at Manhattan Hotel. located at Manhattan Hotel refers to location = 'Manhattan Hotel';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: State the full height and width for menu called ""El Fuerte Del Palmar"". width refers to full_width; El Fuerte Del Palmar is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Is ""c02c9a3b-6881-7080-e040-e00a180631aa"" the uuid for menu called ""The Biltmore""? if 'c02c9a3b-6881-7080-e040-e00a180631aa' can be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is the uuid for the menu called The Biltmore; if 'c02c9a3b-6881-7080-e040-e00a180631aa' can not be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is not the uuid for the menu called The Biltmore; The Biltmore is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: State the name of menu with the longest full height. longest full height refers to MAX(full_height);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the page count for menu with page ID of 130? page ID of 130 refers MenuPage.id = 130;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How much is the price of menu with image ID 4000009194? FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down the page numbers for menu with dishes on the right upper corner. on the right upper corner refers to xpos > 0.75 AND ypos < 0.25;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down the name of dishes from menu created in April. created in April refers to SUBSTR(created_at, 7, 1) = '4';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down name of dishes from menu with menu page ID 1389. FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the highest price of dishes with menu item ID 1 to 5? highest price refers to MAX(price); menu item ID 1 to 5 refers to MenuItem.id BETWEEN 1 AND 5;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List down the name of dishes that were positioned on the left upper corner. positioned on the left upper corner refers to xpos < 0.25 AND ypos < 0.25;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Calculate the total dish count for menu with uuid of ""510d47e4-2958-a3d9-e040-e00a18064a99"" & ""510d47e4-295a-a3d9-e040-e00a18064a99"". total dish count for uuid of '510d47e4-2958-a3d9-e040-e00a18064a99' = SUM(dish_count WHERE uuid = '510d47e4-2958-a3d9-e040-e00a18064a99'); total dish count for uuid of '510d47e4-295a-a3d9-e040-e00a18064a99 = SUM(dish_count WHERE uuid = '510d47e4-295a-a3d9-e040-e00a18064a99');"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Calculate the total price of items for menu with ID 12882. total price = SUM(price);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List the top five dishes, by descending order, in terms of highest price. highest price refers to MAX(highest_price);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the dishes, how many of them are for free? free refers to lowest_price = 0;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What dishes made their first and last appearances in 1855 and 1900, respectively? first appearance in 1855 refers to first_appeared = 1855; last appearance in 1900 refers to last_appeared = 1900;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Write down the top ten menus with the highest dish count. highest dish count refers to MAX(dish_count);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes appear in the right upper corner of the menu page? appear in the right upper corner of the menu page refers to xpos > 0.75 and ypos < 0.25;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How long has the ""Clear Green Turtle"" dish appeared on the menu, and tell me when its latest update was? Clear Green Turtle is a name of dish; how long a dish appeared on the menu = SUBTRACT(last_appeared, first_appeared); latest update refers to latest updated_at;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Tally the dishes that have appeared on the menu for more than 100 years. appeared on the menu for more than 100 years = SUBTRACT(last_appeared, first_appeared) > 100;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes have appeared on the menu in less than 5 years? appeared on the menu in less than 5 years = SUBTRACT(last_appeared, first_appeared) < 5;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Give me the name and menu price of dishes that were free. dishes that were free refers to lowest_price = 0;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How much does the dish on page 2 of menu ID 12474 cost? page 2 refers to page_number = 2;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the dishes, how many of them were created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC. created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC refers to created_at between '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Who are the sponsors of the menu whose image full height is more than 10000 mm? image full height is more than 10000 mm refers to full_height > 10000;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Write down the image ID, full height, and full width of the menu that were used in the ""100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER"" event. FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Under what events was the menu page's full width less than 2000 mm? full width less than 2000 mm refers to full_width < 2000;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Name the dishes that cost 180,000. cost 180,000 refers to price = 180000;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the position coordinate on the page menu of the ""Small Hominy"" dish and how long did it appear? position coordinate = xpos, ypos; Small Hominy is a name of dish; how long it appear = SUBTRACT(last_appeared, first_appeared);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Calculate the image area of the page menu for the dish named ""Baked Stuffed Mullet & Sauce Pomard"". Please include the page number and image ID. image area = MULTIPLY(full_height, full_width);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes appeared more than once on a menu? appeared more than once on a menu refers to times_appeared > menus_appeared;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menus sponsored by Krogs Fiske Restaurant were created in April 2015? sponsored by Krogs Fiske Restaurant refers to sponsor = 'Krogs Fiskerestaurant'; created in April 2015 refers to date like '2015-04%';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Which dish has the longest history? longest history refers to MAX(SUBTRACT(last_appeared, first_appeared));"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: On 1887-07-21, what was the event that lead to the creation of menu id 21380? On 1887-07-21 refers to date = '1887-07-21';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many pages are there in the ""Emil Kuehn"" menu? Emil Kuehn is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menus include puree of split peas aux croutons? puree of split peas aux croutons is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What are the names of the dishes with a stable price that were created in April of 2011? dishes with a stable price refers to highest_price is null; created in April of 2011 refers to SUBSTR(created_at,1,4) = '2011' and SUBSTR(created_at, 7, 1) = '4';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the name of the menu with the highest number of pages? highest number of pages refers to MAX(COUNT(page_number));"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Provide the menu page ids of all the menu that includes mashed potatoes. mashed potatoes is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus sponsored by Pacific Mail Steamship Company, how many menus have no more than 2 pages? sponsored by Pacific Mail Steamship Company refers to sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'; no more than 2 pages refers to COUNT(page_number) < = 2;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus that include milk, what is the menu page id of the menu that has the highest price? milk is a name of dish; highest price refers to MAX(price);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the menu id of the menu sponsored by Occidental and Oriental Steamship Company with the highest number of pages? sponsored by Occidental and Oriental Steamship Company refers to sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'; highest number of pages refers to MAX(COUNT(page_number));"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: List the positions of the dish ""breaded veal cutlet with peas"" on every menu where it appeared. positions = xpos, ypos; breaded veal cutlet with peas is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What are the names of the dishes shown in the lower right corner of menu page 48706? shown in the lower right corner refers to xpos > 0.75 AND ypos > 0.75;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What are the names of the dishes in the menu sponsored by The Society of Cumberland that was created for the 19th reunion at Grand Pacific Hotel in Chicago, Illinois? sponsored by The Society of Cumberland refers to sponsor = 'THE SOCIETY OF THE CUMBERLAND'; created for the 19th reunion refers to event = '19NTH REUNION'; Grand Pacific Hotel in Chicago, Illinois refers to place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus that include baked apples with cream, who is the sponsor of the menu with the highest price? baked apples with cream is a name of dish; highest price refers to MAX(price);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the average number of dishes per menu in the Souper de Luxe menus? Identify what is the name of the dish that appeared the most in all of its menus. average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(menu_page_id)); Souper de Luxe is a name of menu; dish that appeared the most in all of its menus refers to MAX(COUNT(dish_id));"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the IDs of all the menus that are DIYs of the restaurant. menus that are DIYs of the restaurant refers to sponsor is null;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many menus were created for lunch? created for lunch refers to event = 'LUNCH';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus with over 10 pages, how many of them have over 20 dishes? menus with over 10 pages refers to page_count > 10; over 20 dishes refers to dish_count > 20;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the ID of the menu with the most number of dishes? most number of dishes refers to MAX(COUNT(dish_count));"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes are there on the menu ""Zentral Theater Terrace""? Zentral Theater Terrace is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menus that did not support taking out or booking in advance, how many of them were created before 1950? did not support taking out or booking in advance refers to call_number is null; created before 1950 refers to strftime('%Y', date) < '1950';"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the image ID of page 1 of the menu ""Zentral Theater Terrace""? page 1 refers to page_number = 1; Zentral Theater Terrace is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: To which menu does the menu page image ID5189412 belong? Please give its name. FALSE;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Which menu page has a bigger width, page 1 of ""Zentral Theater Terrace"" or page 1 of ""Young's Hotel""? if SUM(full_width where page_number = 1 AND menu.name = 'Zentral Theater Terrace') > SUM(full_width where page_number = 1 AND menu.name = 'Young''s Hotel'), it means Zentral Theater Terrace menu page is bigger than Young's Hotel; if SUM(full_width WHERE page_number = 1 AND menu.name = 'Young''s Hotel') < SUM(full_width WHERE page_number = 1 AND menu.name = 'Zentral Theater Terrace'), it means Young's Hotel menu page is bigger than Zentral Theater Terrace;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Which menu page of ""Ritz Carlton"" has the biggest height? Ritz Carlton is a name of menu; biggest height refers to MAX(full_height);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menu pages of ""Ritz Carlton"", how many of them have a width of over 1000? Ritz Carlton is a name of menu; width of over 2490 refers to full_width > 1000;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How many dishes are there on page 1 of menu ID12882? page 1 refers to page_number = 1;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the names of all the dishes on page 1 of menu ID12882. page 1 refers to page_number = 1;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Please list the page numbers of all the menu pages on which the dish ""Chicken gumbo"" had appeared. Chicken gumbo is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menu pages on which the dish ""Chicken gumbo"" had appeared, what is the menu ID of the one with the biggest width? Chicken gumbo is a name of dish; biggest width refers to MAX(full_width);"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: For how many times had the dish ""Chicken gumbo"" appeared on a menu page? Chicken gumbo is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: Among the menu pages on which the dish ""Paysanne Soup"" had appeared, how many of them had a stable price for the dish? Paysanne Soup is a name of dish; stable price refers to highest_price is null;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the highest price of the dish ""Chicken gumbo"" on a menu page? highest price refers to MAX(price); Chicken gumbo is a name of dish;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: How much space does page 1 of the menu ""Zentral Theater Terrace"" cover? how much space = MULTIPLY(full_height, full_width); Zentral Theater Terrace is a name of menu;"
menu,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Dish (
id integer,
name text,
description text,
menus_appeared integer,
times_appeared integer,
first_appeared integer,
last_appeared integer,
lowest_price real,
highest_price real,
PRIMARY KEY (id),
);
CREATE TABLE Menu (
id integer,
name text,
sponsor text,
event text,
venue text,
place text,
physical_description text,
occasion text,
notes text,
call_number text,
keywords text,
language text,
date date,
location text,
location_type text,
currency text,
currency_symbol text,
status text,
page_count integer,
dish_count integer,
PRIMARY KEY (id),
);
CREATE TABLE MenuPage (
id integer,
menu_id integer,
page_number integer,
image_id real,
full_height integer,
full_width integer,
uuid text,
PRIMARY KEY (id),
FOREIGN KEY (menu_id) REFERENCES Menu(id),
);
CREATE TABLE MenuItem (
id integer,
menu_page_id integer,
price real,
high_price real,
dish_id integer,
created_at text,
updated_at text,
xpos real,
ypos real,
PRIMARY KEY (id),
FOREIGN KEY (menu_page_id) REFERENCES MenuPage(id),
FOREIGN KEY (dish_id) REFERENCES Dish(id),
);
---------------------
QUESTION: What is the average number of dishes per menu page of menu ID12882? average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(page_count));"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were ordered by S K L Enterprises Inc in 2017? ""S K L Enterprises Inc"" is the cust_name; in 2017 refers to Cast(ship_date AS DATE) = 2017"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the total number of pounds being transported for S K L Enterprises Inc? ""S K L Enterprises Inc"" is the cust_name; total number of pounds refers to Sum(weight)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the shipments done by Sue Newell, how many of them are for S K L Enterprises Inc? ""S K L Enterprises Inc"" is the cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were ordered by a customer in Florida? customer in Florida refers to state = 'FL'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Please list the IDs of all the shipments made by a retailer customer. ""retailer"" is the cust_type;  IDs of shipments refers to ship_id"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the customers having at least one shipment in 2017, how many of them have an annual revenue of over 30000000? shipment in 2017 refers to Cast(ship_date AS DATE) = 2017; annual revenue of over 30000000 refers to annual_revenue > 30000000"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments in 2017 were done by Sue Newell? in 2017 refers to Cast(ship_date AS DATE) = 2017"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the full name of the driver that has done the most shipments in 2017? driver refers to driver_id; full name refers to first_name, last_name; in 2017 refers to Cast(ship_date AS DATE) = 2017; Most shipment refers to Max(Sum(weight))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the shipments in 2017, how many of them have the destination in New Jersey? in 2017 refers to Cast(ship_date AS DATE) = 2017; 'New Jersey' is the state"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the maximum weight being transported to New York during a single shipment? ""New York"" is the city_name; maximum weight refers to Max(weight)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How much more pounds in total were transported to New York than to Chicago? ""New York"" and ""Chicago"" are both city_name; more pounds in total refers to Subtract (Sum(weight where city_name = 'New York'), Sum(weight where city_name = 'Chicago'))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Please list the destination cities of all the shipments ordered by S K L Enterprises Inc. ""S K L Enterprises Inc"" is the cust_name; destination cities refers to city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the average weight of the goods being transported on a single shipment ordered by S K L Enterprises Inc? ""S K L Enterprises Inc"" is the cust_name; average = Divide (Sum(weight), Count(ship_id))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among all the shipments to Florida, what is the percentage of the shipment to Jacksonville? ""Florida"" is the state; ""Jacksonville"" is city_name;"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: State the headquarter of the truck which completed shipment no.1045. shipment no. 1045 refers to ship_id = 1045; headquarter refers to if make = 'Peterbit', then 'Texax(TX)', if make = 'Mack', then 'North Carolina (NC)'; if make = 'Kenworth', then 'Washington (WA)'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were delivered by the oldest truck model? oldest truck model refers to Min(model_year)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Who was the customer of shipment no.1275? Give the customer's name. shipment no. 1275 refers to ship_id = 1275; customer name refers to cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Where was the destination city of shipment no.1701? shipment no. 1701 refers to ship_id = 1701; destination city refers to city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Give the name of the driver of shipment no.1021. shipment no. 1021 refers to ship_id = 1021; name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Tell the name of the driver who received the shipment on 2017/11/5. shipment on 2017/11/5 refers to ship_date = '2017-11/05'; name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Show the population of the city which was the destination of shipment no.1398. shipment no. 1398 refers to ship_id = 1398"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Provide the ship date of the first shipment to customers in South Carolina. ""South Carolina"" refers to state = 'SC'; first shipment refers to Min(ship_date)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: For the shipment received by Leszek Kieltyka on 2017/9/25, what was its weight? on 2017/9/25 refers to ship_date = '2017-09-25'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the area of the destination city of shipment No.1346? shipment no. 1346 refers to ship_id = 1346"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Provide the weight of the shipment to U-haul Center Of N Syracuse on 2016/9/21. ""U-haul Center Of N Syracuse"" is the cust_name; on 2016/9/21 refers to ship_date = '2016/09/21'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Who was the driver of truck no.3 on 2016/9/19? Tell the full name. truck no. 3 refers to truck_id = 3; on 2016/9/19 refers to ship_date = '2016-09-19'; full name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Calculate the population density of the city as the destination of shipment no.1369. shipment no. 1369 refers to ship_id = 1369; population density refers to Divide (area, population)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the average number of shipments done by the Kenworth trucks? ""Kenworth"" is the make of truck; average = Divide (Count(ship_id where make = 'Kenworth'), Count(truck_id where make = 'Kenworth))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many pounds did Sue Newell transport during her first shipment? first shipment refers to Min(ship_date); pounds refers to weight"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: To whom did the company transport its heaviest shipment? heaviest shipment refers to Max(weight)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the full name of the driver who transported the first shipment of the company? first shipment of the company refers to Min(ship_date); full name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: In total, how many shipments were transported to Olympic Camper Sales Inc? ""Olympic Camper Sales Inc"" is the cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories? ""New York"" is the city_name; 'Harry's Hot Rod Auto & Truck Accessories' is the cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the top 5 heaviest shipments, how many shipments were transported via Mack? heaviest shipment refers to Max(weight); via Mack refers to make = 'Mack'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the full name of the driver who delivered the most shipments to the least populated city? least populated city refers to Min(population); fullname refers to first_name, last_name; most shipment refers to driver_id where Max(Count (ship_id))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments with weight of no more than 1,000 pounds were shipped by the oldest truck? weight of no more than 1000 pounds refers to weight < 1000; oldest truck refers to Min (model_year)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How much is the annual revenue of the customer with the most number of shipments? customer with the most number of shipment refers to cust_id where Max(Count(ship_id))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the shipments for Downey, how many shipments were shipped to California in 2016? ""Downey"" is the city_name; 'California' is the state, whose abbreviation is CA; in 2016 refers to year(ship_date) = 2016,"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments did Holger Nohr transport to North Las Vegas overall? ""North Las Vegas"" is the city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were shipped to the most densely populated city? most densely populated city refers to Max(Divide(area, population))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Determine the percentage of manufacturers who are from Texas among all of Lorenzo's customers. ""Texas"" refers to state = 'TX'; 'manufacturer' is the cust_type; percentage = Divide (Count(cust_id where state = 'TX'), Count(cust_id)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Identify the total weight of shipments transported to San Mateo, California, in 2016. ""San Mateo"" is the city_name; in 2016 refers to Cast(ship_date as DATE) = 2016"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Identify the total weight of shipments transported in 2016 by the newest Peterbilt. transported in 2016 refers to CAST(ship_date as DATE) = 2016; 'Peterbilt' is the make; newest refers to Max(model_year)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What was the maximum weight of the shipment carried to Boston? Name the customer of that shipment. ""Boston"" is the city_name; maximum weight refers to Max(weight); customer refers to cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Where was shipment no. 1002 headed? shipment no. 1002 refers to ship_id = 1002; where shipment was headed refers to city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the average shipment weight carried by the oldest Mack? ""Mack"" is the make; oldest refers to Min(model_year); average shipment weight refers to AVG(weight)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Identify the full name of the driver who delivered a shipment to the city of New York in February 2016. ""New York"" is the city_name; in February 2016 refers to ship_date LIKE '2016-02%'; full name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Name the customer who sent the shipment to Oak Park. ""Oak Park"" is the city_name; customer name refers to cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Determine the number of shipments delivered by Andrea Simons to Huntsville in 2016. ""Huntsville"" is the city_name; in 2016 refers to Cast(ship_date AS DATE) = 2016; number of shipment refers to Count(ship_id)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments does each driver deliver per month on average? shipment data was for 24 months in 2016 and 2017 respectively; deliver per month on average refers to Divide(Count(ship_id), Multiply (24, Count(driver_id)))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among all shipments placed by Sunguard Window Tinting & Truck Accessories in 2017, identify the percentage of shipments whose weight exceeded 10,000 pounds. ""Sunguard Window Tinting & Truck Accessories"" is the cust_name; weight exceed 10,000 pounds refers to weight > = 10000; in 2017 refers to Cast(ship_date AS DATE) = 2017; percentage = Divide (Sum(weight > = 10000), Sum(weight)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among all shipments delivered by Sue Newel, identify the percentage of shipments that were placed by Autoware Inc. ""Autoware Inc"" is the cust_name; percentage = Divide (Count(ship_id where cust_name = 'Autoware Inc'), Count(ship_id)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many cities which belong to New Jersey have transported weight greater than 20000? ""New Jersey"" is the state; transported weight greater than 20000 refers to Sum(weight) > 20000"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many cities whose polulation is larger than 50000 pounds have shipment in 2017? population is larger than 50000 refers to population > 50000"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: State the weight of shipments transported by Peterbilt. ""Peterbilt"" is the make"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the model year of the truck used in shipment id 1003? shipment id 1003 refers to ship_id = 1003"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the brand of truck used in shipment id 1011? shipment id 1011 refers to ship_id = 1011; brand of truck refers to make"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the first name of the driver who transported shipment id 1028? shipment id 1028 refers to ship_id = 1028"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List out the state of driver who transported the shipment id 1055. shipment id 1055 refers to ship_id = 1055"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: State the address of drivers who transported the shipment with weight greater than 50000 pounds. shipment with weight greater than 50000 pounds refers to Sum(weight) > 50000"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Give the full name of driver who transported the items on 3/2/2016. on 3/2/2016 refers to ship_date = '2016-02-03'; full name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the average annual revenue of customers who have shipment weight of less than 65000 pounds? weight of less than 65000 pounds refers to weight < 65000; average annual revenue refers to AVG(annual_revenue)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the percentage of wholesaler customers who have shipment weight of not greater than 70000 pounds? ""wholesaler"" is the cust_type; weight of not greater than 70000 pounds refers to weight < 70000; percentage = Divide (Count(cust_id where weight < 70000), Count(cust_id)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the last name of driver who transported shipment id 1088? shipment id 1088 refers to ship_id = 1088"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Give the phone of drivers who transported shipment weight of greater than 20000 pounds. shipment weight of greater than 20000 pounds refers to Sum(weight) > 20000"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the brand and model of truck used in shipment id 1055? shipment id 1055 refers to ship_id = 1055; brand refers to make; model refers to model_year"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many trucks were manufactured in year 2009? manufactured in year 2009 refers to model_year = 2009"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many customers are manufacturer? ""manufacturer"" is the cust_type"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many customers who live in California that are retailers? ""retailer"" is the cust_type; live in California refers to state = 'CA'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many cities are in Connecticut? ""Connecticut"" is the state"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the most populated city in California? in California refers to state = 'CA'; most populated city refers to Max(population)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the annual revenue of Klett & Sons Repair? ""Klett & Sons Repair"" is the cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Who is the driver that transported the lightest weight of shipment? Provide the full name of the driver. lightest weight refers to Min(weight); full name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were shipped to customers living in California in year 2016? living in California refers to state = 'CA'; in year 2016 refers to CAST(ship_date AS DATE) = 2016"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the brand of the truck that is used to ship by Zachery Hicks? brand of truck refers to make"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List all the name of the customers that received a shipment in February 2017. shipment in February 2017 refers to ship_date LIKE '2017-02-%'; name of customer refers to cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Provide the brand of the truck and the name of the driver that transported goods in Klett & Sons Repair. ""Klett & Sons Repair"" is the cust_name; brand of truck refers to make; name of driver refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the shipment ID of the heaviest shipment that Zachery Hicks transported? shipment ID refers to ship_id; heaviest shipment refers to Max(weight)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments did Zachery Hicks transport goods to New York in the year 2016? ""New York"" is the city_name; in 2016 refers to CAST(ship_date AS DATE) = 2016"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Which headquarter's truck has the highest shipments in year 2016? in 2016 refers to CAST(ship_date AS DATE) = 2016; make = 'Peterbilt' means headquarter is 'Texas (TX)', make = 'Mack' means headquarter is 'North Carolina (NC)', make = 'Kenworth' means headquarter is 'Washington (WA)'; highest shipment refers to MAX(COUNT(ship_id))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were shipped to the least populated city in California? ""California"" is the state; least populated city refers to Min(population)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: In which city did the heaviest shipment transported? heaviest shipment refers to Max(weight); city refers to city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List all the cities where Zachery Hicks transported goods. city refers to city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Calculate the average number of shipments that Zachery Hicks shipped in year 2017. in year 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count(ship_id where first_name = 'Zachery' AND last_name = 'Hicks'), Count(ship_id)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Calculate the percentage of the weight of goods being transported by Zachery Hicks to California in year 2016. ""California"" is the state; in 2016 refers to CAST (ship_date AS DATE) = 2016; percentage = Divide (Sum(weight where first_name = 'Zachery' AND last_name = 'Hicks'), Sum(weight)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were shipped by the driver named Zachary Hicks?"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the ship ID of shipments shipped to the city with the largest area? city with largest area refers to Max(area)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List the drivers who shipped the shipments to the least populated city. least populated city refers to Min(population); name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the shipments shipped to Cicero, Illinois, how many shipments weighed between 9,000 to 15,000? ""Cicero"" is the city; 'Illinois' is the state"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What model year of truck delivered the ship ID 1233?"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the address of the driver that delivers the shipment for the customer lives at 7052 Carroll Road, San Diego, California? ""7052 Carroll Road"" is the address of customer; 'San Diego' is the city; 'California' is the state"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the shipments delivered by Maria Craft, how many shipments were delivered in 2017? delivered in 2017 refers to Cast(ship_date AS DATE) = 2017"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the truck's model year used to ship the ship ID 1245?"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Where does the driver of ship ID 1127 live? live refers to address"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Give the annual revenue of the customer of ship ID 1047."
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the weight of the shipment delivered by Andrea Simons on March 7, 2016? on March 7, 2016 refers to ship_date = '2016-03-07'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Provide the destination city of the shipment shipped by January 16, 2017. January 16, 2017 refers to ship_date = '2017-01-16'; city refers to city_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: How many shipments were delivered to a customer from New York? ""New York"" refers to state = 'NY'"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the name of the customer of ship ID 1147? name of customer refers to cust_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List the ship ID of shipments shipped to the most populated city. most populated city refers to Max(population)"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List the driver's name of the shipment shipped on February 22, 2016. on February 22, 2016 refers to ship_date = '2016-02-22'; driver's name refers to first_name, last_name"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List the weight of the customer's shipment with annual revenue of 39448581."
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: What is the customer's address for the shipment with ship ID 1117?"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017? ""Texas"" refers to state = 'TX'; shipped in 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count (ship_id where CAST(ship_date AS DATE) = 2017), Count (ship_id)) * 100"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: Calculate the difference between the number of shipments shipped by the truck with the model year 2005 and model year 2006. ""2005"" and ""2006"" are both model_year of truck; difference = Subtract (Count (ship_id where model_year = 2005), Count(ship_id where model_year = 2006))"
shipping,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE city (
city_id integer,
city_name text,
state text,
population integer,
area real,
PRIMARY KEY (city_id),
);
CREATE TABLE customer (
cust_id integer,
cust_name text,
annual_revenue integer,
cust_type text,
address text,
city text,
state text,
zip real,
phone text,
PRIMARY KEY (cust_id),
);
CREATE TABLE driver (
driver_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip_code integer,
phone text,
PRIMARY KEY (driver_id),
);
CREATE TABLE truck (
truck_id integer,
make text,
model_year integer,
PRIMARY KEY (truck_id),
);
CREATE TABLE shipment (
ship_id integer,
cust_id integer,
weight real,
truck_id integer,
driver_id integer,
city_id integer,
ship_date text,
PRIMARY KEY (ship_id),
FOREIGN KEY (cust_id) REFERENCES customer(cust_id),
FOREIGN KEY (truck_id) REFERENCES truck(truck_id),
FOREIGN KEY (driver_id) REFERENCES driver(driver_id),
FOREIGN KEY (city_id) REFERENCES city(city_id),
);
---------------------
QUESTION: List the driver's name of the shipment with a weight greater than 95% of the average weight of all shipments. weight greater than 95% of average weight refers to weight > Multiply (AVG(weight), 0.95); driver name refers to first_name, last_name"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Name the longest Catalan language Wikipedia page title and state the number of different words in this page. longest title refers to max(length(title))"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List all the Catalan language wikipedia page title with less than 10 number of different words in these pages. less than 10 number of different words refers to words < 10"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List the page number for Catalan language wikipedia pages containing the word 'Art' in the page title. containing the word 'Art' refers to title LIKE '% Art %'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the title of Catalan language wikipedia page with revision page id '16203226'? revision page id '16203226' refers to revision = 16203226"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List the titles for all Catalan language wikipedia page from revision page id 106600 to 106700. from revision page id 106600 to 106700 refers to revision BETWEEN 106600 AND 106700"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many Catalan language wikipedia pages have between 1000 to 2000 number of different words? between 1000 to 2000 number of different words refers to words BETWEEN 1000 AND 2000"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List the page id of wikipedia about Catalan language which have the appearance of the word 'decimal'? have the appearance of 'decimal' refers to word = 'decimal'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word has the most occurrences within the same page of wikipedia about Catalan language? most occurrences refers to max(occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List all the first words of the biwords pair where the second word is 'antic'. first words refer to w1st.word; second word is 'antic' refers to w2nd.word = 'antic'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Show all the title of pages and number of occurences for each page where the word 'quipu' appears. word 'quipu' appears refers to word = 'quipu'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the average number of the word occurrences in which ‘system’ appeared as the first word in the pair. average word occurrences = divide(sum(occurrences), count(occurrences)); ‘system’ appeared as the first word refers to w1st = 'system'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the total pages of Wikipedia in Catalan language? total pages refers to sum(pages); Catalan language refers to lang = 'ca'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: In the Catalan language, which biwords pair appeared the most in this language/page? biwords pair refers to w1st.word w2nd.word; appeared the most refers to max(occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the word id of the catalan language that was repeated no more than 10 times in the said language? word id refers to wid; repeated no more than 10 times refers to occurrences < = 10"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the title of the Catalan language Wikipedia page that has the highest number of different words? highest number of different words refers to max(words)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the wikipedia page id of Arqueozoologia? page id refers to pid; Arqueozoologia refers to title = 'Arqueozoologia'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: In Abadia, what is the word id of the of the Catalan language that appeared the highest amount of times? Indicate the how many times did they said word id appeared. Abadia refers to title = 'Abadia'; word id refers to wid; the highest amount of times refers to max(occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What are the titles of the top 5 Catalan language Wikipedia page with the least number of different words? Indicate each title's word id that has appeared the most in the said pages. least number of different words refers to min(words); word id refers to wid; appeared the most refers to max(occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times did the word pair ""i"" and ""a"" appeared in the Cataln language/page? times appeared refers to occurrences; word pair ""i"" and ""a"" refers to w1st.word = 'i' w2st.word = 'a'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What are the word pairs that occured only twice? word pair refers to w1st.word w2nd.word; occured only twice refers to occurrences = 2"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the word pair that occured the highest amount of times in Addicio? Indicate how many times such word pair occured. word pair refers to w1st.word w2nd.word; occurred the highest amount of times refers to max(occurrences); Addicio refers to title = 'Addicio'; times occurred refer to occurrences"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the total word of title ""Adam"" and ""Acampada""? total word refers to sum(words); title ""Adam"" and ""Acampada"" refers to title IN('Adam','Acampada')"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the revision page ID of title ""Aigua dolÃ§a""? title ""Aigua dolÃ§a"" refers to title LIKE 'Aigua dolÃ§a%'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the title of corpus with most words? most words refers to max(words)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the average words of the 10 fewest words title? average words = avg(words); 10 fewest words refers to words > = 10"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Among the title with single digit word count, list down 5 revision page ID of these titles. single digit word count refers to words < 10"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List down the page id of titles start with alphabet ""b"". start with alphabet ""b"" refers to title LIKE 'b%'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the title of corpus where word ""desena"" appear? This is not"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the word id for title ""Sometent""? word id refers to wid"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Is word id ""88"" the word id for title ""Animals""? word id ""88"" refers to wid = 88"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What are the occurance of word ""del"" in title ""Any anomalÃ­stic""? This is not"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: State one biword pair with occurence of 4. biword pair refers to w1st.word w2nd.word; occurrence of 4 refers to occurrences = 4"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What are the total occurence of words that paired with ""nombre""? total occurrence refers to sum(occurrences); paired with ""nombre"" refers to w1st.word = ""nombre"" or w2nd.word = ""nombre"""
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What are the words that were paired with ""John"", list down 10 of them. pair with ""John"" refers to w1st.word = ""John"" or w2nd.word = ""John"""
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List down the revision page id of titles where ""fresc"" appears. page id refers to pid; ""fresc"" refers to word = 'fresc'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List down the words with word id from 1 to 10 and write down a paired word for each of them. word id from 1 to 10 refers to wid BETWEEN 1 AND 10"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: For corpus title ""Atomium"", pick 3 words appear in the title and calculate the total occurence of these words. total occurrences refers to sum(occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Indicate which is the word that is repeated the most times. repeated the most times refer to MAX(occurrences);"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Indicate the page id of Wikipedia about Catalan language of all the pages that have a numeric value in their title. the page id of Wikipedia refers to pid; numeric value contains only numbers, LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the title of the page that has the fewest words? has the fewest words refers to MIN(COUNT(words));"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the pair of words that is repeated the most times? Identify them by their ID. repeated the most times refer to MAX(occurrences); pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many total occurrences are there in the three-letter words? three-letter words are words composed of exactly three letters;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the average number of different words that appear on all pages whose title begins with A. DIVIDE(SUM(words WHERE title = 'A%'), COUNT(words WHERE title = 'A%')) as percentage; A is a letter;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the average number of repetitions in the pairs of words in which the first word id is number 34. Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the first word id number 34 refers to w1st = 34; repetition refers to occurrences or times this pair appears; DIVIDE(SUM(occurrences where w1st = 34), COUNT(occurrences where w1st = 34));"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the percentage of pages that have 1500 different words. DIVIDE(COUNT(pages WHERE words = 1500), COUNT(pages)) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the percentage of times that the same word appears in a pair. Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the same word appears in a pair refers to w1st = w2nd; times refers to occurrences; DIVIDE(COUNT(occurrences where w1st = w2nd), COUNT(occurrences)) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Indicate the title of all the pages in which the word comunitat appears. This is not;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Indicate on how many different pages the word ripoll appears. This is not;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many words are repeated on the Llista de conflictes armats page? title = 'Llista de conflictes armats'; How many repeated refers to occurrences;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Indicate if there is any pair formed by the words fukunaga and d'egees. Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;  w1st = word = 'fukunaga' or w2nd = word = 'fukunaga'; w1st = word = 'd'egees'or w2nd = word = 'd'egees';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the average of repetitions in the pages that have a total of 100 different words. Repetition refers to occurrences; 100 different words refers to words = 100; DIVIDE(SUM(occurrences where words = 100), COUNT(page where words = 100)) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which Wikipedia page number does the Catalan language's name, Acampada, appear on? Wikipedia page number refers to page; title = 'Acampada';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list any three Wikipedia pages with more than 300 words. more than 300 words refers to words > 300;  list any three means limit 3; Wikipedia pages refers to page;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times did the word number 8 appear? word number 8 refers to wid = 8; How many times refer to occurrences;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the top three most frequently occurring words and their ids. most frequently occurring words refer to MAX(occurrences); id refers to wid;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How frequently did the words 1 and 25 appear together? How frequently refers to occurrences;  word 1 refers to wid = 1; word 25 refers to wid = 25; appear together means pair, which is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;  w1st or w2nd = wid = 1; w1st or w2nd = wid = 25;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What number of words are there on revision page 27457362? This is not;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the percentage of words in the Catalan language that have a repetition of more than 16,000 times? words in the Catalan language refers lid = 1; repetition of more than 16,000 times refers to occurrences > 16000; DIVIDE(COUNT(words where lid = 1 and occurrences > 16000), COUNT(words where lid = 1)) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which Wikipedia page number has the highest number of words in the Catalan language? Wikipedia page number refers to page;  the highest number of words in the Catalan language refers to MAX(lid = 1);"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What proportion of a pair of words in the Catalan language have been repeated less than 80 times? Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; in the Catalan language refers to lid; repeated less than 80 times refers to occurrences < 80; DIVIDE(COUNT(lid where occurrences < 80), COUNT(lid)) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many Catalan-language Wikipedia pages are there overall? Catalan-language refers to lang = 'ca';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list any three Wikipedia pages that are written in Catalan, together with their titles and revision page numbers. in Catalan means in Catalan-language and refers to lid = 1; revision page numbers refer to revision;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the language of the pair of words numbered 1 and 616? Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 616;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times does the Catalan word ""nombre"" repeat itself? the Catalan means Catalan language and refers to lid = 1; How many times repeat refers to occurrences;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the second word in the pair of words number 1 and 8968? Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 8968;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word has the most repetitions in the Catalan language? the most repetitions refer to MAX(occurrences); Catalan language refers to lid = 1;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times on page number 44 does the word ""votives"" appear? How many times refers to occurrences; page number 44 refers to pid = 44;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times on page number 16 does the second word in the pair of words 1 and 109 appear? How many times appear refer to occurrences; page number 16 refers to pid = 16; Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 109;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the percentage of the words that have been repeated under 180 times in the Catalan language? repeated under 180 times refers to occurrences < 180; Catalan language refers to lang = 'ca'; DIVIDE(COUNT(words WHERE occurrences < 180 and lang = 'ca'), COUNT(words WHERE lang = 'ca')) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What percentage of Catalan-language Wikipedia pages have more than 10,000 words? Catalan-language refers to lang = 'ca'; more than 10,000 words refer to words > 10000; DIVIDE(COUNT(pages WHERE words > 10000 and lang = 'ca'), COUNT(pages WHERE lang = 'ca')) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times the word ""desena"" occurs? How many times occurs refers to occurrences;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many words has the appearance times greater than 10? appearance times greater than 10 refers to occurrences > 10;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List out the total pages of Wikipedia in Catalan language. This is not;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many words have repetitions greater than 2000 and lower than 5000? repetitions greater than 2000 and lower than 5000 refer to occurrences between 2000 and 5000;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List out the title of Catalan language Wikipedia page that has wikipedia revision page id as 106601. Wikipedia revision page id as 106601 refers to revision = 106601;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: State the Wikipedia page title that has revision page id of 28040864. revision page id of 28040864 refers to revision = 28040864;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times that the word pair of ""barcelona"" and ""precolombina"" occur? Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st or w2nd = 'barcelona'; w1st or w2nd = 'precolombina';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the locale of the language of the page titled ""Anys 90""? page titled ""Anys 90"" refers to title = 'Anys 90';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word that has 71303 appearance in the Catalan language? has 71303 appearance refers to occurrences = 71303;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the locale of the language of the page titled ""Abril""? the page titled ""Abril"" refers to title = 'Abril';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the total number of words in page containing pair of word id ""100"" and ""317""? Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 100; w2nd = 317;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: State the total pages of the words that has repeated times of 2593. repeated times of 2593 refers to occurrences = 2593;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List out the title of the word have id less than 20. word have id less than 20 refers to wid < 20;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many word that has number of different words equal to 3? This is not;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many word appeared 8 times? State the language id of the page. appeared 8 times refers to occurrences = 8;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Calculate the average percentage of word appearance in the page that have revision page id smaller than 106680. revision page id smaller than 106680 refers to revision < 106680; word appearance refers to occurrences; DIVIDE(SUM(occurrences where revision < 106680), COUNT(occurrences)) as percentage;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: List out the total pages of the words that has repeated times more than 3000. repeated more than 3000 times refers to occurrences > 3000;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: State the name of the pair of word that have id of 20 and 50? word that have id of 20 refers to wid = 20; word that have id of 50 refers to wid = 50;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many pages of Wikipedia are there in total on the Catalan language? Catalan language refers to lang = 'ca';"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the titles of the Wikipedia pages on the Catalan language with more than 4000 words. Catalan language refers to lid = 1; more than 4000 words refers to words > 4000;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many words are there on the page titled ""Asclepi""? page titled ""Asclepi"" refers to title = 'Asclepi' ;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which of these pages have more words, the page titled ""Afluent"" or ""Asclepi""? COUNT(words where title = 'Afluent')> COUNT(words where title = 'Asclepi')"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the occurrence of the word ""nombre""? This is not;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the Catalan words with an occurrence of over 200000. occurrence of over 200000 refers to occurrences > 200000;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the locale of the language of the page titled ""Asclepi""? page titled ""Asclepi"" refers to title = 'Asclepi' ;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times did the word ""grec"" occur on the page titled ""Àbac""? how many times occur refers to occurrences; page titled ""Àbac"" refers to title = 'Àbac' ;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the title of the pages on which the word ""grec"" occurred for over 20 times. occurred for over 20 times refers to occurrences > 20;"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many words are there on the page that the word ""grec"" has occurred for 52 times? the word ""grec"" refers to word = 'grec'; occurred for 52 times refers to occurrences = 52"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What's the occurrence of the biwords pair whose first word is ""àbac"" and second word is ""xinès""? àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; occurrence refers to occurrences"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which biwords pair has a higher occurrence, ""àbac-xinès"" or ""àbac-grec""? higher occurrence is MAX(occurrences); àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; grec refers to word = 'grec'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many more times does the first word in the biwords pair ""àbac-xinès"" occur than the biwords pair itself? àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; How many more times the first word in the biwords occur than the biwords pair itself means SUBTRACT(words.occurrence, biwords.occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list all the biwords pairs with ""àbac"" as its first word. àbac refers to word = 'àbac'; first word refers to w1st"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the total occurrence of the biwords pairs with ""àbac"" as its first word? occurrence refers to occurrences; àbac refers to word = 'àbac'; first word refers to w1st"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many Wikipedia pages are there on the language of the biwords pair ""àbac-xinès""? àbac refers to word = 'àbac'; xinès refers to word = 'xinès'; Wikipedia pages refer to pages"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How much higher in percentage does the word ""grec"" occur on the page titled ""Àbac"" than on the page titled ""Astronomia""? grec refers to word = 'grec'; Àbac refers to title = 'Àbac'; Astronomia refers to title = 'Astronomia'; percentage = DIVIDE(SUBTRACT(occurrences where title = 'Àbac' AND word = 'grec', occurrences where title = 'Astronomia' AND word = 'grec'), occurrences where title = 'Astronomia' AND word = 'grec')"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many pages does the Catalan language have in Wikipedia? Catalan language refers to lang = 'ca'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word has the most repetitions in the Catalan language? Give the ID of the word. word with the most repetitions refers to MAX(occurrences); ID of the word refers to wid"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the word ID for the second word for the biwords pair with most repetitions? second word refers to w2nd; biwords pair with most repetitions refers to MAX(biwords.occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many occurrences does the word ""panajot"" have? panajot refers to word = 'panajot'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word has the time of occurrences as 340691? occurrences of 340691 refers to occurrences = 340691"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: State the word ID for ""periodograma"". word ID refers to wid; periodograma refers to word = 'periodograma'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: For the biwords pair that appears ""116430"" times, what is the second word of the pair? the biwords pair that appears ""116430"" times refers to occurrences = 116430; second word of the pair refers to w2nd"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times does the word ""riu"" appears in the biwords pair? riu refers to word = 'riu'; SUM(w1st where wid is word = 'riu' AND w2nd where wid is word = 'riu')"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word has the most appearances in the Wikipedia page with the title of ""Agricultura""? Give the word ID. Agricultura refers to title = 'Agricultura'; the most appearances is MAX(pages_words_sampling.occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many appearances does the word ID No. 2823 have in the Wikipedia page ""Astre""? Astre refers to title = 'Astre'; word ID No. 2823 refers to wid = 2823; appearances refers to pages_words_sampling.occurrences"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: In which Wikipedia page does the word ID No. 174 have the most appearances? Give the title. word ID No. 174 refers to wid = 174; appearances refers to pages_words_sampling.occurrences"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times does the word ""heròdot"" appear in the Wikipedia page? heròdot refers to word = 'heròdot'; times appear refers to SUM(pid)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word has the most appearances in the Wikipedia page revision ID No. 28278070? Give the word ID. the most appearances refers to MAX(occurrences); revision ID No. 28278070 refers to revision = 28278070; word ID refers to wid"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times does the biwords ""que gregorio"" appear in the language? que gregorio refers to w1st = wid where word = 'que' AND w2nd = wid where word = 'gregorio'; appear refers to biwords.occurrences"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many biword pairs contain the word ""base"" as the second word? base refers to word = 'base'; SUM(w2nd) where w2nd = wid for word = 'base'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times of repetition does the word ""exemple"" show in the Catalan language? exemple refers to word = 'exemple'; repetition refers to langs_words.occurrences; lid = 1 menas it's Catalan language"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Which word that has 274499 repetitions in the Catalan language? lid = 1 menas it's Catalan language; 274499 repetitions refers to occurrences = 274499"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many times greater is the appearances of the biword pair ""a base"" than ""a decimal""? a, base AND decimal are words; wid is the ID of word; w1st is the first word of a biword pair; w2nd is the second word of a biword pair; appearances refers to biwords.occurrences; biword pair 'a base' refers to word = 'a' as w1st AND word = 'base' as w2nd; biword pair 'a decimal' refers to word = 'a' as w1st AND word = 'decimal' as w2nd; appearances of 'a base' greater than 'a decimal' refers to DIVIDE(SUBTRACT(biwords.occurrences'a base', biwords.occurrences'a decimal'), biwords.occurrences'a decimal')"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: For the word ""grec"", what is the percentage of the appearances in the ""Art"" Wikipedia page have among all the appearances? grec refers to word = 'grec'; Art refers to title = 'Art'; percentage is DIVIDE(occurrences(grec), occurences(Art))*100"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many Wikipedia pages with over 4000 different words are there on the Catalan language? lid = 1 means it's Catalan language; over 4000 different words means words > 4000; Wikipedia pages refers to pid"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the titles of all the Wikipedia pages on the Catalan language with 10 different words. lid = 1 means it's Catalan language; 10 different words refers to words = 10; titles refers to title"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the word that occurs the most in the Catalan language? MAX(occurrences)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the titles of the top 3 Wikipedia pages with the most different words on the Catalan language. lid = 1 means it's Catalan language; with most different words refers to MAX(words)"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the revision ID for the page on Catalan titled ""Arqueologia""? lid = 1 means it's Catalan language; Arqueologia refers to title = 'Arqueologia'; revision ID refers to revision"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Among the wikipedia pages on Catalan with more than 300 different words, how many of them have a revision ID of over 28330000? lid = 1 means it's Catalan language; more than 300 different words refers to words > 300; revision ID of over 28330000 refers to revision > 28330000"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Please list the page IDs of all the Wikipedia pages that have the word ""nombre"" appeared on it. nombre refers to word = 'nombre'; page IDs refers to pid"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many Wikipedia pages on Catalan are there with the word ""nombre"" appearing for more than 5 times? nombre refers to word = 'nombre'; appear for more than 5 times refers to  pages_words.occurrences > 5"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: How many biwords pairs are there whose second word is ""grec""? grec refers to word = 'grec'; wid where word = 'grec' AS w2nd"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the title of the page on which the word ""grec"" has an occurrence of 52 times. occurrence of 52 times refers to pages_words.occurrences = 52; grec refers to word = 'grec'"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: Among the biwords pairs with ""àbac"" as its first word, how many of them have an occurrence of over 10? àbac refers to word = 'àbac'; as first word refers to w1st; occurrence of over 10 refers to occurrences > 10"
language_corpus,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE langs (
lid integer,
lang text,
locale text,
pages integer,
words integer,
PRIMARY KEY (lid),
);
CREATE TABLE pages (
pid integer,
lid integer,
page integer,
revision integer,
title text,
words integer,
PRIMARY KEY (pid),
FOREIGN KEY (lid) REFERENCES langs(lid),
);
CREATE TABLE words (
wid integer,
word text,
occurrences integer,
PRIMARY KEY (wid),
);
CREATE TABLE langs_words (
lid integer,
wid integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE pages_words (
pid integer,
wid integer,
occurrences integer,
FOREIGN KEY (pid) REFERENCES pages(pid),
FOREIGN KEY (wid) REFERENCES words(wid),
);
CREATE TABLE biwords (
lid integer,
w1st integer,
w2nd integer,
occurrences integer,
FOREIGN KEY (lid) REFERENCES langs(lid),
FOREIGN KEY (w1st) REFERENCES words(wid),
FOREIGN KEY (w2nd) REFERENCES words(wid),
);
---------------------
QUESTION: What is the average occurrence of the word ""grec"" on each Wikipedia page that has this word? grec refers to word = 'grec'; AVG(occurrences where word = 'grec')"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights were there on 2018/8/1? on 2018/8/1 refers to FL_DATE = '2018/8/1';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights on 2018/8/1, how many of them departed from an airport in New York? on 2018/8/1 refers to FL_DATE = '2018/8/1'; departed from an airport in New York refers to ORIGIN = 'JFK';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Please list the destination cities of all the flights that were cancelled on 2018/8/1. destination cities refers to DEST; cancelled refers to CANCELLED = 1; on 2018/8/1 refers to FL_DATE = '2018/8/1';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Please list the dates of the flights that were cancelled due to the most serious reason. dates of the flights refers to FL_DATE; cancelled refers to CANCELLED = 1; most serious reason refers to CANCELLATION_CODE = 'A';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Please list the departure airports of the flights on 2018/8/1 that were delayed. departure airports refers ORIGIN; on 2018/8/1 refers to FL_DATE = '2018/8/1'; delayed refers to DEP_DELAY > 0;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York? on 2018/8/1 refers to FL_DATE = '2018/8/1'; depart from refers to ORIGIN; John F. Kennedy International in New York refers to Description = 'New York, NY: John F. Kennedy International';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: For the flight on 2018/8/1 that was delayed for the longest time, which was the destination airport of this flight? on 2018/8/1 refers to FL_DATE = '2018/8/1';  delayed for the longest time refers to MAX(DEP_DELAY); destination airport refers to DEST;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights departing from John F. Kennedy International, how many of them arrived earlier than scheduled? departing from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; arrived earlier than scheduled refers to ARR_DELAY < 0;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among all the flights scheduled to depart from John F. Kennedy International on 2018/8/1, when was the earliest one scheduled to depart? depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; earliest one scheduled to depart refers to MIN(DEP_TIME);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights on 2018/8/1 were operated by American Airlines Inc.? on 2018/8/1 refers to FL_DATE = '2018/8/1'; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Please list the flight numbers of all the flights operated by American Airlines Inc. that were scheduled to depart from John F. Kennedy International. flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights operated by American Airlines Inc. on 2018/8/1 were faster than scheduled? American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure? flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; longest delay in departure refers to MAX(DEP_DELAY);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights operated by American Airlines Inc., how many of them were scheduled to land in New York? American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; land in New York refers to DEST = 'JFK';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights operated by American Airlines Inc. on 2018/8/1, how many of them were cancelled? American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; cancelled refers to CANCELLED = 1;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Which airline operated more flights on 2018/8/1, American Airlines Inc. or Endeavor Air Inc.? SUM(Description = 'American Airlines Inc.: AA') > SUM(Description = 'Endeavor Air Inc.: 9E') means American Airlines Inc. operated more flights than  Endeavor Air Inc; SUM(Description = 'American Airlines Inc.: AA') < SUM(Description = 'Endeavor Air Inc.: 9E') means Endeavor Air Inc. operated more flights than American Airlines Inc.; on 2018/8/1 refers to FL_DATE = '2018/8/1';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the average departure delay time of flights operated by American Airlines Inc.? average departure delay time = DIVIDE(SUM(DEP_DELAY), COUNT(Code)); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights on average does American Airlines Inc. operate every day in August, 2018? flights on average = DIVIDE(COUNT(Code), 31); American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; every day in August, 2018 refers to FL_DATE like '2018/8%';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the number of air carriers in the database?"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Give the number of planes that took off from Los Angeles International airport on 2018/8/27. took off from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; on 2018/8/27 refers to FL_DATE = '2018/8/27';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the number of airplanes that landed on Oakland Airport on 2018/8/7. landed on refers to DEST; Oakland Airport refers to Description which contains 'Oakland'; on 2018/8/7 refers to FL_DATE = '2018/8/7';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights of Alaska Airlines were delayed on 2018/8/2? Alaska Airlines refers to Description = 'Alaska Airlines Inc.: AS'; delayed refers to DEP_DELAY > 0; on 2018/8/2 refers to FL_DATE = '2018/8/2';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Tell the number of fights landed earlier on Miami Airport on 2018/8/12. landed on refers to DEST; landed earlier refers to ARR_DELAY < 0; Miami Airport refers to DEST = 'MIA'; on 2018/8/12 refers to FL_DATE = '2018/8/12';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights from American Airlines were cancelled due to a type A cancellation code? American Airlines refers to Description = 'American Airlines Inc.: AA'; cancelled refers to Cancelled = 1; cancelled due to type A cancellation code refers to CANCELLATION_CODE = 'A';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights of Endeavor Air Inc. were faster than scheduled on 2018/8/31? Endeavor Air Inc. refers to Description = 'Endeavor Air Inc.: 9E'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME; on 2018/8/31 refers to FL_DATE = '2018/8/31';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many planes of Spirit Air Lines took off on 2018/8/7? Spirit Air Lines refers to Description = 'Spirit Air Lines: NK'; on 2018/8/7 refers to FL_DATE = '2018/8/7';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: For the flight with the tail number 'N702SK', which air carrier does it belong to? tail number refers to TAIL_NUM; TAIL_NUM = 'N702SK';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the name of the airport which landed the most number of flights on 2018/8/15. name of the airport refers to Description; airport that landed the most number of flights refers to MAX(COUNT(DEST)); on 2018/8/15 refers to FL_DATE = '2018/8/15';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: For the flight from ATL to PHL on 2018/8/1 that scheduled local departure time as ""2040"", which air carrier does this flight belong to? flight from ATL refers to ORIGIN = 'ATL'; flight to PHL refers to DEST = 'PHL'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; local departure time refers to CRS_DEP_TIME; CRS_DEP_TIME = '2040';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Tell the number of flights that landed at Lake Charles Regional Airport on 2018/8/15. landed at refers to DEST; Lake Charles Regional Airport refers to Description = 'Lake Charles, LA: Lake Charles Regional'; on 2018/8/15 refers to FL_DATE = '2018/8/15';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018? flights from refers to ORIGIN; San Diego International airport refers to Description = 'San Diego, CA: San Diego International'; flights to refers to DEST; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; in the August of 2018 refers to FL_DATE like '2018/8%';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the percentage of flights from Los Angeles International airport that were cancelled due to a type C cancellation code? percentage = MULTIPLY(DIVIDE(SUM(CANCELLATION_CODE = 'C'), COUNT(Code)), 100); flights from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; cancelled refers to Cancelled = 1; cancelled due to a type C cancellation code refers to CANCELLATION_CODE = 'C';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the percentage of flights which landed at Pittsburgh were faster than scheduled? percentage = MULTIPLY(DIVIDE(SUM(ACTUAL_ELAPSED_TIME < T2.CRS_ELAPSED_TIME), COUNT(Code)), 100); landed at refers to DEST; Pittsburgh refers to Description which contains 'Pittsburgh'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the description of the airline code 19049?"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights departed on time on 8/1/2018? departed on time refers to DEP_DELAY < = 0; on 8/1/2018 refers to FL_DATE = '2018/8/1';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What are the codes of the airport found in Ankara, Turkey? airport found in Ankara, Turkey refers to Description like '%Ankara, Turkey%';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How long was the longest minute delay caused by a weather problem in airport id 12264? longest minute delay caused by a weather problem refers to MAX(WEATHER_DELAY); airport id refers to ORIGIN_AIRPORT_ID; ORIGIN_AIRPORT_ID = 12264;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the IATA code of the Anita Bay Airport in Anita Bay, Alaska? IATA code refers to Code; Anita Bay Airport in Anita Bay, Alaska refers to Description = 'Anita Bay, AK: Anita Bay Airport';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the origin airport id that recorded the longest delay due to a late aircraft? origin airport id refers to ORIGIN_AIRPORT_ID; longest delay due to a late aircraft refers to MAX(LATE_AIRCRAFT_DELAY);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights depart to Hartsfield-Jackson Atlanta International from Chicago O'Hare International? depart to refers to DEST; Hartsfield-Jackson Atlanta International refers to Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International'; depart from refers to ORIGIN; Chicago O'Hare International refes to Description = 'Chicago, IL: Chicago O'Hare International';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many planes does Southwest Airlines Co. have? planes refers to TAIL_NUM; Southwest Airlines Co. refers to Description = 'Southwest Airlines Co.: WN';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: On August 2018, which day had the highest number of cancelled flights due to the most serious reasons in Dallas/Fort Worth International? On August 2018 refers to FL_DATE like '2018/8%'; day with the highest number of cancelled flights refers to MAX(COUNT(FL_DATE WHERE CANCELLED = 1)); cancelled due to the most serious reasons refers to CANCELLATION_CODE = 'A'; in Dallas/Fort Worth International refers to Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the tail numbers of all the aircraft that arrived on time at Meadows Field airport in August of 2018? tail number refers to TAIL_NUM; arrived on time refers to ARR_DELAY < = 0; Meadows Field airport refers to Description = 'Bakersfield, CA: Meadows Field'; in August of 2018 refers to FL_DATE like '2018/8%';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the airports whose destination is Logan International, what is the airline id of the carrier operator with the highest delay in minutes due to security? destination refers to DEST; Logan International refers to Description = 'Boston, MA: Logan International'; airline id of the carrier operator refers to OP_CARRIER_AIRLINE_ID; highest delay in minutes due to security refers to MAX(SECURITY_DELAY);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What are the names of the top 5 airlines with the highest number of aircraft? names of the airlines refers to Description; highest number of aircraft refers to MAX(COUNT(TAIL_NUM));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the name of the airline with the highest number of non-cancelled flights? names of the airlines refers to Description; highest number of non-cancelled flights refers to MAX(COUNT(CANCELLED = 0));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Give the name of the airline to which tail number N202NN belongs to. name of the airline refers to Description; tail number refers to TAIL_NUM; TAIL_NUM = 'N202NN';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the name of the airline that flew the most flights to Chicago Midway International? name of the airline refers to Description; flights to refers to DEST; Chicago Midway International refers to Description = 'Chicago, IL: Chicago Midway International'; most flights to Chicago Midway International refers to MAX(COUNT(DEST WHERE Description = 'Chicago, IL: Chicago Midway International'));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the tail number of a Compass Airline's plane that flew the most number of flights from LAX to ABQ? tail number refers to TAIL_NUM; Compass Airline refers to Description = 'Compass Airlines: CP'; flew the most number of lights from LAX TO ABQ refers to MAX(COUNT(OP_CARRIER_AIRLINE_ID WHERE ORIGIN = 'LAX' and DEST = 'ABQ')); from LAX refers to ORIGIN = 'LAX'; to ABQ refers to DEST = 'ABQ';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Which airport did Republic Airline fly the most from? Republic Airline refers to Description = 'Republic Airline: YX'; fly the most from refers to MAX(COUNT(ORIGIN));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Which airline does the aircraft with the fastest flight belong to? fastest flight refers to MIN(SUBTRACT(ACTUAL_ELAPSED_TIME, CRS_ELAPSED_TIME));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many hours in total did all of the Delta Air Lines aircraft were delayed due to a late aircraft in August of 2018? Identify the plane number of the aircraft with the highest delayed hours. hours in total = DIVIDE(SUM(LATE_AIRCRAFT_DELAY), 60); Delta Air Lines refers to Description = 'Delta Air Lines Inc.: DL'; delayed due to a late aircraft refers to LATE_AIRCRAFT_DELAY; in August of 2018 refers to FL_DATE like '2018/8/%'; plane number refers to TAIL_NUM; highest delayed hours refers to MAX(DIVIDE(SUM(LATE_AIRCRAFT_DELAY),60));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Please list any three airports with their codes."
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the code of Mississippi Valley Airlines? Mississippi Valley Airlines refers to Description like 'Mississippi Valley Airlines%';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the scheduled local departure time and the actual departure time of the flight from Philadelphia to Harrisburg with the plane's tail number N627AE on the 13th of August 2018? scheduled local departure time refers to CRS_DEP_TIME; actual departure time refers to DEP_TIME; from Philadelphia refers to ORIGIN = 'PHL'; to Harrisburg refers to DEST = 'MDT'; tail number refers to TAIL_NUM; TAIL_NUM = 'N627AE'; on the 13th of August 2018 refers to FL_DATE = '2018/8/13';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights on the 1st of August 2018 were coming from Allentown, Pennsylvania? 1st of August 2018 refers to FL_DATE = '2018/8/1'; coming from Allentown, Pennsylvania refers to ORIGIN = 'ABE';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the only flight destination for flights from Albany? flight destination refers to DEST; from Albany refers to ORIGIN = 'ABY';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights from Dallas to Santa Ana departed on time? from Dallas refers to ORIGIN = 'DFW'; to Santa Ana refers to DEST = 'SNA'; departed on time refers to DEP_DELAY = 0;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights from Charlotte Douglas International Airport to Austin - Bergstrom International Airport experienced serious reasons that cause flight cancellation? from refers to ORIGIN; Charlotte Douglas International Airport refers to Description = 'Charlotte, NC: Charlotte Douglas International'; to refers to DEST; Austin - Bergstrom International Airport refers to Description = 'Austin, TX: Austin - Bergstrom International'; serious reasons refers to CANCELLATION_CODE = 'A';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Which flight carrier operator has the most cancelled flights? flight carrier operator refers to OP_CARRIER_AIRLINE_ID; most cancelled flights refers to MAX(COUNT(CANCELLED = 1));"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the actual departure time of JetBlue Airways with the plane's tail number N903JB to Fort Lauderdale-Hollywood International Airport on the 20th of August 2018? actual departure time refers to DEP_TIME; JetBlue Airways refers to Description like '%JetBlue Airways%'; tail number refers to TAIL_NUM; TAIL_NUM = 'N903JB'; to refers to DEST; Fort Lauderdale-Hollywood International Airport refers to Description like '%Fort Lauderdale-Hollywood%'; on the 20th of August 2018 refers to FL_DATE = '2018/8/20';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Which flight carrier operator flies from Atlantic City to Fort Lauderdale? flight carrier operator refers to OP_CARRIER_AIRLINE_ID; from Atlantic City refers to ORIGIN = 'ACY'; to Fort Lauderdale refers to DEST = 'FLL';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the airport description of the airport code A11?"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the total number of flights that have Oklahoma as their origin? Oklahoma as origin refers to Origin = 'OKC';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many airports have a code starting with the letter C? code starting with the letter C refers to Code like 'C%';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the destinations of flight number 1596. destination refers to DEST; flight number refers to OP_CARRIER_FL_NUM; OP_CARRIER_FL_NUM = 1596;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the description of the airports that have code that ends with number 3? code that ends with number 3 refers to Code like '%3';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Give the code of the airport described as Driftwood Bay, AK: Driftwood Bay Airport. Driftwood Bay, AK: Driftwood Bay Airport refers to Description = 'Driftwood Bay, AK: Driftwood Bay Airport';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many cancelled flights are there? cancelled flights refers to CANCELLED = 1;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the tail number of flights that flew on August 17, 2018. tail number refers to TAIL_NUM; on August 17, 2018 refers to FL_DATE = '2018/8/17';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the origin of the flight that has the shortest actual elapsed time. shortest actual elapsed time refers to MIN(ACTUAL_ELAPSED_TIME);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the date and tail number of flight with air carrier ""Ross Aviation Inc.: GWE"". date of flight refers to FL_DATE; tail number of flight refers to TAIL_NUM; Ross Aviation Inc.: GWE refers to Description = 'Ross Aviation Inc.: GWE';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the air carrier description and code of the flight with the shortest arrival time. shortest arrival time refers to MIN(ARR_TIME);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: How many flights of air carrier called JetBlue Airways: B6 have 0 new arrival delay? JetBlue Airways refers to Description = '%JetBlue Airway%'; 0 new arrival delay refers to ARR_DELAY_NEW = 0;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the air carrier description of all flights arriving at Miami. arriving at Miami refers to DEST = 'MIA';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the air carrier's description of the cancelled flights? cancelled flights refers to CANCELLED = 1;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Give the actual elapsed time of the flights with air carrier named Semo Aviation Inc.: SEM. actual elapsed time refers to ACTUAL_ELAPSED_TIME; Semo Aviation Inc.: SEM. Refers to Description = 'Semo Aviation Inc.: SEM';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights with air carrier described as Asap Air Inc.: ASP, what is the tail number of the flight with the longest departure delay? Asap Air Inc.: ASP refers to Description = 'Asap Air Inc.: ASP'; tail number refers to TAIL_NUM; longest departure delay refers to MAX(DEP_DELAY);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the air carrier's description of the flights with 0 departure delay. 0 departure delay refers to DEP_DELAY = 0;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the air carrier description of the flight with the highest actual elapsed time. highest actual elapsed time refers to MAX(ACTUAL_ELAPSED_TIME);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What are the destinations of the flights with air carrier description ""Southeast Alaska Airlines: WEB""? destinations refers to DEST; Southeast Alaska Airlines: WEB refers to Description = 'Southeast Alaska Airlines: WEB';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: From August 10 to August 20, 2018, how many cancelled flights of air carrier named Spirit Air Lines: NK are there? From August 10 to August 20, 2018 refers to FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'; cancelled flights refers to CANCELLED = 1; Trans Southern Airways: 'Spirit Air Lines: NK' refers to Description = 'Spirit Air Lines: NK';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the total number of flights that flew on August 2, 2018 with air carrier described as Horizon Air? on August 2, 2018 refers to FL_DATE = '2018/8/2'; Horizon Air refers to Description which includs 'Horizon Air';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What is the tail number of the flight with air carrier named Iscargo Hf: ICQ and arrival time of 1000 and below? tail number refers to TAIL_NUM; Iscargo Hf: ICQ refers to Description = 'Iscargo Hf: ICQ'; arrival time of 1000 and below refers to ARR_TIME < = 1000;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the flight date of flights with air carrier described as Profit Airlines Inc.: XBH which have an actual elapsed time below 100. flight date refers to FL_DATE; Profit Airlines Inc.: XBH refers to Description = 'Profit Airlines Inc.: XBH'; actual elapsed time below 100 refers to ACTUAL_ELAPSED_TIME < 100;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights with air carrier named Republic Airline, how many of the flights have departure delay of 30 minutes and above? Republic Airline refers to Description which contains 'Republic Airline'; departure delay of 30 minutes and above refers to DEP_DELAY > 30;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: What are the air carriers of the flights that flew on August 25, 2018 that have departure delay of -5? on August 25, 2018 refers to FL_DATE = '2018/8/25'; departure delay of -5 refers to DEP_DELAY = -5;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Provide the air carrier description of the flight with a tail number N922US from Phoenix. tail number refers to TAIL_NUM; TAIL_NUM = 'N922US'; from Phoenix refers to ORIGIN = 'PHX';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Give the air carrier description of the flights that have an earlier arrival and departure. earlier arrival and departure refers to ARR_DELAY < 0 AND DEP_DELAY < 0;"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights with air carrier ""Southwest Airlines Co.: WN"", provide the tail number of flights with an actual elapsed time lower than the 80% of the average actual elapsed time of listed flights. Southwest Airlines Co.: WN refers to Description = 'Southwest Airlines Co.: WN'; tail number refers to TAIL_NUM; actual elapsed time lower than the 80% of the average actual elapsed time refers to ACTUAL_ELAPSED_TIME < (MULTIPLY AVG(ACTUAL_ELAPSED_TIME), 0.8);"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: List the air carrier's description with arrival time lower than the 40% of the average arrival time of flights that flew to Phoenix. arrival time lower than the 40% of the average arrival time refers to ARR_TIME < MULTIPLY(AVG(ARR_TIME), 0.4); flew to Phoenix refers to DEST = 'PHX';"
airline,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Air Carriers (
Code integer,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airports (
Code text,
Description text,
PRIMARY KEY (Code),
);
CREATE TABLE Airlines (
FL_DATE text,
OP_CARRIER_AIRLINE_ID integer,
TAIL_NUM text,
OP_CARRIER_FL_NUM integer,
ORIGIN_AIRPORT_ID integer,
ORIGIN_AIRPORT_SEQ_ID integer,
ORIGIN_CITY_MARKET_ID integer,
ORIGIN text,
DEST_AIRPORT_ID integer,
DEST_AIRPORT_SEQ_ID integer,
DEST_CITY_MARKET_ID integer,
DEST text,
CRS_DEP_TIME integer,
DEP_TIME integer,
DEP_DELAY integer,
DEP_DELAY_NEW integer,
ARR_TIME integer,
ARR_DELAY integer,
ARR_DELAY_NEW integer,
CANCELLED integer,
CANCELLATION_CODE text,
CRS_ELAPSED_TIME integer,
ACTUAL_ELAPSED_TIME integer,
CARRIER_DELAY integer,
WEATHER_DELAY integer,
NAS_DELAY integer,
SECURITY_DELAY integer,
LATE_AIRCRAFT_DELAY integer,
FOREIGN KEY (OP_CARRIER_AIRLINE_ID) REFERENCES Air Carriers(Code),
FOREIGN KEY (ORIGIN) REFERENCES Airports(Code),
FOREIGN KEY (DEST) REFERENCES Airports(Code),
);
---------------------
QUESTION: Among the flights of the air carrier described as American Airlines, what is the percentage of the flights with earlier departure? American Airlines can be found in Description which contains 'American Airlines'; percentage = MULTIPLY(DIVIDE(SUM(DEP_DELAY < 0), COUNT(DEP_DELAY)), 1.0); earlier departure refers to DEP_DELAY < 0;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books published by publisher ID 1929, how many of them have over 500 pages? books have over 500 pages refers to num_pages > 500"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the publication date of the book with the most pages? book with the most pages refers to Max(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the publisher of the book ""The Illuminati""? ""The Illuminati"" is the title of the book; name of publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were published by publisher ""Thomas Nelson""? ""Thomas Nelson"" is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the publisher that has published the most number of books? name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Please give the title of the oldest book published by publisher ""Thomas Nelson"". ""Thomas Nelson"" is the publisher_name; oldest book refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books published by publisher ""Thomas Nelson"", how many of them have over 300 pages? ""Thomas Nelson"" is the publisher_name; books with over 300 pages refers to num_pages > 300"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the publisher of the book with the most pages? book with the most pages refers to Max(num_pages); name of publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books are in English? books in English refers to language_name = 'English'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Please list the titles of all the books in British English. ""British English"" is the language_name of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the cheapest order price of the book ""The Little House""? ""The Little House"" is the title of book; cheapest order price refers to Min(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Please list the titles of all the books that Lucas Wyldbore has ordered."
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books ordered by Lucas Wyldbore, how many of them are over 300 pages? books have over 300 pages refers to num_pages > 300"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the total price of all the books ordered by Lucas Wyldbore? total price refers to Sum(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How much money on average does Lucas Wyldbore spend on book orders? average spend on book orders = AVG (price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books ordered by Lucas Wyldbore, what is the percentage of those books over $13? books over $13 refers to price > 13; percentage = Divide (Sum (order_id where price > 13), Count (order_id)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which city does the address id 547 belong to?"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders has Cordy Dumbarton made?"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the title of the earliest published Japanese book. Japanese book refers to language_name = 'Japanese'; earliest published refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: For the publisher which published the most books, show its name. published the most books refers to Max(Count(book_id)); publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were published by Kensington? ""Kensington"" is the publisher_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which language was book id 1405 written in? language written in refers to language_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which customer has made the most orders? Show his/her full name. most order refers to Max(Count(order_id)); customer refers to first_name, last_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Name the book title of the bestseller. book title refers to title; best sellers refers to title where Max(count(order_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books did David Foster Wallace write? ""David Foster Wallace"" is the author_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders does the book ""O Xará"" have? ""O Xará"" is the title of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which country does Malina Johnson live in? country refers to country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Give the number of Ukrainian addresses in the database. Ukrainian address refers to country_name = 'Ukraine'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which country does Žirovnica city belong to? ""Žirovnica"" is the city; country refers to country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Calculate the percentage of the International shipping orders on 2022/11/10. International shipping order refers to method_name = 'International'; orders on 2022/11/10 refers to order_date LIKE '2022-11-10%'; percentage = Divide (Sum(order_id  where method_name = 'International'), Count(order_id)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the average number of pages of David Coward's books? number of pages refers to num_pages; average = Divide (Sum(num_pages), Count(book_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the cost of the slowest and least expensive shipping method? slowest and least expesive method refers to shipping_method = 'Standard'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the title of the first book that was published in 1900? published in 1900 refers to publication_date LIKE '1900%'; first book refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the full name of the customer who owns the ""aalleburtonkc@yellowbook.com"" e-mail address? ""aalleburtonkc@yellowbook.com"" is the email of customer; full name refers to first_name, last_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders in 2022 have Iran as their destinations? Iran as their destination refers to country_name = 'Iran'; orders in 2022 refers to order_date LIKE '2022%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among Daisey Lamball's orders, how many were shipped via International shipping? via international shipping refers to method_name = 'International'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the full name of the customer who ordered the most books of all time? customer who ordered the most book refers to customer_id where Max(count(order_id)); full name refers to first_name, last_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders did Antonia Poltun return? order returned refers to status_value = 'Returned'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which shipping method is preferred by customers the most? shipping method preferred the most by customers refers to method_id where Max(Count(method_id)); which shipping method refers to method_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders were delivered in 2021? delivered refers to status_value = 'Delivered'; in 2021 refers to status_date LIKE '2021%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the first book written by J.K Rowling? ""J.K Rowling"" is the author_name; first published book refers to book_id where Min(publication_date); name of the book refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books did A.R. Braunmuller write? ""A.R. Braunmuller"" is the author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the publisher who published Agatha Christie's first book? ""Agatha Christie"" is the author_name; name of publisher refers to publisher_name; first book refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all the names of the books written by Danielle Steel. ""Danielle Steel"" is the author_name; name of books refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books by William Shakespeare were published by Penguin Classics? ""William Shakespeare"" is the author_name; ""Penguin Classics"" is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the publisher that published the most books? name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the total shipping cost of all the orders made by Page Holsey? Indicate how many of the said orders were ordered in 2022. shipping cost refers to cost; ordered in 2022 refers to order_date LIKE '2022%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the name of the publisher with publisher ID 22? name of publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many of the books authored by Al Gore have less than 400 pages? ""AI Gore"" is the author_name; have less than 400 pages refers to num_pages < 400"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the author's and publisher's name of the book published on July 10, 1997. author's name refers to author_name; publisher's name refers to publisher_name; book published on July 10, 1997 refers to publication_date LIKE '1997-07-10'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the language of the book with ISBN 23755004321? ""23755004321"" is the isbn13; language refers to language_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the title of the most expensive book? most expensive book refers to Max(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Calculate the total price of books ordered by customer named Lucas Wyldbore. total price refers to Sum(price); full name is composed of first name, last name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the ISBN of the book published in Spanish. ""Spanish"" is the language_name; ISBN refers to isbn13"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books that cost less than 1 dollar, how many were published by Berkley Trade? book cost less than 1 dollar refers to price < 1; 'Berkley Trade' is the publisher_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the title of the books purchased by the customer named Zia Roizin."
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who authored the book with greatest number of pages? greatest number of pages refers to Max(num_pages); who authored refers to author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the email of customers that bought the book titled Switch on the Night. ""Switch on the Night"" is the title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the author's name of the books published by Abrams. ""Abrams"" is the publisher_name; author's name refers to author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the publisher name of the book titled The Illuminati? ""The Illuminati"" is the title of book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: In books authored by Abraham Lincoln, what is the percentage of the books published in 1992? ""Abraham Lincoln"" is the author_name; published in 1992 refers to publication_date LIKE '1992%'; percentage = Divide (Sum(publication_date LIKE '1992%'), Count(publication_date)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books published in 2004, list the name of the publisher of books with number of pages greater than 70% of the average number of pages of all books. published in 2004 refers to publication_date LIKE '2004%'; books with number of pages greater than 70% of the average number of pages refers to num_pages > Multiply(Avg(num_pages), 0.7); name of publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the contact email of Moss Zarb."
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Name the streets in Dallas. ""Dallas"" is the city; streets refers to street_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which books were released by Orson Scott Card in 2001? ""Orson Scott Card"" is the author_name; released in 2001 refers to publication_date LIKE '2001%'; books refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Count the number of books written by Orson Scott Card. ""Orson Scott Card"" is the author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the authors and titles of the books which have more than 3000 pages. authors refers to author_name; more than 3000 pages refers to num_pages > 3000"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who wrote ""The Prophet""? ""The Prophet"" is the title of the book: who wrote refers to author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were published by Ace Hardcover? ""Ace Hardcover"" is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which publisher published Barry Eisler's book? ""Barry Eisler"" is the author_name; publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were published in Japanese? published in Japanese refers to language_name = 'Japanese'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Sum the total price of the orders for The Prophet book. ""The Prophet"" is the title of the book: total price refers to Sum(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the number of orders by Daisey Lamball in 2021. in 2021 refers to order_date LIKE '2021%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many customers are from Australia? ""Australia"" is the country_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders were delivered in December 2019? delivered refers to status_value = 'Delivered'; in December 2019 refers to status_date LIKE '2019-12%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the customers' names who ordered the Fantasmas. ""Fantasmas"" is the title of the book; customer names refers to first_name, last_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many percent of orders in 2020 used international shipping? international shipping refers to method_name = 'International'; orders in 2020 refers to order_date = '2020%'; percentage = Divide (Sum(method_name = 'International'), Count(order_id)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all the authors named ""George"". author named 'George' refers to author_name = 'George%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which year has the most customer orders? year with the most customer orders refers to Max(count(order_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the average price for the order line? average price refers to AVG(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all of the books that were published in 1995. published in 1995 refers to publication_date LIKE '1995%'; ; list of book refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the most common domain for the email address among all the customers? most common domain for the email refers to Max(Count(SUBSTR(email, CHARINDEX('@', email) + 1, length(email) - charindex('@', email))))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many publishers have the word ""book"" in their name? publisher have the word 'book' refers to publisher_name LIKE '%book%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which language is the rarest among all the books? language written in refers to language_name; rarest refers to Min(Count(book_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all the order dates for the customer named ""Adrian Kunzelmann""."
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many addresses are from the Philippines? ""Philippines"" is the country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who is the author who wrote the most books? author refers to author_name; who wrote the most book refers to Max(Count(author_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What are the books published by ""Harper Collins""? ""Harper Collins"" is the publisher_name; books refers to title"
