db_id,train_example
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which country is the University of Oxford located? University of Oxford refers to university_name = 'University of Oxford'; which country refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many times did the Yale University achieve a score of no less than 10 in the Quality of Education Rank? Yale University refers to university_name = 'Yale University'; a score of no less than 10 refers to score > = 10; in the Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What are the names of the criteria under Center for World University Rankings? names of the criteria refers to criteria_name; under Center for World University Rankings refers to system_name = 'Center for World University Rankings';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the names of all the universities that have no less than 50,000 students in the year 2012. have no less than 50,000 students refers to num_students > 50000; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Between 2011 to 2016, in which countries can you find the universities where at least 50% of its students are international students? Between 2011 to 2016 refers to year BETWEEN 2011 AND 2016; at least 50% of its students are international students refers to pct_international_students > 50; which country refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many universities have no less than 20,000 female students in 2016? Identify how many of the said universities are located in the United States of America. have no less than 20,000 female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100) > 20000; in 2016 refers to year = 2016; located in the United States of America refers to country_name = 'United States of America'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What are the names of the top 5 universities with the highest number of international students? highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the university ID of the university with the largest student staff ratio? the largest student staff ratio refers to max(student_staff_ratio)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the year where a university had the lowest number of students. had the lowest number of students refers to MIN(num_students)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Compute the average percentage of female students. average percentage of female students refers to avg(pct_female_students)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the number of international students and number of students in 2013 in university ID 20. number of international students refers to DIVIDE(MULTIPLY(pct_international_students, num_students), 100); in 2013 refers to year = 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the university ID of Harvard University? of Harvard University refers to university_name = 'Harvard University';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the university ID of the university that scored 100 in 2011. in 2011 refers to year = 2011; score = 100"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the ranking system of the ranking criteria named Quality of Education Rank. criteria named Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the student staff ratio of Harvard University in 2012? Harvard University refers to university_name = 'Harvard University'; in 2012 refers to year = 2012"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the location of the university ID 112. location refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the total number of students in universities located in Sweden. located in Sweden refers to country_name = 'Sweden'; number of students refers to num_students"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the ranking criteria ID of Brown University in 2014? Brown University refers to university_name = 'Brown University'; in 2014 refers to year = 2014"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the name of universities located in Spain. name of universities refers to university_name; located in Spain refers to country_name = 'Spain';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the criteria name of the university ID 32 in 2015? in 2015 refers to year = 2015"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Compute the average score of the university located in Brazil. average score refers to avg(score); located in Brazil refers to country_name = 'Brazil';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In which country does the most populated university in 2014 located ? the most populated university refers to max(num_students); in 2014 refers to year = 2014"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the score and number of international students in university ID 100 in 2015. number of international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2015 refers to year = 2015"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the student population of the university that scored 98 in 2013? student population refers to num_students; in 2013 refers to year = 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the criteria names under the ranking system called Center for World University Ranking. ranking system called Center for World University Ranking refers to system_name = 'Center for World University Rankings';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the country name of universities with the number of students greater than 98% of the average student population of all universities in 2013. number of students greater than 98% of the average student population of all universities refers to num_students >  MULTPLY(num_students, 0.98); in 2013 refers to year = 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among universities that score below 80 in 2015, what is the percentage of international students? score below 80 refers to score < 80; in 2015 refers to year 2015; percentage of international students refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)), SUM(num_students))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many students attended universities were there in 2011? in 2011 refers to year = 2011;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among all universities, how many female students were there in 2011? in 2011 refers to year = 2011; female students refers to SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the student staff ratio at the university with the greatest student staff ratio of all time? greatest student staff ratio of all time refers to max(student_staff_ratio)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the university ID with the most students in 2011? most students refers to MAX(num_students), in 2011 refers to year = 2011"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many institutions with over 50,000 students in 2011 had a percentage of oversea students of more than 10%? institutions with over 50,000 students refers to num_students > 50000; in 2011 refers to year = 2011; percentage of oversea students of more than 10% refers to pct_international_students > 10;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the ID of the university with the highest percentage of female students in 2012. in 2012 refers to year = 2012; highest percentage of female students  refers to MAX(pct_female_students); ID of the university refers to university_id"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which university had the highest reputation in 2012? had the highest reputation refers to MAX(score), in 2012 refers to year = 2012; which university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Name the university that had the most students in 2011. in 2011 refers to year = 2011; had the most students refers to MAX(num_students); name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Indicate the university's name with the highest ranking score in Teaching. university's name refers to university_name; highest ranking score refers to MAX(score); in Teaching refers to criteria_name = 'Teaching'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the percentage of Harvard university's international students in 2011? Harvard university's refers to university_name = 'Harvard University'; in 2011 refers to year = 2011; percentage of Harvard university's international students refers to pct_international_students"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many female students were there at Stanford University in 2011? in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In which nation is Harvard University located? Harvard University refers to university_name = 'Harvard University'; nation refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the name of the ranking system for Teaching criteria? Teaching criteria refers to criteria_name = 'Teaching'; name of the ranking system refers to system_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Name the most famous university in Argentina. in Argentina refers to country_name = 'Argentina';  most famous refers to MAX(SUM(score))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In Argentina, how many universities are there? In Argentina refers to country_name = 'Argentina';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which universities have more than 100,000 students in 2011? in 2011 refers to year 2011; more than 100,000 students refers to num_students > 100000; which university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many criteria are associated with ranking system Center for World University Rankings? ranking system Center for World University Rankings refers to system_name = 'Center for World University Rankings';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many students at the university earned a score of 90 in 2011? in 2011 refers to year 2011; earned a score of 90 refers to score = 90;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What are the top three universities with the most international students? most international students refers to MAX(SUM(DIVIDE(MULTIPLE(pct_international_students, num_students), 100))); name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the difference in overall student enrollment and international student enrollment at the Harvard university from 2011 to 2012? Harvard University refers to university_name = 'Harvard University'; difference in overall student enrollment and international student refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(pct_international_students, num_students), 100))); from 2011 to 2012 refers to year BETWEEN 2011 AND 2012"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many universities had over 30000 students in 2011? in 2011 refers to year 2011; had over 30000 students refers to num_students > 30000;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the country ID of the University of Tokyo? University of Tokyo refers to university_name = 'University of Tokyo';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the ranking system ID of the Center for World University Rankings. the Center for World University Rankings refers to system_name = 'Center for World University Rankings';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the ID of the Publications Rank criteria? Publications Rank criteria refers to criteria_name = 'Publications Rank';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many universities had above 30% of international students in 2013? had above 30% of international students refers to pct_international_students > 30; in 2013 refers to year = 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many universities got less than 50 scores under ranking criteria ID 6 in 2011? in 2011 refers to year 2011; less than 50 scores refers to score < 50;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the number of students at Yale University in 2016. number of students refers to num_students; Yale University refers to university_name = 'Yale University'; in 2016 refers to year = 2016"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the universities in Denmark. in Denmark refers to country_name = 'Denmark'; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the number of staff at the University of Auckland in 2015. University of Auckland refers to university_name = 'University of Auckland'; in 2015 refers to year = 2015; number of staff refers to DIVIDE(num_students, student_staff_ratio)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which country has the University of SÃ£o Paulo? the University of SÃ£o Paulo refers to university_name = 'University of São Paulo'; which country refers to country_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many international students attended Harvard University in 2012? Harvard University refers to university_name = 'Harvard University'; international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2012 refers to year = 2012"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the number of female students at Arizona State University in 2014. female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); at Arizona State University refers to university_name = 'Arizona State University'; in 2014 refers to year = 2014"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the universities which got the highest scores. got the highest scores refers to MAX(SUM(score))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the ranking criteria under the Shanghai Ranking system. Shanghai Ranking system refers to system_name = 'Shanghai Ranking'; ranking criteria refers to criteria_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In 2011, which university got the lowest score in teaching criteria? in 2011 refers to year 2011; got the lowest score refers to MIN(score), teaching criteria refers to criteria_name = 'Teaching'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the ranking system name for the ""Quality of Education Rank"" criteria. the ""Quality of Education Rank"" criteria refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many percent of universities got a score above 80 under International criteria in 2016? Among them, name the university which got the highest score. got a score above 80 refers to score > 80; under International criteria refers to criteria_name = 'International'; in 2016 refers to year = 2016; highest score refers to MAX(score)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the ranking criteria and scores in 2005 that were received by Harvard University. Harvard University refers to university_name = 'Harvard University'; in 2005 refers to year = 2005; ranking criteria refers to criteria_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the average score per university under Alumni criteria in 2008. under Alumni criteria refers to criteria_name = 'Alumni'; in 2008 refers to year = 2008; average score refers to DIVIDE(SUM(score), COUNT(university_id))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Name the university and country which had the highest number of international students in 2015. highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); in 2015 refers to year = 2015; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many students were there in university ID 1 in 2011? in 2011 refers to year 2011;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the ID of the university with the most students in 2011? in 2011 refers to year 2011; with the most students refers to MAX(num_students); ID of the university refers to university_id"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Please list the IDs of the universities with a student staff ratio of over 15 in 2011. in 2011 refers to year 2011; student staff ratio of over 15 refers to student_staff_ratio > 15; ID of the university refers to university_id"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among the universities with over 20000 students in 2011, how many of them have an international students percentage of over 25% in the same year? in 2011 refers to year 2011; with over 20000 students refers to num_students > 20000; international students percentage of over 25% refers to pct_international_students > 25;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Please list the IDs of the universities with the top 3 female students percentage in 2011. in 2011 refers to year 2011; top 3 female students percentage refers to MAX(pct_female_students) LIMIT 3; ID of the university refers to university_id"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In which year did university ID 1 have the most students? have the most students refers to MAX(num_students)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many students did Harvard University have in 2011? in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the name of the university with the most international students in 2011? in 2011 refers to year 2011; the most international students refers to MAX(DIVIDE(MULTIPLY(num_students,  pct_international_students), 100)); name of university refers to university_id"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Please list the names of all the universities in Australia. in Australia refers to country_name = 'Australia'; name of university refers to university_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among the universities in Australia, how many of them have more than 15000 students in 2011? in 2011 refers to year 2011; have more than 15000 students refers to num_students > 15000; in Australia refers to country_name = 'Australia';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which country is Harvard University in? Harvard University refers to university_name = 'Harvard University'; which country refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the name of the university with the highest score in teaching in the year 2011? with the highest score refers to MAX(score); in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Please list the names of the universities with a score in teaching of over 90 in 2011. in 2011 refers to year 2011; in teaching refers to  criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among the universities with a score in teaching of over 90 in 2011, how many of them are in the United States of America? in 2011 refers to year 2011; in teaching refers to  criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Please list the names of all the ranking criteria of Harvard University in 2011. in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University'; names of all the ranking criteria refers to criteria_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What are the names of the universities that got 98 in teaching in 2011? in 2011 refers to year 2011; that got 98 refers to score = 98; in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Please list the names of all the universities that scored under 60 in teaching in 2011 and are in the United States of America. scored under 60 refers to score < 60; in 2011 refers to year 2011; in teaching refers to criteria_name = 'Teaching'; in the United States of America refers to country_name = 'United States of America';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among the universities in Australia, how many of them have a student staff ratio of over 15 in 2011? in 2011 refers to year 2011; in Australia refers to country_name = 'Australia'; student staff ratio of over 15 refers to student_staff_ratio > 15"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many female students did Stanford University have in 2011? in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); Stanford University refers to university_name = 'Stanford University';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among the universities with a score in teaching of over 90 in 2011, what is the percentage of those in the United States of America? in 2011 refers to year 2011; in teaching refers to  criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(COUNT(country_name = 'United States of America'), COUNT(id))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the id of ""Center for World University Rankings"". ""Center for World University Rankings"" refers to system_name = 'Center for World University Rankings';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which country is University of Veterinary Medicine Vienna located in? Give its country id. University of Veterinary Medicine Vienna refers to university_name = 'University of Veterinary Medicine Vienna';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the id of the criteria ""Citations Rank""? criteria ""Citations Rank"" refers to criteria_name = 'Citations Rank';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Show the id of University of Orléans. University of Orléans refers to university_name = 'University of Orléans';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: For the university id 268, show its number of students in 2013. number of students refers to num_students; in 2013 refers to year = 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Show the name of country id 66. name of country refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which country is McMaster University located in? McMaster University refers to university_name = 'McMaster University'; which country refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many Turkish universities are there in the database? Turkish universities refers to country_name = 'Turkey';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which university had the most students in 2011? Show its name. in 2011 refers to year 2011; the most students refers to MAX(num_students); which university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many students were there in University of Michigan in 2011? in 2011 refers to year 2011; in University of Michigan refers to university_name = 'University of Michigan';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: For Chosun University, what was its score on ""Influence Rank"" in 2015? Chosun University refers to university_name = 'Chosun University'; in 2015 refers to year = 2015; on ""Influence Rank"" refers to criteria_name = 'Influence Rank';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the percentage of the international students in University of Oslo in 2015? percentage of the international students refers to pct_international_students; in 2015 refers to year = 2015; in University of Oslo refers to university_name = 'University of Oslo';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: For the University of Southampton in 2015, on which criteria did it score the best? University of Southampton refers to university_name = 'University of Southampton'; in 2015 refers to year = 2015; score the best refers to MAX(score); which criteria refers to criteria_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Which ranking system is criteria ""Total Shanghai"" in? criteria ""Total Shanghai"" refers to criteria_name = 'Total Shanghai'; which ranking system refers to system_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many female students were there in Pierre and Marie Curie University in 2015? female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); in Pierre and Marie Curie University refers to university_name = 'Pierre and Marie Curie University'; in 2015 refers to year = 2015"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What was the score for University of Florida in ""N and S"" in 2014? University of Florida refers to university_name = 'University of Florida'; in 2014 refers to year = 2014; in ""N and S"" refers to criteria_name = 'N and S'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the number of international students of University of Wisconsin-Madison in 2013. international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); University of Wisconsin-Madison refers to university_name = 'University of Wisconsin-Madison'; in 2013 refers to year = 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Show the name of the university with the lowest number of students in 2015. lowest number of students refers to MIN(num_students); in 2015 refers to year = 2015; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many times more was the number of students of University of Ottawa than Joseph Fourier University in 2013? Joseph Fourier University refers to university_name = 'Joseph Fourier University'; University of Ottawa refers to university_name = 'University of Ottawa'; in 2013 refers to year = 2013; how many times more refers to DIVIDE(SUM(num_students where university_name = 'University of Ottawa'), SUM(num_students where university_name = 'Joseph Fourier University'))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the average number of criterias among ""Times Higher Education World University Ranking"",""Shanghai Ranking"" and ""Center for World University Rankings"". average number of criterias refers to DIVIDE(SUM(id), 3); ""Times Higher Education World University Ranking"", ""Shanghai Ranking"" and ""Center for World University Rankings"" refers to system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings');"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the average number of students of all universities in 2012. average number of students refers to avg(num_students); in 2012 refers to year = 2012"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the score of university ID 68 in 2015? in 2015 refers to year = 2015"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the country ID of Cyprus. Cyprus refers to country_name = 'Cyprus';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the ID of university with the largest percentage of international students? largest percentage of international students refers to MAX(pct_international_students); ID of university refers to university_id"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the criteria name of the ranking criteria ID 13."
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the average score of all universities in 2012? average score refers to avg(score); in 2012 refers to year = 2012"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In years 2011 to 2013, what is the total number of female students in university ID 40? total number of female students refers to SUM(DIVIDE(MULTIPLY(pct_female_students, num_students), 100)); In years 2011 to 2013 refers to year BETWEEN 2011 AND 2013"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the average score of university ID 79 between year 2013 to 2015. average score refers to avg(score); between year 2013 to 2015 refers to year BETWEEN 2013 AND 2015"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the student staff ratio of university ID 35."
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the score of the most populated university in 2011. most populated university refers to MAX(num_students); in 2011 refers to year = 2011;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the criteria name where Harvard University scored 100. Harvard University refers to university_name = 'Harvard University'; scored 100 refers to score = 100"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the university name and ID of the university found in Turkey. found in Turkey refers to country_name = 'Turkey';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the total number of ranking criteria under the ranking system called Shanghai Ranking? ranking system called Shanghai Ranking refers to system_name = 'Shanghai Ranking';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the name and score of the university ID 124. name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many female students are there in University of Pennsylvania in 2011? in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); University of Pennsylvania refers to a university name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List down all universities that scored below 50. scored below 50 refers to score < 50; all universities refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many universities are located in Japan? located in Japan refers to country_name = 'Japan';"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Provide the name of the university with the highest number of male students. highest number of female students refers to MAX(SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_female_students), 100))); name of university refers to university_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the countries of universities that scored 70 and below in 2016. scored 70 and below refers to score < 70; in 2016 refers to year = 2016"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate number of male students in Emory University in 2011. in 2011 refers to year 2011; number of male students refers to SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_male_students), 100)); in Emory University refers to university_name = 'Emory University'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In which country does Johns Hopkins University located? Johns Hopkins University refers to university_name = 'Johns Hopkins University'; which country refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the names of universities with number of students ranges from 400 to 1000. number of students ranges from 400 to 1000 refers to num_students BETWEEN 400 AND 1000; name of university refers to university_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: In what year does the Brown University score the highest? Brown University refers to university_name = 'Brown University'; score the highest refers to MAX(score)"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the average score of Emory University from 2011 to 2016. average score refers to avg(score); Emory University refers to university_name = 'Emory University'; from 2011 to 2016 refers to year BETWEEN 2011 AND 2016;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Give the name of the university with the most number of students in 2015. most number of students refers to MAX(num_students); in 2015 refers to year = 2015; name of university refers to university_name;"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: What is the location and number of female students in university ID 23 in 2011? in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); location refers to country_name"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: How many universities scored 40 in teaching criteria? scored 40 refers to score = 40; in teaching refers to criteria_name = 'Teaching'"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Among the universities in United States of America, what is the percentage of female students in year 2016? female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); in United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100)), SUM(num_students))"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: Calculate the difference between the total number of students and the number of international international students in Univeristy of Tokyo from 2011 to 2014. international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); difference refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100))); in University of Tokyo refers to university_name = 'University of Tokyo'; from 2011 to 2014 refers to year BETWEEN 2011 AND 2014"
university,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
id integer,
country_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_system (
id integer,
system_name text,
PRIMARY KEY (id),
);
CREATE TABLE ranking_criteria (
id integer,
ranking_system_id integer,
criteria_name text,
PRIMARY KEY (id),
FOREIGN KEY (ranking_system_id) REFERENCES ranking_system(id),
);
CREATE TABLE university (
id integer,
country_id integer,
university_name text,
PRIMARY KEY (id),
FOREIGN KEY (country_id) REFERENCES country(id),
);
CREATE TABLE university_ranking_year (
university_id integer,
ranking_criteria_id integer,
year integer,
score integer,
FOREIGN KEY (university_id) REFERENCES university(id),
FOREIGN KEY (ranking_criteria_id) REFERENCES ranking_criteria(id),
);
CREATE TABLE university_year (
university_id integer,
year integer,
num_students integer,
student_staff_ratio real,
pct_international_students integer,
pct_female_students integer,
FOREIGN KEY (university_id) REFERENCES university(id),
);
---------------------
QUESTION: List the names of universities with a score less than 28% of the average score of all universities in 2015. in 2015 refers to year = 2015; score less than 28% refers to score < MULTIPLY(avg(score), 0.28) where year = 2015; names of universities refers to university_name"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item no.9 were sold in store no.1 on 2012/1/1? store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; on 2012/1/1 refers to date = '2012-01-01'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item no.9 were sold in store no.1 in total in January, 2012? store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; in January refers to SUBSTR(date, 1, 4) = '2012' and SUBSTR(date, 6, 2) = '01'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the ID of the item that sold the best on 2012/1/1 in store no.1? sold on 2012/1/1 refers to date = '2012-01-01'; in store no.1 refers to store_nbr = 1; item sold the best refers to Max(units)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What was the temperature range of station no.1 on 2012/1/1? on 2012/1/1 refers to date = '2012-01-01'; temperature range refers to Subtract (tmax, tmin); station no.1 refers to station_nbr = 1"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Please list the dates on which the temperature of station no.2 was above the 30-year normal. temperature above the 30-year normal refers to depart > 0; station no.2 refers to station_nbr = 2"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: On which day was the weather more windy in station no.1, 2012/1/1 or 2012/1/2? station no.1 refers to station_nbr = 1; 2012/1/1 refers to date = '2012-01-01'; 2012/1/2 refers to date = '2012-01-02'; more windy refers to Max(avgspeed)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the total number of units of item no.5 sold in store no.3 in 2012 on days when the temperature was below the 30-year normal? item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the temperature was below the 30-year normal refers to depart < 0; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; total number of units refers to Sum(units)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest? item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the max temperature was highest refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012? item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; in 2012 refers to SUBSTR(date, 1, 4) = '2012': most units sold refers to Max(units)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: On how many days with the max temperature over 90 did the sale of item no.5 in store no.3 exceed 100? max temperature over 90 refers to tmax > 90; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; sale exceed 100 refers to units > 100; number of days refers to count (date)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item no.5 were sold in store no.3 on the day the temperature range was the biggest? item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; when the temperature range was the biggest refers to Max(Subtract(tmax, tmin))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Among the days on which over 100 units of item no.5 were sold in store no.3, on which date was the temperature range the biggest? over 100 units refers to units > 100; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; the temperature range was the biggest refers to Max(Subtract(tmax, tmin))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item no.5 were sold in store no.3 in total on days with a total precipitation of over 0.05? item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; with a total precipitation of over 0.05 refers to preciptotal > 0.05"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Please list the dates on which the sale of item no.5 in store no.3 exceeded 100 and the average wind speed exceeded 10. item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; exceed 100 refers to units > 100; average wind speed exceeded 10 refers to avgspeed > 10"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the total units of products sold on the day with the highest max temperature in store no.3 in 2012? highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; total units refers to sum(units)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many more units of item no.16 were sold on the day with the highest max temperature in 2012 in store no.5 than in store no.10? store no. 5 refers to store_nbr = 5; store no. 10 refers to store_nbr = 10; item no.16 refers to item_nbr = 16; in 2012 refers to SUBSTR(date, 1, 4) = '2012'; highest max temperature refers to Max(tmax); more units sold refers to Subtract ( Sum(units where store_nbr = 5), Sum(units where store_nbr = 10))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the ID of the item that sold the best on the day with the highest max temperature in store no.3 in 2012? highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; sold the best refers to Max(units); ID of the item refers to item_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: On the day with the highest max temperature in 2012, how many items in store no.3 had no sales? highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'; store no.3 refers to store_nbr = 3; had no sale refers to units = 0"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item no.5 were sold in store no.3 on average on the days when the max temperature exceeded 90? item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3;  when the maximum temperature exceed 90 refers to tmax > 90; average = Divide (Sum(units), Count(date))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the percentage of the units of item no.5 sold among all units of items sold in store no.3 on the day with the highest max temperature in 2012? item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012';  Percentage = Divide (Sum(units where item_nbr = 5), Sum(units)) * 100"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Give the id of the bestsellers of store no.1 on 2012/1/1. store no. 1 refers to store_nbr = 1; on 2012/1/1 refers to date = '2012-01-01'; best seller refers to Max(units); ID refers to item_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many no.9 items from store no.11 were sold on 2012/12/7? no. 9 item refers to item_nbr = 9; store no.11 refers to store_nbr = 11; sold on 2012/12/7 refers to date = '2012-12-07'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Give the average temperature of station no.20 on 2014/10/17. station no.20 refers to station_nbr = 20; on 2014/10/17 refers to date = '2014-10-17'; average temperature refers to tavg"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Tell the resultant wind speed of station no.9 on 2014/1/15. station no.9 refers to station_nbr = 9; on 2014/1/15 refers to date = '2014/01/15'; result wind speed refers to resultspeed"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Give the id of the weather station with most stores. station with more stores refers to Max(Count(store_nbr)); ID of weather station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Which weather station does store no.20 belong to? store no.20 refers to store_nbr = 20; weather station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Tell the temperature range of the home weather station of store no.7 on 2014/4/28. store no.7 refers to tore_nbr = 7; on 2014/4/28 refers to date = '2014-04-28'; temperature range refers to Subtract (tmax, tmin)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: For the weather station which recorded the highest temperature above the 30-year normal, how many stores does it have? highest temperature above the 30-year normal refers to Max(depart)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: For the home weather station of store no.15, what was the dew point on 2012/2/18? store no. 15 refers to store_nbr = 15; on 2012/2/18 refers to date = '2012-02-18'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Tell the wet-bulb temperature of the weather station which contained store no.6 on 2012/2/15. store no.6 refers to store_nbr = 6; on 2012/2/15 refers to date = '2012-02-15'; wet-bulb temperature refers to wetbulb"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Give the number of stores which opened on the weather station that recorded the fastest average wind speed. fastest average wind speed refers to Max(avgspeed); number of store refers to count(store_nbr)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: State the max temperature of the weather station which has the no.21 store on 2012/11/9. no.21 store refers to store_nbr = 21; on 2012/11/9 refers to date = '2012-11-09'; max temperature refers to tmax"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Provide the sunrise time recorded by the home weather station of store no.30 on 2014/2/21. store no. 30 refers to store_nbr = 30; on 2014/2/21 refers to date = '2014-02-21'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: State the number of stores that belongs to the weather station which recorded the deepest snowfall. deepest snowfall refers to Max(snowfall); number of stores refers to store_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Provide the code summarization for the weather recorded by the weather station which contained the no.2 store on 2013/2/12. no.2 store refers to store_nbr = 2; on 2013/2/12 refers to date = '2013-02-12'; code summarization refers to codesum"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Show the sea level status recorded by the weather station of store no.19 on 2013/2/24. store no.19 refers to store_nbr = 19; on 2013/2/24 refers to date = '2013-02-24'; sea level status refers to sealevel"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many inches of total precipitation was recorded by the weather station of store no.2 on 2012/12/25? store no.2 refers to store_nbr = 2; on 2012/12/25 refers to date = '2012-12-25'; total precipitation refers to preciptotal"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Give the station pressure status recorded by the weather station which contained no.12 store on 2012/5/15. no.12 store refers to store_nbr = 12; on 2012/5/15 refers to date = '2012-05-15'; station pressure status refers to stnpressure"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What percentage was the total unit sales of store no.10 to the total sales of its weather station on 2014/10/31? store no.10 refers to store_nbr = 10; on 2014/10/31 refers to date = '2014-10-31'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: For the weather station has store no.9, what was the increased percentage of the average temperature from 2012/2/2 to 2012/2/3? store no.9 refers to store_nbr = 9; 2012/2/2 refers to date = '2012-02-02'; 2012/2/3 refers to date = '2012-02-03'; average temperature refers to tavg; increase percentage = Divide (Subtract (tavg where date = '2012-02-03', tavg where date = '2012-02-02'), tavg where date = '2012-02-02') * 100"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the item number of the product with the highest number of units sold in store number 1 on 1/1/2012? item number refers to item_nbr; highest number of units sold refers to Max(units); store no.1 refers to store_nbr = 1; on 1/1/2012 refers to date = '2012-01-01'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many stores are in weather station 12? weather station 12 refers to station_nbr = 12; number of stores refers to Count(store_nbr)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many items weren't sold in store 2 on 1/1/2012? store no.2 refers to store_nbr = 2; item weren't sold refers to units = 0; on 1/1/2012 refers to date = '2012-01-01'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Between 1/1/2012 to 12/31/2014, which date recorded the hottest temperature in weather station 1? weather station 1 refers to station_nbr = 1; hottest temperature refers to Max(tmax); between 1/1/2012 to 12/31/2014 refers to SUBSTR(date, 1, 4) between 2012 and 2014"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Which weather station has the highest number of stores? number of store refers to store_nbr; highest number of store refers to Max(Count(store_nbr)); weather station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: In March 2014, which weather stations recorded the highest number of days whose temperature is below the 30-year normal? in March 2014 refers to substring (date, 1, 4) = '2014' and substring (date, 6, 2) = '03'; temperature is below the 30-year normal refers to depart < 0; highest number of days refers to Max(Count(date))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Which weather station does the store that sold the highest quantity of item 9 belongs to? item 9 refers to item_nbr = 9; sold the highest quantity refers to Max(Sum(units)); weather station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many stores belong to the most windy station? most windy station refers to Max(avgspeed)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Among the stores in weather station 14 in February 2014, which store had sold no less than 300 quantities for item number 44 in a single day? weather station 14 refers to station_nbr = 14; February 2014 refers to substring (date, 1, 7) = '2014-02' ; sold no less than 300 quantities refers to units > = 300; item no.44 refers to item_nbr = 44; store refers to store_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the most purchased products during the rainy days in June 2013 in weather station 9? most purchased product refers to Max(units); during the rainy day refers to codesum = RA; in June 2013 refers to SUBSTR(date, 1, 7) = '2013-06'; weather station 9 refers to station_nbr = 9; product refers to item_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Which station sold the highest quantity of item number 5 overall? item number 5 refers to item_nbr = 5; sold highest quantity refers to Max(Sum(units)); station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the earliest sunrise recorded in the stations with no more than 1 store in February 2012? in February 2012 refers to SUBSTR(date, 1, 7) = '2012-02'; earliest sunrise Min(sunrise);  station with no more than 1 store refers to station_nbr where Count(store_nbr) = 1"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: In weather station 17, which store sold the highest quantity of item 45 in October 2012? weather station 17 refers to station_nbr = 17; item 45 refers to item_nbr = 45; in October 2012 refers to SUBSTR(date, 1, 7) = '2012-10': highest quantity refers to Max(Sum(units)); store refers to store_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What are the items sold by the store during the day whose station recorded the thickest snowfall? thickest snowfall refers to Max(snowfall); item refers to item_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What are the top 3 stations that have sold the highest quantities for an item in a single day? highest quantity refers to Max(units); station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many stores belong to the station with the highest recorded heat of all time? highest recorded heat refers to Max(heat); station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: On February 8, 2014, what is the minimum temperature in the station where store 29 belongs? On February 8, 2014 refers to date = '2014-02-08'; store 29 refers to store_nbr = 29; minimum temperature refers to tmin; station refers to station_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Among the stations with 3 stores, how many stations have a station pressure of no more than 30 on February 18, 2014? station with 3 stores refers to station_nbr where Count(store_nbr) = 3; station pressure of no more than 30 refers to stnpressure < 30; On February 18, 2014 refers to date = '2014-02-18'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Which station has the highest number of stores? Calculate the said station's average maximum temperature in February 2012. station with highest number of stores refers to station_nbr where Max(Count(store_nbr)); station refers to station_nbr; in February 2012 refers to substring (date, 1, 7) = '2012-02'; average maximum temperature = Divide(Sum(tmax), 29)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Between the stores under weather station 12, what is the percentage of item 5 sold in store 10 in 2014? weather station 12 refers to station_nbr = 12; item 5 refers to item_nbr = 5; 10 store refers to store_nbr = 10; in 2014 refers to SUBSTR(date, 1, 4) = '2014'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the maximum average speed? maximum average speed refers to Max(avgspeed)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many days did the show fell more than 5 inches? snow fell more than 5 inches refers to snowfall > 5"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many days did the sun rise before 5 AM? sunrise before 5 Am refers to sunrise < time ('5:00:00')"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the minimum dew point? minimum dew point refers to Min(dewpoint)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the maximum and minimum temperature for station number 1 on 15 January 2012? station number 1 refers to station_nbr = 1 ; minimum temperature = tmin; maximum temperature = tmax; on 15 January 2012 refers to date = '2012-01-15'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many stations were able to sell item 5 on January 2014? item 5 refers to item_nbr = 5; on January 2014 refers to Substring (date, 1, 7) = '2014-01'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the lowest minimum temperature recorded in store 16 on January 2012? lowest minimum temperature refers to Min(tmin); store 16 refers to store_nbr = 16; on January 2012 refers to Substring (date, 1, 7) = '2012-01'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units of item 7 have been sold by store 7 when the snow is less than 5 inches? item 7 refers to item_nbr = 7; store 7 refers to store_nbr = 7; snow is less than 5 inches refers to snowfall < 5"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many items were sold by store 9 during a snowy day? store 9 refers to store_nbr = 9; snowy day refers to snowfall < > 0 and snowfall is not null; item refers to item_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: List out stations number and items sold by store 17. station number refers to station_nbr; store 17 refers to store_nbr = 17"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: List out dates when haze is recorded in store 35. store 35 refers to store_nbr = 35; haze is recorded refers to codesum like '%'||'HZ'||'%'"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the sea level and average speed for store number 3 and store number 4? store number 3 refers to store_nbr = 3; average speed refers to avgspeed; store number 4 refers to store_nbr = 4"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: Which items from store 1 have the highest units sold during rainy day? store 1 refers to store_nbr = 1; highest unit sold refers to Max(units); during rainy day refers to codesum like '%'||'RA'||'%'; item refers to item_nbr"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the ratio of the highest and lowest temperature in store 11? store 11 refers to store_nbr = 11; highest temperature refers to Max(tmax); lowest temperature refers to Min(tmin); ration = Divide (Max(tmax), Min(tmin))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What was the difference of number of units sold in station number 1 and number 2 on year 2012? station 1 refers to station_nbr = 1; station 2 refers to station_nbr = 2; on year 2012 refers to substring (date, 1, 4) = '2012'; difference = Subtract (Sum(units where station_nbr = 1), Sum(units where station_nbr = 2))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What was the average temperature difference between store number 18 and 19 on 16 September 2022? store number 18 refers to store_nbr = 18; store number 19 refers to store_nbr = 19; on 16 September 2022 refers to date = '2022-09-16'; average temperature difference = Subtract(tavg where store_nbr = 18, tavg where store_nbr = 19)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: How many units are being sold for item 1 when the average temperature is 83? item 1 refers to item_nbr = 1; when the average temperature is 83 refers to tavg = 83"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What is the difference between the units sold for item 1 when the sunset was the earliest and the latest? item 1 refers to item_nbr = 1; when the sunset earliest refers to Min(sunset); latest sunset refers to Max(sunset); difference unit sold refers to Subtract(Sum(units where Min(sunset)), Sum(units where Max(sunset)))"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What was the total unit sold for item 10 when the average temperature was below the median temperature? item 10 refers to item_nbr = 10; average temperature below median temperature refers to tavg < avg(tavg); total units refers to Sum(units)"
sales_in_weather,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE sales_in_weather (
date date,
store_nbr integer,
item_nbr integer,
units integer,
);
CREATE TABLE weather (
station_nbr integer,
date date,
tmax integer,
tmin integer,
tavg integer,
depart integer,
dewpoint integer,
wetbulb integer,
heat integer,
cool integer,
sunrise text,
sunset text,
codesum text,
snowfall real,
preciptotal real,
stnpressure real,
sealevel real,
resultspeed real,
resultdir integer,
avgspeed real,
);
CREATE TABLE relation (
store_nbr integer,
station_nbr integer,
PRIMARY KEY (store_nbr),
FOREIGN KEY (store_nbr) REFERENCES sales_in_weather(store_nbr),
FOREIGN KEY (station_nbr) REFERENCES weather(station_nbr),
);
---------------------
QUESTION: What was the average temperature differences during May 2012 for store number 6 and 7? during May 2012 refers to SUBSTR(date, 1, 7) = '2012-05'; store number 6 refers to store_nbr = 6; store number 7 refers to store_nbr = 7; average temperature difference = Subtract (Divide (Sum(tavg), Count (date) where the store_nbr = 6), Divide (Sum(tavg), Count(date) where store_nbr = 7))"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which country does Polish found least in?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which countries have more than 90% of African? List the name of the country in full. Percentage = 90 means 90% of the population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: State the different ethnic group and percentage of the language in Singapore."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Calculate the percentage of country which gained independence as republic after 1970."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Find the GPD for Bosnia and Herzegovina and the type of government it belongs to."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: State the country and its population with population growth greater than 2% but infant mortality rate less than 5%."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which is the majority of the ethnic group in country with great than 10,000,000 population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Provide the country with its full name which has the most ethnic group? List them all ethnic group together with its percentage."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the full name of the country with 100% Africans? Percentage = 100 means 100% of the population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List the infant mortality of country with the least Amerindian."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For country with area greater than 600000, what is agriculture percentage of GDP the country contributes?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Provide the country with republic government which has the highest population growth?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: When did 'Bulgaria' gain independence?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Calculate the population of Arab in each country? Arab is the name of enthic groups in the country; Population of (Arab in each country) = (percentage of Arab) * (population of each country)"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the population of African in 'Turks and Caicos Islands'? African is the name of enthic groups in the country; Population of (African in Turks and Calcos Island) = (percentage of African) * (population of Turks and Calcos Island)"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the number of growth population for country with the lowest infant mortality? Growth population = population_growth * population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among countries with more than 400,000 GDP, state its capital and population."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Calculate the service of GDP for Brazil. The service of GDP can be computed by service * GDP"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the highest infant mortality? Also state its population growth."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all countries with negative growth in population. State the country, population and growth. Negative growth in population means population_growth < 0"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For countries with area between 500000 to 1000000, state the country and infant mortality rate."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries with more than 3% population growth rate, state the country name in full along with its GDP. Population_growth = 3 means 3% population growth rate"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the infant mortality rate for Ethiopia? Ethiopia is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How much does the gross domestic products goes to the industry sector for Singapore? Singapore is one of country names; GDP refers to gross domestic products; GDP to the industry sector = GDP * Industry"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How much is her GDP in agriculture for the country with the least area?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the biggest percentage of the albanian ethnic group?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries with the African ethnic group, how many of them has a population of over 10000000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the name of the countries with over 5 ethnic groups."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the highest GDP?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries with a population of over 10000000, how many of them have a GDP of over 500000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the capital cities of the countries with an inflation rate under 2."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the lowest inflation rate?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries whose agriculture percentage of the GDP is under 50%, how many of them have an area of over 8000000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many cities have a salt lake located in it?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the depth of the lakes that are located in the Province of Albania."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: The lake with the highest altitude is located in which city?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many lakes in the Canary Islands cover an area of over 1000000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the most languages spoken?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the capital city of the country that has the percentage of Armenian speakers over 90%? Percentage of country > 90% refers to percentage > 90; America is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries with a population of under 1000000, how many of them have over 2 languages?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many organizations are founded in countries with a population of under 1000000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many organizations are established after 1999/1/1 in a country whose GDP is under 500000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries with over 3 organizations, how many of them have an inflation rate of over 5%?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many organizations are established in the country with the most ethnic groups?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the organization names established in the countries where Dutch is spoken. Dutch is one of language"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many organizations are established in countries where people speak Bosnian? Bosnian is one of language"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the highest infant mortality rate per thousand of the countries whose inflation is under 3?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries whose GDP is over 1000000, how many of them have a population groth rate of over 3%? population growth rate of over 3% means population_growth > 3"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the highest GDP per capita? GDP per capita = GDP / population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the highest lake area coverage of a country? Lake area coverage = [sum(area of the lakes in the country) / (area of the country)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average population growth rate of countries where more than 3 languages are used?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the names of the countries with an inflation rate that's 30% above the average. Average inflation rate = [sum(inflation) / count(countries)]; 30% above average implies inflation > 1.3 average inflation rate"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Where country does Baghdad belongs to? Baghdad is one of provinces"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which religion has the largest population in Martinique?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country is 41% Christian? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which two countries does the Detroit River flow through? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which two countries have the longest border in the world? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the most neighbors? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country is Mountain Cerro Chirripo located in? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many mountains are there in Indonesia? Indonesia refers to one of countries"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the quantity of the mountains does Japan have? Japan is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the latitude of the island on which Mount Andrinjitra is located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which two countries share the second highest mountain? Give the country code."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the area of Egypt as a percentage of Asia?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the area of Egypt as a percentage of Asia?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which city in Japan has the most people in the country? most people refers to largest population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For the country in which Olsztyn is located, where is the capital? Olsztyn is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which province is the highest volcano mountain located in?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: When did Uganda declare independence? Uganda is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What kind of government does Iran have? Uganda is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Where does Bermuda belong to? Give the full name of the country. Bermuda is one of countries"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Where is the capital of country which has the largest percentage of Malay people? Malay is one of country names"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For the third largest country, which ethinic group has the most population?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the city of 114339 in population? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many rivers finally flows to the sea of 459m in depth?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the area of the country which became independent in 1921/3/13?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the population density of the Petropavl's home country? Population density = Population / area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many more people speak English than speak Scottish in United Kingdom? English and Scottish are two languages; United Kingdom is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the most populated city of the 12th highest density country? Population density = Population / area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many times longer is the longest border in the United States than the shortest? How many times longer = longest border / shortest border"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the capital cities of the countries that have more than 4 mountains."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many mountains are there in the country with the greatest population?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries whose agriculture takes up more than 40% of its GDP, how many of them have less than 2 mountains?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the mountains in the country with the lowest inflation rate."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the independent countries whose type of government is republic, what is the biggest number of deserts they have?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the deserts in the countries whose population is over 100000 and covers an area of under 500000."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many deserts are there in a country where over 90% of people speaks Armenian?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which mountain is the highest in an independent country?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many volcanic mountains are there in countries whose population is no more than 5000000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries with a GDP of over 1000000, how many of them have mountains higher than 1000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the greatest length of the border between 2 independent countries?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries whose government type is republic, how many of them shares a border that's longer than 200?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the countries that share the shortest border."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the GDP of the European Continent?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many mountains are there on the African Continent?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Of the deserts on the America Continent, which one covers the greatest area?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the countries on the European Continent that have a population growth of more than 3%."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many countries on the European Continent has an infant mortality rate per thousand of over 100?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the countries that use Bosnian as their language, how many of them don't have a positive population growth rate?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average percentage of agriculture of GDP in countries on the African Continent?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the independent countries, how many of them has a GDP per capita of over 5000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average inflation rate of the biggest continent?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which island is city Balikpapan located on? How big is the island?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the cities in Sumatra and state the population of each city. Sumatra is an island"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: On which island does South Yorkshire situated? State it's longtitude and latitude. 'South Yorkshire' is a province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all islands that are greater than the island on which Warwickshire is located. Warwickshire is a province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For island area less than 200, list the island name and city it belongs to."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which province is city Glenrothes located? What is the capital of the province?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List the all the cities and its city population for provinces with population more than 1000000."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the coral islands along with its city and province. Baltic Sea is a sea located in Northern Europe"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average population for all cities location at Baltic Sea? Baltic Sea is a sea located in Northern Europe"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Calculate the percentage of population in Edmonton city to the population of its province. Percentage of population in each city = population(city) / population(province) * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which are the rivers that flows to Black Sea? Black Sea is a sea located in Eastern Europe and Western Asia"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: State the name of the lake in Albania province and in which city does it located at."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name the tallest mountain on Himalaya and what is its height. Tallest refers to max(height)"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the mountains that are volcanic along with its longitude and latitude."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name all the volcano mountains between the height of 2000 to 4000."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please state the longest river that flows to the Mediterranean Sea."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many percent of the mountains on Andes which are non-volcanic? Percent of non-volcanic mountains = count(mountains = 'Andes' & type ! = 'volcano') / count(mountains = 'Andes') * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the cities and provinces located at the rivers that flows to Atlantic Ocean. Atlantic Ocean is the second-largest ocean on Earth, after the Pacific Ocean; Ocean and sea share the same meaning"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the name and length of rivers located at 'Orleans' city? Orleans is a city in north-central France"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the height of the mountain on which river 'Lech' is located? Please also provide its longitude and latitude."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name the river of which Lorraine is on. Please name the mountains where to source flow from? Lorraine is a province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which mountain does the river source Blue Nile located? State the height of the mountain."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name the river at Little Rock city. State the length of the river."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all rivers and province it is located that is greater than 1000 in length."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which province and country does Moldoveanu located? State its height. Moldoveanu is a mountain"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Provide all rivers name and length in USA. USA is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average height of all mountains in Nepal? Nepal is a province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For all cities where Seine is located at, which city has the greatest population? Calculate the difference from the city with least population. Seince is a river; Population disparity refers to difference between cities with greatest and least population; Difference between cities with greatest and least population means max(population) - min(population)"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which are the 2 rivers located at Belgrade city? Which river is longer and how by much?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nations have a 100% Spanish-speaking population?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which countries are dependent on the British Crown?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What are the names of the rivers in Canada?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the name of the country whose citizens have the lowest purchasing power? Inflation can reduce purchasing power over time for recipients and payers."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What province does the 4th most populous city in the United Kingdom belong to, and how many people live there?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many Jewish residents are there in Moldova? Moldova is one country located in Eastern Europe; The number of residents can be computed by percentage * population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average area of Asian countries? Asia is a continent"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country is home to the world's tiniest desert, and what are its longitude and latitude?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many people in Montenegro speaks Serbian? Serbian is one language; Montenegro is a country located in Southeastern Europe"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many mountains are there in the country with the most land area?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which sea is the shallowest and which country surrounds it? Shallow sea refers to the sea with less depth"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nation's GDP is the lowest among those that are communist states? Communist is a government form"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What kind of political system is in place in the country with the highest inflation rate? Political system refers to government form"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nation has the greatest infant mortality rate among those that attained independence in 1960?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the smallest border's length, and what form of government do the two nations bordering it have?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which Arabic-speaking country has the smallest population? Arabic-speaking country = country that speaks 100% Arabic"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What provinces encompass the world's biggest desert in terms of overall area?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many lakes are there in the 4th most populous African country with a republican form of government?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which religion is most prevalent in Asia? Most prevalent religion refers to the religion with the most population percentage"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the difference in population between the two nations where the tallest peak is located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What are the names of the sea that can be found on the island with the biggest area?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What are the names of the three nations where the longest river that empties into the Atlantic Ocean stretches to? Empties into the Atlantic Ocean = flows to the Atlantic Ocean"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many people reside in the nation's capital city, which is situated in the nation that attained independence on 8/15/1947?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the total number of Afro-Asian people in the most populous Asian country governed by a monarchy? Total Number of People = Percentage * Population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What are the names of the cities along the Euphrat River's course? Indicate the capital city of the nation where the Euphrat River flows."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the proportion of English-speaking citizens in the countries that rely on the United States compared to the total number of citizens in those countries?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which federal republic country in Europe has the most provinces, and what proportion of GDP is devoted to services?
Calculate the population density as well. Republic is on of government forms; Percentage of Services of the GDP was mentioned in economy.Service; Population Density = Population / Area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the capital of the 3rd most populated country in Asia and what is the capital city's ratio in percentage (%) against the overall population of the country?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What's the name of the second biggest desert?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the main spoken language in MNE? MNE is one country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What's the percentage of people in Cayman Islands speak English? Cayman Islands is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country was the source of Pjandsh River? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For the countries have the population north of a billion, which one has the lowest GDP? Give the full name of the country. billion = 1000000000"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the capital of the country that has the Licancabur Mountain?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How much sea is around the island where Kerinci Mountain is located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which three countries does the Amazonas flow through? Give the full name of the countries. Amazonas flow is a river"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country became independent on 1492-01-01? Give the full name of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many cities in France have a population of more than 100,000?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among all the rivers finally flows to the sea of 540m in depth, which one has the longest length?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which Country is the second highest volcanic mountain located in? Give the code of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the longitude of the island on which Mount Olympos is located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For all the countries that is smaller than 100 square kilometres, which one has the most GDP?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the total number of cities that Japan have? Japan is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which city has most population other than its capital in Bangladesh? Bangladesh is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which non capital city has the most people of all?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which country is the city of Grozny? Give the full name of the country. Grozny is a province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which religion has the majority of the people in Japan? Japan is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which two countries have the border in length of 803 km? Give the full names of the countries."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many percent of the total area of Russia is in Europe?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Give the full names of the countries that are located in more than one continent."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many people are there in Fareham's mother country? Mother country refers to home country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What's the number of infant mortality in Switzerland in a year? Number can be calculated = Infant_Mortality * Population * Population_Growth"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many mountains are there in the United States?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: When did Equatorial Guinea become independent? Equatorial Guinea is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the GDP per capita in Switzerland? GDP per capita = GDP / Population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the GDP for Service of the country with Fuenlabrada as its city."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many times longer is the longest river in Tajikistan than the shortest river? TJ is an abbreviated country code of Tajikistan"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the population density of Hanoi's home country? population density = Population / Area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In countries where there is more than one ethnic group, name the ethnic group with the greatest presence in each country and the country to which it corresponds. greatest presence can be represented by largest percentage."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many deserts are not located in a single country? Name them."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many rivers belong to more than one country? Name the provinces where we can find them."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What percentage of the border does Angola share with each of the countries with which it borders?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What percent of the non volcanic islands in the Lesser Antilles group of islands have an area of no more than 300 square kilometers? Percent = [count(non volcanic islands Lesser Antilles area 300 or less) / count(non volcanic islands Lesser Antilles)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Of all the countries in which English is spoken, what percentage has English as their only language? Percentage = [count(countries 100% English) / count(countries English)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name of the capitals of the countries that have less than 99.95% less population than the country that has the most population."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Average length of the rivers flowing into the Donau River."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Based on the data shown at Target, what percentage of countries are non-Christian? percentage of countries are non-Christian = [count(non-Christian) / count(non-Christian + Christian)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country with a city with a population between 50,000 and 300,000 inhabitants and which is a member of an organization established between 03/01/1991 and 04/30/1991 is also a member of the EBRD?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which river with its mouth in the Donau River and a length greater than 500 km is located in Slovenia?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which city is the sea whose depth is 4232 meters less than that of the Bay of Bengal?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which city is the lake located at coordinates longitude -85.35 and latitude 11.6?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: On which continent is the country with the most erosion of real income? highest inflation rate results in the most erosion of real income"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which two Asian countries share a border that is 1,782 kilometers long?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Of all the lakes in Bolivia, which is the deepest? Bolivia is the country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which lake flows the river that is, in turn, the mouth of the Manicouagan River?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which group of islands is Rinjani Mountain located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the seas with which the deepest sea merges."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Of all the countries that share territory with more than one continent, in which of them does the average population not exceed 10 inhabitants per square kilometer?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Of all the countries of the Hindu religion, which has the lowest ratio of people per square meter of surface? ratio of people per square meter of surface = Population / Area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: On what date did the country have a gross domestic product 400% higher than Saint Kitts and Nevis become independent? GDP refers to gross domestic product"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the average population ratio of the countries in which organizations were established in 1947? Average population ratio = Population / Area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the name of Anguilla's capital, and where is it located? Anguilla is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nation has the smallest population, and where is its capital located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How much more space does Asia have than Europe? Asia and Europe are two continents."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the geographic location of Aarhus city? Please provide the answer with the coordinates of the location. Longitude, Latitude = coordinates of the location"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the population gap between the United Kingdom and Italy? Population gap = Total population of the United Kingdom - Total population of Italy"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which city is the European Bank for Reconstruction and Development's headquarters? Please include the city and province where the headquarters are located in your answer."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which lake is the largest in terms of both surface area and depth? Area * Depth can represents the metric in terms of both surface area and depth"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which two nations are separated from one another by the longest border? Please include the entire names of the nations in your answer."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nation has the highest GDP? Please give the nation's full name."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nation has the lowest proportion of people who speak an African language? Please state the nation's full name. Nation and country share the same meaning. Proportion refers to percentage"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has three different religions-Anglicanism, Christianity, and Roman Catholicism and uses 100% English?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please list the top 3 countries with the highest inflation rate."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please provide a list of every nation where English is spoken and utilized entirely. Utilizition entirely means Percentage = 100% uses"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many businesses were founded after 1960 in a nation that wasn't independent? Established means founded; Country means nation; Organization means businesses"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What province did the river Klaeaelv travel through and how long is the river?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How many Italian regions are bordered by the Mediterranean Sea? How deep is the Mediterranean Sea? Reigion refers to province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What nations are considered British Overseas Territories? British Overseas Territories is one government form; Nation and country share the same meaning"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which of the top 3 economies by GDP has the lowest proportion of the economy devoted to agriculture? Economies refers to countries"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: How big is Africa, and how many nations make up the continent? Area can measure the size of countries; Country and nation share the same meaning"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which United States province is home to the greatest number of corporations' corporate headquarters? Organization refers to corporation"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What are the most recent three independent nations? Larger date of indepedence refers to more recent indepdence; Nation refers to country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please name any three sovereign nations that have been governed by the republic since 1991. Nation refers to country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which company falls under the category of an associated member? Please provide the organization's full name."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nations have a boundary with the Kalahari Desert? Nation refers to country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which desert in Kazakhstan is the largest?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What sea does the Baltic Sea converge with, and how deep is the Baltic Sea? Coverage refers to mergesWith"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which constitutional monarchy nations saw the greatest growth in the number of organizations after 1907? Nation refers to country; Information of growth appears in the column Established"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What kind of mountain is Ampato? Which province and nation does this mountain belong to? Nation refers to country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Please provide a list of every volcano mountain in the province of Ecuador."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What percentage of nations have achieved independence since 1993 and practice parliamentary democracy? Please include any three parliament-based democracies that attained independence after 1993. Percentage of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What proportion of rivers have a length of more than 3,000 miles? Please provide the name of a Russian river that is more than 3,000 miles long. Proportion of rivers with lengths greater than 3,000 miles = [(Total number of rivers with lengths greater than 3,000 miles) / (Total number of rivers)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the full name of ABEDA and when was it established?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name all the organisations that were established from 1970 to 1980."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Provide a list of all organisations with headquarters in London? London is a city"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: For each organisations with headquarters in the USA, provide the its full name and the city where the headquarter is located at."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name the first organisation established in the Paris city. State its abbreviation, full name and date of establishment. Paris is a city"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the organisations that where its name contains 'United Nation'. State its full name and its headquarter city."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which 2 countries' border span across the longest length? Provide the country's full name."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name all countries in which have border with Bulgaria. Bulgaria is a country name"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: State all countries with border greater than 4,000. List the full country name."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the country member of 'IOC' organization, which country has the most population?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all members and member type of the Islamic Development Bank."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: State the area and population of the country where Asia Pacific Economic Cooperation headquarter is located. Asia Pacific Economic Cooperation is an organization name"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the organization(s) that has 'National Society' as member type."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the least organization membership?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all countries with 'Category III' membership in 'IFAD' organization. Please also provide the capital of the country."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Name the organizations with the most members."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the capital of Australia? Is the capital a headquarter to any organization? Name the organization(s)."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Among the organizations where headquarters are in the 'USA', what is the percentage of the them are in 'Washington'? percentage can be computed by [count(City = 'Washington') / count(all cities)] * 100%"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the border length between 'USA' and 'MEX'"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the newest established organization where Singapore is a member of?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Provide the population of the city of the 'World Tourism Organization' headquarter."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the height of mountain Dhaulagiri located and in which province is it located?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all the name and height of all mountains in Alaska Alaska is a province"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the population of the country with the highest infant mortality rate?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: State the inflation rate of Greece."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Find the government type for the country with the highest percentage GDP in Agriculture."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List the full name its capital of all the countries with parliamentary democracy government. Parliamentary democracy is a government form"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Provide a full list of countries and its population with more than 70% of Chinese."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: In which city has the greatest population, what is its percentage to its country population?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: When did the United States of America attained it's Independence?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the peak height of the highest volcanic type of mountain? Give it's name. peak means the highest"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the name of the most recently founded organization in Saudi Arabia? Saudi Arabia is a country"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the 5th highest infant mortality rate?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which country has the widest range of religious practices?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What river has the 17th-longest length overall? Specify it's length."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: When did the country whose capital is Nouakchott attained it's independence?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the name of the country with the smallest population, and what is its gross domestic product? GDP refers to gross domestic product"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which Zaire region is home to the country's deepest lake's Name it and list its depth."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the maximal elevation of the summit of the shortest mountain that can be found in the island of Madagaskar? Indicate what type of mountain it is. The elevation of the summit refers to height"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which nation, with a population ranging from 60,000,000 to 99,000,000, has the greatest gross domestic product? GDP refers to gross domestic product; Nation and country are synonyms"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Which Asian country gave its agricultural sector the largest share of its gross domestic product? Gross domestic product = GDP; Largest share of GDP in agricultural sector was mentioned in economy.Agriculture"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What form of governance does the least prosperous nation in the world have? Nation and country are synonyms; Form of governance was mentioned in politics.Government; Least prosperous means lowest GDP"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What year saw the greatest number of organizations created on the European continent?"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What other country does the most populated nation in the world share a border with and how long is the border between the two nations? Nation and country are synonyms"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the population density of the nation whose capital city is in the Distrito Federal province, and what portion of its gross domestic product is devoted to its industries? ation and country are synonyms; Gross domestic product = GDP; Portion of GDP devoted to industries appears in economy.Industry; Population Density = Population / Area"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Lists all governments with a parliamentary democracy that achieved their independence between 01/01/1950 and 12/31/1999. Inhabitants, synonymous with population"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What percentage of countries became independent during the year 1960? Percentage = count(countries independent 1960) / total num of countries"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: List all deserts that are not between latitudes 30 and 40."
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: Indicate the coordinates of all the deserts whose area is in more than one country. coordinates consists of Latitude, Longitude"
mondial_geo,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE borders (
Country1 text,
Country2 text,
Length real,
);
CREATE TABLE city (
Name text,
Country text,
Province text,
Population integer,
Longitude real,
Latitude real,
);
CREATE TABLE continent (
Name text,
Area real,
PRIMARY KEY (Name),
);
CREATE TABLE country (
Name text,
Code text,
Capital text,
Province text,
Area real,
Population integer,
PRIMARY KEY (Code),
);
CREATE TABLE desert (
Name text,
Area real,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE economy (
Country text,
GDP real,
Agriculture real,
Service real,
Industry real,
Inflation real,
PRIMARY KEY (Country),
);
CREATE TABLE encompasses (
Country text,
Continent text,
Percentage real,
);
CREATE TABLE ethnicGroup (
Country text,
Name text,
Percentage real,
);
CREATE TABLE geo_desert (
Desert text,
Country text,
Province text,
);
CREATE TABLE geo_estuary (
River text,
Country text,
Province text,
);
CREATE TABLE geo_island (
Island text,
Country text,
Province text,
);
CREATE TABLE geo_lake (
Lake text,
Country text,
Province text,
);
CREATE TABLE geo_mountain (
Mountain text,
Country text,
Province text,
);
CREATE TABLE geo_river (
River text,
Country text,
Province text,
);
CREATE TABLE geo_sea (
Sea text,
Country text,
Province text,
);
CREATE TABLE geo_source (
River text,
Country text,
Province text,
);
CREATE TABLE island (
Name text,
Islands text,
Area real,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE islandIn (
Island text,
Sea text,
Lake text,
River text,
);
CREATE TABLE isMember (
Country text,
Organization text,
Type text,
);
CREATE TABLE lake (
Name text,
Area real,
Depth real,
Altitude real,
Type text,
River text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE language (
Country text,
Name text,
Percentage real,
);
CREATE TABLE located (
City text,
Province text,
Country text,
River text,
Lake text,
Sea text,
);
CREATE TABLE locatedOn (
City text,
Province text,
Country text,
Island text,
);
CREATE TABLE mergesWith (
Sea1 text,
Sea2 text,
);
CREATE TABLE mountain (
Name text,
Mountains text,
Height real,
Type text,
Longitude real,
Latitude real,
PRIMARY KEY (Name),
);
CREATE TABLE mountainOnIsland (
Mountain text,
Island text,
);
CREATE TABLE organization (
Abbreviation text,
Name text,
City text,
Country text,
Province text,
Established date,
PRIMARY KEY (Abbreviation),
);
CREATE TABLE politics (
Country text,
Independence date,
Dependent text,
Government text,
PRIMARY KEY (Country),
);
CREATE TABLE population (
Country text,
Population_Growth real,
Infant_Mortality real,
PRIMARY KEY (Country),
);
CREATE TABLE province (
Name text,
Country text,
Population integer,
Area real,
Capital text,
CapProv text,
);
CREATE TABLE religion (
Country text,
Name text,
Percentage real,
);
CREATE TABLE river (
Name text,
River text,
Lake text,
Sea text,
Length real,
SourceLongitude real,
SourceLatitude real,
Mountains text,
SourceAltitude real,
EstuaryLongitude real,
EstuaryLatitude real,
PRIMARY KEY (Name),
);
CREATE TABLE sea (
Name text,
Depth real,
PRIMARY KEY (Name),
);
CREATE TABLE target (
Country text,
Target text,
PRIMARY KEY (Country),
);
---------------------
QUESTION: What is the provincial capital of the province with a population of less than 80,000 that has the highest average population per area? Average population per area = population / area"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many customers have never married? MARITAL_STATUS = 'Never-married';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among all the customers, how many of them are teenagers? teenager is a person aged between 13 and 19 years;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Please list the occupations of the customers with an education level of 11. education level of 11 refers to EDUCATIONNUM = 11;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Of the first 60,000 customers' responses to the incentive mailing sent by the marketing department, how many of them are considered a true response? RESPONSE = 'true';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the customers over 30, how many of them are Machine-op-inspcts? over 30 refers to age > 30; OCCUPATION = 'Machine-op-inspct';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many female customers have an education level of over 11? education level of 11 refers to EDUCATIONNUM = 11; SEX = 'Female';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are female? RESPONSE = 'true'; SEX = 'Female';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department. over 40 refers to age > 40; RESPONSE = 'true';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the male customers, how many of them come from a place with over 30,000 inhabitants? SEX = 'Male', over 30,000 inhabitants refer to NHABITANTS_K > 30; place refers to GEOID;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many customers are from the place with the highest average income per month? place with the highest average income per month refers to GEOID where MAX(INCOME_K);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts? place with more than 20,000 and less than 30,000 inhabitants refers to GEOID where INHABITANTS_K BETWEEN 20 AND 30; OCCUPATION = 'Machine-op-inspct';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Which customer come from a place with more inhabitants, customer no.0 or customer no.1? place with more inhabitants refers to GEOID where ID = 0 OR ID = 1 and MAX(NHABITANTS_K);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants? RESPONSE = 'true'; place with more than 30,000 inhabitants refers to GEOID where INHABITANTS_K > 30;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males? RESPONSE = 'true'; SEX = 'Male'; MARITAL_STATUS = 'Divorced';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department? place with the highest average income per month refers to GEOID where MAX(INCOME_K); RESPONSE = 'true';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the number of inhabitants of the place the most customers are from? the most customers are from refers to GEOID where MAX(COUNT(ID)); number of inhabitants refers to INHABITANTS_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the customers who come from the place with 25746 inhabitants, how many of them are male? place with 44114 inhabitants refers to GEOID where INHABITANTS_K = 44.114; SEX = 'Male';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are teenagers? RESPONSE = 'true'; teenagers are people aged between 13 and 19 years;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the average education level of customers from the place with the highest average income per month? place with the highest average income per month refers to GEOID where MAX(INCOME_K); average education level refers to AVG(EDUCATIONNUM);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the average age of first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department? RESPONSE = 'true'; AVG(age);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many of the customers are male? SEX = 'Male';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List down the customer's geographic identifier who are handlers or cleaners. geographic identifier refers to GEOID; OCCUPATION = 'Handlers-cleaners';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the total number of customers with an age below 30? age below 30 refers to age < 30;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List down the geographic identifier with an income that ranges from 2100 to 2500. geographic identifier with an income that ranges from 2100 to 2500 refers to GEOID where INCOME_K BETWEEN 2100 AND 2500;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In geographic identifier from 20 to 50, how many of them has a number of inhabitants below 20? geographic identifier from 20 to 50 refers to GEOID BETWEEN 20 AND 50; number of inhabitants below 20 refers to INHABITANTS_K < 20;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the number of inhabitants and income of geographic identifier 239? geographic identifier 239 refers to GEOID = 239; number of inhabitants refers to INHABITANTS_K; income refers to INCOME_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Give the level of education and occupation of customers ages from 20 to 35 with an income K of 2000 and below. customers ages from 20 to 35 refer to ID where age BETWEEN 20 AND 35; income K of 2000 and below refers to INCOME_K < 2000; level of education refers to EDUCATIONNUM;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List down the number of inhabitants of customers with a divorced marital status and older than 50 years old. number of inhabitants refers to INHABITANTS_K; older than 50 years old refers to age < 50; MARITAL_STATUS = 'Divorced;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the geographic identifier and income of the oldest customer? the oldest customer refers to MAX(age); geographic identifier refers to GEOID; income refers to INCOME_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the male customers with an level of education of 4 and below, list their income K. male customers with an level of education of 4 and below refer to SEX = 'Male' where EDUCATIONNUM < 4;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the occupation and income of male customers with an level of education of 4 to 6. male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In widowed male customers ages from 40 to 60, how many of them has an income ranges from 3000 and above? widowed male customers ages from 40 to 60 refer to SEX = 'Male' where age BETWEEN 40 AND 60 and MARITAL_STATUS = 'Widowed'; income ranges from 3000 and above refers to INCOME_K BETWEEN 2000 AND 3000;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the occupation of customers within number of inhabitants ranges of 30 to 40? number of inhabitants ranges of 30 to 40 refers to INHABITANTS_K BETWEEN 30 AND 40;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the widowed female customers, give the income of those who has an level of education of 5 and below. widowed female customers refer to SEX = 'Female' where MARITAL_STATUS = 'Widowed'; level of education of 5 and below refers to EDUCATIONNUM ≤ 5;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the marital status of customers within the age of 40 to 60 that has the highest income among the group. age of 40 to 60 refers to age BETWEEN 40 AND 60; the highest income refers to MAX(INCOME_K);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the number of inhabitants of male customers ages from 20 to 30 years old who are farming or fishing? male customers ages from 20 to 30 years old refer to SEX = 'Male' where age BETWEEN 20 AND 30; farming or fishing refers to OCCUPATION; number of inhabitants refers to INHABITANTS_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the customers with a marital status of married-civ-spouse, list the number of inhabitants and age of those who are machine-op-inspct. OCCUPATION = 'Machine-op-inspct'; number of inhabitants refers to INHABITANTS_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In female customers ages from 50 to 60, how many of them has an number of inhabitants ranges from 19 to 24? female customers ages from 50 to 60 refer to SEX = 'Female' where age BETWEEN 50 AND 60; number of inhabitants ranges from 19 to 24 refers to INHABITANTS_K BETWEEN 19 AND 24;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers? age greater than the 80% of average age refers to age > (AVG(age) * 0.8); income refers to INCOME_K; number of inhabitants refers to INHABITANTS_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In customers with marital status of never married, what is the percentage of customers with income of 2500 and above? DIVIDE(COUNT(INCOME_K ≥ 2500 where MARITAL_STATUS = 'Never-married'), COUNT(INCOME_K where MARITAL_STATUS = 'Never-married')) as percentage;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Find and list the id and geographic ID of the elderly customers with an education level below 3. elderly customers with an education level below 3 refer to age > 65 where EDUCATIONNUM < 3; geographic ID refers to GEOID;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the geographic id of places where the income is above average. geographic ID refers to GEOID; income is above average refers to INCOME_K > DIVIDE(SUM(INCOME_K), COUNT(GEOID));"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Calculate the number of customers who did not respond in February of 2007. did not respond refers to RESPONSE = 'false'; February of 2007 refers to REF_DATE BETWEEN '2007-02-01 12:00:00.0'AND '2007-02-28 12:00:00.0';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many teenagers are working as Machine-op-inspct? teenager is a person aged between 13 and 19 years; OCCUPATION = 'Machine-op-inspct';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Of customers who provide other services, how many are from places where inhabitants are more than 20000? OCCUPATION = 'Other-service'; inhabitants are more than 20000 refer to INHABITANTS_K > 20;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the male customer in their twenties, how many are from places where the average income is more than 3000? male customer in their twenties refer to SEX = 'Male' where age BETWEEN 20 AND 29; average income is more than 3000 refers to INCOME_K > 3000;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What percentage of elderly customers who are never married in the place with geographic ID 24? elderly customers refer to age > 65; DIVIDE(COUNT(ID where age > 65, MARITAL_STATUS = 'never married' and GEOID = 24), COUNT(ID where GEOID = 24)) as percentage;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties? average income per inhabitant above 3000 refers to INCOME_K > 3000; eighties refer to age BETWEEN 80 AND 89; DIVIDE(COUNT(INCOME_K > 3000 and age BETWEEN 80 AND 89), COUNT(INCOME_K > 3000 )) as percentage;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: How many of the customer's reference ID that has a TRUE response? reference ID refers to REFID;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List down the customer's reference ID with true response. reference ID refers to REFID;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the total number of widowed customers with an age below 50? widowed customers with an age below 50 refer to MARITAL_STATUS = 'Widowed' where age < 50;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List down the geographic identifier with an number of inhabitants less than 30. geographic identifier with an number of inhabitants less than 30 refers to GEOID where INHABITANTS_K < 30;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In geographic identifier from 10 to 30, how many of them has an income below 2000? GEOID BETWEEN 10 AND 30; INCOME_K < 2000;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the marital status of the customer ages 62 with an level of education of 7? customer ages 62 with an level of education of 7 refer age = 62 where EDUCATIONNUM = 7;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List down the number of inhabitants of customers with a widowed marital status and false response . number of inhabitants refers to INHABITANTS_K; RESPONSE = 'false';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the response and number of inhabitants of the oldest female customer? number of inhabitants refers to INHABITANTS_K; oldest female customer refers to SEX = 'Female' where MAX(age);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the female customers with an level of education of 3 and below, list their income. female customers with level of education of 3 and below refer to SEX = 'Female' where EDUCATIONNUM ≤ 3; income refers to INCOME_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the level of education and income of customers ages from 30 to 55 with a true response. ages from 30 to 55 refer to age BETWEEN 30 AND 55; RESPONSE = 'true'; income refers to INCOME_K; education level refers to EDUCATIONNUM;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In male customers ages from 30 to 50, how many of them has an income ranges from 2000 to 2300? male customers ages from 30 to 50 refer to SEX = 'Male' where age BETWEEN 30 AND 50; income ranges from 2000 to 2300 refers to INCOME_K BETWEEN 2000 AND 3000;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group. age of 20 to 30 refers to age BETWEEN 20 AND 30; the highest number of inhabitants refers to MAX(INHABITANTS_K);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct? female customers ages from 30 to 55 years old refer to SEX = 'Female' where age BETWEEN 30 AND 55; income refers to INCOME_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the marital status and response of female customers with an level of education of 8 and above. female customers with an level of education of 8 and above refer to SEX = 'Female' where EDUCATIONNUM ≥ 8;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the age of female customers within the number of inhabitants below 30? female customers within the number of inhabitants below 30 refer to SEX = 'Female' where INHABITANTS_K < 30;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the divorced male customers, give the income and response of those who has an level of education of 6 and above. divorced male customers refer to SEX = 'Male' where MARITAL_STATUS = 'Divorced';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the occupation and response of female customers within the number of inhabitants range of 20 to 25? female customers within the number of inhabitants range of 20 to 25 refer to SEX = 'Female' where INHABITANTS_K BETWEEN 20 AND 25;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response? DIVIDE(COUNT(OCCUPATION = 'Handlers-cleaners', SEX = 'Male' and RESPONSE = 'true'), COUNT(OCCUPATION = 'Handlers-cleaners' and SEX = 'Male')) as percentage;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response? reference ID greater than the 50% of average of number of false response refers to REFID > DIVIDE(MULTIPLY(0.5, COUNT(RESPONSE = 'false')), COUNT(RESPONSE)); income refers to INCOME_K; number of inhabitants refer to INHABITANTS_K;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the ratio of male and female among the age of teenager when the education is above 10? ratio = DIVIDE(COUNT(SEX = 'Male' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10),COUNT(SEX = 'Female' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10));"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: What is the geographic ID and total income per year when the average income is above 3300 dollar. total income per year refers to MULTIPLY(12, INHABITANTS_K, INCOME_K) where INCOME_K > 3300; geographic ID refers to GEOID;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Point out the greater one between the number of actual responding and not responding to mailing. COUNT(REFID where RESPONSE = 'true')>or<COUNT(REFID where RESPONSE = 'false');"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Find out the yearly income of geographic ID when the customer is female and occupation as sales. yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12); SEX = 'Female';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the geographic ID which has 33.658K of inhabitants, describe the education, occupation and age of female widow. geographic ID which has 33.658K of inhabitants refers to GEOID where INHABITANTS_K = 33.658; education refers to EDUCATIONNUM; female widow refers to SEX = 'Female' where MARITAL_STATUS = 'Widowed';"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Find the response status to customer whose geographic ID of 134. GEOID = 134;"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Describe the average income per month and yearly income of the geographic ID in which customer of ID ""209556"" and ""290135"". the average income per month refers to INCOME_K; yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12);"
software_company,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Demog (
GEOID integer,
INHABITANTS_K real,
INCOME_K real,
A_VAR1 real,
A_VAR2 real,
A_VAR3 real,
A_VAR4 real,
A_VAR5 real,
A_VAR6 real,
A_VAR7 real,
A_VAR8 real,
A_VAR9 real,
A_VAR10 real,
A_VAR11 real,
A_VAR12 real,
A_VAR13 real,
A_VAR14 real,
A_VAR15 real,
A_VAR16 real,
A_VAR17 real,
A_VAR18 real,
PRIMARY KEY (GEOID),
);
CREATE TABLE mailings3 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Customers (
ID integer,
SEX text,
MARITAL_STATUS text,
GEOID integer,
EDUCATIONNUM integer,
OCCUPATION text,
age integer,
PRIMARY KEY (ID),
);
CREATE TABLE Mailings1_2 (
REFID integer,
REF_DATE datetime,
RESPONSE text,
PRIMARY KEY (REFID),
);
CREATE TABLE Sales (
EVENTID integer,
REFID integer,
EVENT_DATE datetime,
AMOUNT real,
PRIMARY KEY (EVENTID),
);
---------------------
QUESTION: Among the reference ID of under 10 who got response by marketing department, compare their education status. reference ID of under 10 refers to REFID < 10; got response refers to RESPONSE = 'true'; education status refers to EDUCATIONNUM;"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many community areas are there in Central Chicago? Central Chicago refers to side = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which district is the community area Lincoln Square grouped into? district refers to side; community area Lincoln Square refers to community_area_name = 'Lincoln Square'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which district in Chicago has the most community areas? district refers to side; the most community areas refers to max(count(side))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which community area has the least population? community area refers to community_area_name; the least population refers to min(population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is the person responsible for the crime cases in Central Chicago? the person responsible for the crime cases refers to commander; Central Chicago refers to district_name = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the email address to contact the administrator of Central Chicago? email address refers to email; Central Chicago refers to district_name = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: To which community area does the neighborhood Albany Park belong? community area refers to community_area_name; the neighborhood Albany Park refers to neighborhood_name = 'Albany Park'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many neighborhoods are there in the community area of Lincoln Square? the community area of Lincoln Square refers to community_area_name = 'Lincoln Square'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the names of all the neighborhoods in the community area with the most population. name of neighborhood refers to neighborhood_name; the most population refers to max(population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the names of all the neighborhoods in Central Chicago. name of neighborhood refers to neighborhood_name; Central Chicago refers to side = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the precise location coordinates of all the crimes in Central Chicago. location coordinates refers to latitude, longitude; Central Chicago refers to district_name = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes had happened in Central Chicago? Central Chicago refers to district_name = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among all the crimes that had happened in Central Chicago, how many of them were cases of domestic violence? Central Chicago refers to district_name = 'Central'; case of domestic violence refers to domestic = 'TRUE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the case numbers of all the crimes with no arrest made in Central Chicago. no arrest made refers to arrest = 'FALSE'; Central Chicago refers to district_name = 'Central'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes had happened in the community area with the most population? the most population refers to max(population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes in Woodlawn, how many of them happened in January, 2018? Woodlawn refers to community_area_name = 'Woodlawn'; in January 2018 refers to date like '%1/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: More crimes happened in which community area in January, 2018, Woodlawn or Lincoln Square? in January 2018 refers to date like '%1/2018%'; Woodlawn or Lincoln Square refers to community_area_name in ('Woodlawn', 'Lincoln Square'); number of crime refers to COUNT(report_no); the higher the report_no, the more crimes happened in the community;"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the fax number for the district with the most number of crimes in January, 2018? fax number refers to fax; the most number of crimes refers to max(count(case_number)); in January 2018 refers to date like '%1/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the average number of crimes in a neighborhood in Central Chicago? Central Chicago refers to side = 'Central'; average number = divide(count(report_no), count(community_area_no))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes in all the districts in Chicago, what is the percentage of them happening in the Central district? the Central district refers to district_name = 'Central'; percentage = divide(count(case_number where district_name = 'Central'), count(case_number)) * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many community areas are in the Far North side? the Far North side refers to side = 'Far North'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is the commander of Morgan Park district? Morgan Park district refers to district_name = 'Morgan Park'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Where did case No. JB100065 happen? Give the name of the district. case No. JB100065 refers to case_number = 'JB100065'; name of the district refers to district_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Where is the coordinate (41.66236555, -87.63470194) located? Give the name of the district. coordinate (41.66236555, -87.63470194) refers to latitude = '41.66236555' AND longitude = '-87.63470194'; name of the district refers to district_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the name of the person who was responsible for case No.JB524952. name of the person refers to commander; case No.JB524952 refers to case_number = 'JB524952'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many simple assaults happened on 2018/9/8? simple assault refers to primary_description = 'ASSAULT'AND secondary_description = 'SIMPLE'; on 2018/9/8 refers to date like '%9/8/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which district had the most number of first degree murders? Give the district number. the most number refers to max(count(case_number)); first degree murder refers to secondary_description = 'FIRST DEGREE MURDER'; district number refers to district_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How severe was case JB296775? Give the index code for severity. index code refers to iucr_no; case JB296775 refers to case_number = 'JB296775'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the name of the community area which had the most pocket-picking thefts. name of the community area refers to community_area_name; the most refers to max(case_number); pocket-picking theft refers to primary_description = 'THEFT' AND secondary_description = 'POCKET-PICKING'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who was the alderman of the legislative district where case No. JB103470 took place? Give the full name. case No. JB103470 refers to case_number = 'JB103470'; full name refers to alderman_first_name, alderman_last_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the neighborhood name of West Englewood community. West Englewood community refers to community_area_name = 'West Englewood'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many different neighborhoods are there in Roseland community? Roseland community refers to community_area_name = 'Roseland'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the FBI code description of case No.JB134191. case No.JB134191 refers to case_number = 'JB134191'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Tell the number of cases with arrests in North Lawndale community. number of cases refers to count(case_number); arrest refers to arrest = 'TRUE'; North Lawndale community refers to community_area_name = 'North Lawndale'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the percentage of under $500 thefts among all cases that happened in West Englewood? under $500 refers to secondary_description = '$500 AND UNDER'; theft refers to primary_description = 'THEFT'; West Englewood refers to community_area_name = 'West Englewood'; percentage = divide(count(case_number where secondary_description = '$500 AND UNDER'), count(case_number)) where primary_description = 'THEFT' and community_area_name = 'West Englewood' * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the percentage of larceny cases among all cases that happened in Edgewater community? larceny case refers to title = 'Larceny'; Edgewater community refers to community_area_name = 'Edgewater'; percentage = divide(count(case_number where title = 'Larceny'), count(case_number)) where community_area_name = 'Edgewater' * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes were committed at 018XX S KOMENSKY AVEin May 2018?  in May 2018 refers to date LIKE '5/%/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the name of the community with the highest population? name of the community refers to community_area_name; the highest population refers to max(population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many incidents of domestic violence occurred in an abandoned building in 2018? domestic violence refers to domestic = 'TRUE'; in an abandoned building refers to location_description = 'ABANDONED BUILDING'; in 2018 refers to date LIKE '%2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the population of the district with the least population? the least population refers = min(sum(population))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many arrests were made in 2018 in an animal hospital under FBI code 08B? arrest refers to arrest = 'TRUE'; in 2018 refers to date LIKE '%2018%'; in an animal hospital refers to location_description = 'ANIMAL HOSPITAL'; FBI code 08B refers to fbi_code_no = '08B'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the detailed description of all the crimes against society. crime against society refers to crime_against = 'Society'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is the commanding officer in the district with the highest number of disorderly conduct? commanding officer refers to commander; the highest number refers to max(count(district_no)); disorderly conduct refers to title = 'Disorderly Conduct'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which crime was committed the most by criminals? crime refers to title; committed the most refers to max(fbi_code_no)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In Albany Park, how many arrests were made in an apartment due to criminal sexual abuse? Albany Park refers to district_name = 'Albany Park'; in an apartment refers to location_description = 'APARTMENT'; criminal sexual abuse refers to title = 'Criminal Sexual Abuse'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the precise location or coordinate where most of the robberies in Rogers Park occurred? precise location or coordinate refers to latitude, longitude; most refers to fbi_code_no = 3; robbery refers to title = 'Robbery'; Rogers Park refers to community_area_name = 'Rogers Park'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many solicit on public way prostitution crimes were arrested in West Garfield Park? solicit on public way prostitution crime refers to secondary_description = 'SOLICIT ON PUBLIC WAY' AND primary_description = 'PROSTITUTION'; arrested refers to arrest = 'TRUE'; West Garfield Park refers to community_area_name = 'West Garfield Park'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In the most populated ward, how many incidents of domestic violence were reported in a bar or tavern? the most populated refers to max(population); domestic violence refers to domestic = 'TRUE'; in a bar or tavern refers to location_description = 'BAR OR TAVERN'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many neighborhoods are there in Near North Side? Near North Side refers to community_area_name = 'Near North Side'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Out of all the incidents of domestic violence reported at the ward represented by alderman Walter Burnett Jr., how many were arrested? domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the short description of the crime committed the most by criminals in the least populated community? short description refers to title; committed the most refers to max(fbi_code_no); the least populated community refers to min(population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the legislative district's office address where 010XX W LAKE ST is located? the legislative district's office address refers to ward_office_address; 010XX W LAKE ST refers to block = '010XX W LAKE ST'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the name of the community that has the highest number of crimes related to prostitution? name of the community refers to community_area_name; the highest number of crimes refers to max(case_number); prostitution refers to primary_description = 'PROSTITUTION'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many vandalisms were arrested in the ward represented by Edward Burke? vandalism refers to title = 'Vandalism'; arrested refers to arrest = 'TRUE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many domestic violence cases were reported in May 2018? domestic violence refers to domestic = 'TRUE'; in May 2018 refers to date LIKE '5/%/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the IUCR numbers and index status of homicide incidents. index status refers to index_code; homicide incident refers to primary_description = 'HOMICIDE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Provide the responsible person and his/her email address of Chicago Lawn. responsible person refers to commander; email address refers to email; Chicago Lawn refers to district_name = 'Chicago Lawn'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the alderman's full name of the most crowded ward? alderman's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; the most crowded refers to max(population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the community area names in the Northwest. the Northwest refers to side = 'Northwest'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List down the titles and descriptions of the crimes cases against persons. crime case against persons refers to crime_against = 'Persons'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Describe the specific description and case locations under IUCR 142. specific description refers to secondary_description; location refers to latitude, longitude; IUCR 142 refers to iucr_no = 142"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes were handled by Brendan Reilly on 7th October 2018? 7th October 2018 refers to date like '10/7/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many cases have been arrested among the crimes that happened in the restaurant of Englewood? arrested refers to arrest = 'TRUE'; restaurant refers to location_description = 'RESTAURANT'; Englewood refers to district_name = 'Englewood'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Provide case numbers, aldermen's full names, and district names of the crimes that happened in 0000X N FRANCISCO AVE. aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; 0000X N FRANCISCO AVE refers to block = '0000X N FRANCISCO AVE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes were Misc Non-Index Offense? Misc Non-Index Offense refers to title = 'Misc Non-Index Offense'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List down the neighborhood areas of Douglas. neighborhood area refers to neighborhood_name; Douglas refers to community_area_name = 'Douglas'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Calculate the average crime rate per month in the highest populous area. the highest populous refers to max(population); average crime rate per month = divide(count(report_no where population = max(population)), 12)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes in the Central, calculate the percentage of larceny incidents. Central refers to side = 'Central'; larceny refers to title = 'Larceny'; percentage = divide(count(report_no where title = 'Larceny'), count(report_no)) where side = 'Central' * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the location descriptions and aldermen's full names of the arson by explosive. aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; arson by explosive refers to primary_description = 'ARSON' AND secondary_description = 'BY EXPLOSIVE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Provide the occurrence date and location of the deceptive practice due to the unlawful use of recorded sound. location refers to latitude, longitude; deceptive practice refers to primary_description = 'DECEPTIVE PRACTICE'; unlawful use of recorded sound refers to secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the criminal sexual assaults in the district of Adnardo Gutierrez, how many cases happened in the residence? criminal sexual assault refers to title = 'Criminal Sexual Assault'; Adnardo Gutierrez refers to commander = 'Adnardo Gutierrez'; in the residence refers to location_description = 'RESIDENCE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many percent of domestic violence cases were arrested in West Pullman? domestic violence refers to domestic = 'TRUE'; arrested refers to arrest = 'TRUE'; West Pullman refers to community_area_name = 'West Pullman'; percent = divide(count(report_no where arrest = 'TRUE'), count(report_no)) where domestic = 'TRUE' and community_area_name = 'West Pullman' * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Calculate the percentage of the domestic violence cases handled by Christopher Taliaferro. Among them, list report numbers of cases that happened in the bank. domestic violence refers to domestic = 'TRUE'; report number refers to report_no; in the bank refers to location_description = 'BANK'; percentage = divide(count(report_no where domestic = 'TRUE'), count(report_no)) * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many aldermen have ""James"" as their first name?"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes are commited on January 1, 2018? on January 1 2018 refers to date LIKE '1/1/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Calculate the average population of community areas in the West side. the West side refers to side = 'West'; average population = avg(population) where side = 'West'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the cases reported in the ward with Edward Burke as the alderman and happened in the community area with the highest population, provide the report number of the crime with the highest beat. the highest population refers to max(population); report number refers to report_no; the highest beat refers to max(beat)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many of the crimes that happened in the street have FBI title ""Homicide 1st & 2nd Degree""? in the street refers to location_description = 'STREET'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is the alderman in the ward associated with the crime with report number 23769? alderman refers to alderman_suffix, alderman_first_name, alderman_last_name; report number 23769 refers to report_no = 23769"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the case numbers of domestic violence crimes reported in Lincoln Square. domestic violence refers to domestic = 'TRUE'; Lincoln Square refers to community_area_name = 'Lincoln Square'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes reported to the ward located at 1958 N. Milwaukee Ave., list down the report number of the crimes happened inside the apartment. 1958 N. Milwaukee Ave. refers to ward_office_address = '1958 N. Milwaukee Ave.'; report number refers to case_number; inside the apartment refers to location_description = 'APARTMENT'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the total number of crimes that happened in Bridgeport with beat less than 1000? Bridgeport refers to community_area_name = 'Bridgeport'; with beat less than 1000 refers to beat < 1000; total number = count(beat) where community_area_name = 'Bridgeport' and beat < 1000"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the report number of crimes reported in a community area in the far north side with a population greater than 60,000. report number refers to report_no; the far north side refers to side = 'Far North'; population greater than 60,000 refers to population > '60000'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the report number of crimes against property happened in Riverdale. crime against property refers to crime_against = 'Property'; Riverdale refers to community_area_name = 'Riverdale'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many domestic violence cases were brought in the ward that uses ""ward13@cityofchicago.org""? domestic violence refers to domestic = 'TRUE'; uses ""ward13@cityofchicago.org"" refers to ward_email = 'ward13@cityofchicago.org'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the district address associated with the case JB107731? case JB107731 refers to case_number = 'JB107731'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Calculate the total beat of the crimes reported in a community area in the central side with population of 50,000 and above. the central side refers to side = 'Central'; population of 50,000 and above refers to population > '50000'; total beat = sum(beat) where side = 'Central' and population > '50000'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the case number of crimes against society that happened in June 2018. crime against society refers to crime_against = 'Society'; in June 2018 refers to date LIKE '6/%/2018%'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes located in the community area with the highest population, what is the percentage of domestic violence? the highest population refers to max(population); domestic violence refers to domestic = 'TRUE'; percentage = divide(count(domestic = 'TRUE'), count(domestic)) where population = max(population) * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the case number of the crimes in wards with population below 52000 that have beat greater than the 90% of the average beat of all crimes. population below 52000 refers to population < 52000; beat greater than the 90% of the average beat refers to beat > multiply(avg(beat), 0.9) where population < 52000"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the area name of the communities in the Far north side, which has a population of more than 50000 but less than 70000. area name refers to community_area_name; the Far north side refers to side = 'Far North'; a population of more than 50000 but less than 70000 refers to population BETWEEN '50000' AND '70000'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the coordinate of the alleys where a crime was reported and an arrest was made. coordinate refers to latitude, longitude; alley refers to location_description = 'ALLEY'; an arrest was made refers to arrest = 'TRUE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Find the commander's name, email address, and phone number of the Ogden district. commander's name refers to commander; email address refers to email; phone number refers to phone"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the FBI code and definition of Gambling? FBI code refers to fbi_code_no; definition refers to description; Gambling refers to title = 'Gambling'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes, what percentage are severe? severe refers to index_code = 'I'; percentage = divide(count(iucr_no where index_code = 'I'), count(iucr_no)) * 100%"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What kind of location in Austin reported the most number of crimes? ""Austin"" is the district_name; the most number of crime refers to Max(Count(case_number)); kind of location refers to location_description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: On average, how many community areas are there in a side? average = Divide(Count(ward_no), Count(side))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which community area has the highest number of crimes reported on the street? reported on the street refers to location_description = 'STREET'; community area with highest number of crime refers to Max(Count(location_description)); community area refers to community_area_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the average number of reckless homicides that happened in a district? ""RECKLESS HOMICIDE"" is the secondary_description; average = Divide (Count(report_no), Count(district_name))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Find the ward office's address and phone number of the ward where the most crimes without arrest occurred. the most crime without arrest refers to Max(Count(arrest = 'FALSE')); phone number refers to ward_office_phone; address refers to ward_office_address"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the case number and coordinates of the places where child abduction is reported. ""CHILD ABDUCTION"" is the secondary_description; coordinates refers to latitude, longitude"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the most reported crime in the Northwest side? most reported crime refers to max(Count(secondary_description))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Find the community area where the least number of domestic crimes happened. least number of domestic crime refers to Min(Count(domestic = ""TRUE"")); community area refers to community_area_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In drug abuse crimes, what percentage is related to cannabis? drug abuse crime refer to title = 'Drug Abuse'; percentage = Divide (Count (secondary_description LIKE '%CANNABIS%'), Count (secondary_description)) * 100"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the average number of less severe crimes reported a day in February of 2018? day in February of 2018 refers to date LIKE '2/%/2018'; less severe crime refers to index_code = 'N'; average = Divide (Count(case_number), 28)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List the name and population of the communities where more than average solicit for prostitutes were reported. ""SOLICIT FOR PROSTITUTE"" is the secondary_description; more than average refers to count(iucr_no) > Divide (Count(secondary_description = 'SOLICIT FOR PROSTITUTE'), Count(iucr_no)); name of community refers to community_area_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the incidents reported in Harrison, what percentage are disorderly conduct? ""Harrison"" is the district_name;  'Disorderly Conduct' is the title; percentage = Divide (Count(title = 'Disorderly Conduct'), Count(report_no)) * 100; incident report refers to report_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Calculate the difference in the average number of vehicular hijackings and aggravated vehicular hijackings in the districts. ""VEHICULAR HIJACKING"" and ""AGGRAVATED VEHICULAR HIJACKING"" are both secondary_description; difference in average = Subtract (Divide(Count(secondary_description = 'VEHICULAR HIJACKING'), Count(district_name)), Divide(Count(secondary_description = ""AGGRAVATED VEHICULAR HIJACKING""), Count(district_name)))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes happened in longitude -8772658001?"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List all the crimes of the narcotic type that exist. narcotic type refers to primary_description = 'NARCOTICS'; crime refers to secondary_description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the first name of the aldermen of wards with more than 50,000 inhabitants? more than 50000 inhabitants refers to Population > 50000; first name of alderman refers to alderman_first_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List crimes that the FBI has classified as Drug Abuse by their report number. ""Drug Abuse"" is the title of crime"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many weapons violation crimes have occurred in the Calumet district? ""Calumet"" is the district_name; 'WEAPON VIOLATION' is the primary_description of crime"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the exact location of the crimes that occurred in the Belmont Cragin community? Belmont Cragin community refers to community_area_name = 'Belmont Cragin'; exact location refers to latitude, longitude"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many different types of crimes, according to the primary description, have occurred in the Hermosa neighborhood? ""Hermosa"" is the neighborhood_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many domestic crime cases has Commander Ronald A. Pontecore Jr. been responsible for investigating? domestic crime refers to domestic = 'TRUE'; person responsible for investigating refers to commander"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes against society happened in the Wentworth district according to the FBI? ""Wentworth"" is the district_name; crime against society refers to crime_against = 'Society"""
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What phone number does alderman Emma Mitts have to call if she wants to speak to the commander in charge of the investigation of the crimes that have occurred in her ward?"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crimes described as 'The theft of a motor vehicle' by the FBI have taken place in the Lake View community? lake view community refers to community_area_name = 'Lake View'; 'The theft of a motor vehicle' is the description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In which district have there been more intimidation-type crimes? more intimidation-type crime refers to Max(Count(primary_description = 'INTIMIDATION')); district refers to district_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What types of domestic crimes have occurred the most in the North Lawndale community? ""North Lawndale' is the community_area_name; occur the most domestic crime refers to Max(Count(domestic = 'TRUE'))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In which ward of more than 55,000 inhabitants are there more crimes of intimidation with extortion? more than 55000 inhabitants refers to Population > 55000; 'INTIMIDATION' is the primary_description; 'EXTORTION' refers to secondary_description; more crime refers to Count(ward_no)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which commander has had to deal with more cases of criminal sexual abuse? more cases of criminal sexual abuse refers to Max(Count(secondary_description = 'CRIMINAL SEXUAL ABUSE'))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What percentage of non-domestic crimes have occurred in the Jefferson Park district? non domestic crime refers to domestic = 'FALSE'; 'Jefferson Park' is the district_name; percentage = Divide (Count (case_number where domestic = 'FALSE'), Count(case_number)) * 100"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the average population of the wards where apartment crimes have been reported without arrests? apartment crime refers to location_description = 'APARTMENT';  without arrest refers to arrest = 'FALSE'; average population = AVG(Population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What are the full names of the top 5 most crowded ward aldermen? most crowded ward refers to Max(Population); full name of alderman refers to alderman_first_name, alderman_last_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crime against property are there?"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many districts are there in the police district building with a zip code of 60608? district refers to district_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is the crime against criminal sexual abuse? ""Criminal Sexual Abuse"" is the title of crime"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which community has the highest number of neighborhoods? community with highest number of neighborhoods refers to Max(Count(community_area_no)); community refers to community_area_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many severe crime incidents were reported at coordinate 41.64820151, -87.54430496? coordinates refers to latitude, longitude; severe crime refers to index_code = 'I'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is the commanding officer in the district with the highest number of reported crimes where no arrest has been made? where no arrest refers to arrest = 'FALSE'; highest number of crime refers to Max(Count(report_no)); commanding officer refers to commander"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What are the general and specific descriptions of the most common crime incidents that happened in an aircraft? in aircraft refers to location_description = 'AIRCRAFT'; general description refers to primary_description; specific description refers to secondary_description; most common crime incidents refers to Max(Count(iucr_no))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Between Deering and Near West districts, which district reported the most number of crime incidents that happened in a library? ""Deering"" and ""Near West"" are both district_name; 'LIBRARY' is the location_description; district with the most number of crime Max(Count(district_no))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many arrests have been made due to forcible entry burglary that took place in a day care center? ""BURGLARY"" is the primary_description; 'FORCIBLE ENTRY' is the secondary_description; 'DAY CARE CENTER' is the location_description; arrests have been made refers to arrest = 'TRUE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the name of the district with the highest number of domestic violence cases? domestic violence refers to domestic = 'TRUE'; highest number of case refers to Max(Count(district_no)); name of district refers to distric_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In the least populated community, what is the most common location of all the reported crime incidents? least populated refers to Min(Population); community refers to community_area_no; most common location refers to Max(Count(location_description))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many violation of laws are there where no arrest has been made? ""The violation of laws "" is the description of incidents; no arrest has been made refers to arrest = 'FALSE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the precise coordinate of the location where simple assault incidents happened the most in Chatham? precise coordinates refers to latitude, longitude; 'Simple Assault' is the title of incident; 'Chatham' is the community_area_name; most incident happened refers to Max(Count(latitude, longitude))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: In the South side community, what is the name of the community with the most reported incidents of unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person? ""unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person"" is the description; name of community refer to community_area_name; most reported incidents refers to Max(Count(fbi_code_no))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crime against society were reported in Englewood? ""Englewood"" is the community_area_name; 'Society' is the crime_against"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the weekly average number of fraud incidents that were reported in January 2018? Provide the description of the location where the majority of fraud incidents occurred in the said month. fraud incident refers to title = 'Fraud'; reported in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; description of location refers to location_description; weekly average refers to Divide (Count(report_no), 4); majority of incidents occurred refers to Max(Count(location_description))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list any three community areas with a population of more than 50,000. population of more than 50000 refers to Population > 50000; community area refers to community_area_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What are the communities that are grouped together on the central side? central side refers to side = 'Central'; community refers to community_area_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the difference between the number of communities that are located on the north and south sides with a population of more than 30,000? population of more than 30000 refers to Population > 30000; 'North' and 'South' both are the side; different number of community refers to Subtract(Count(Community_area_no where side = 'South'), Count(Community_area_no where side = 'North'))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list all of the contact information for the police district Near West. ""Near West"" is the district_name; all contact information refers to phone, fax, tty, twitter"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Who is responsible for crime cases in district Lincoln? ""Lincoln"" is the district_name; responsible for crime case refers to commander"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the general and specific description of incident 275? incident 275 refers to iucr_no = 275; general description refers to primary_description; specific description refers to secondary_description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the percentage of severe cases that are related to sexual assault? related to sexual assault refers to primary_description = 'CRIME SEXUAL ASSAULT'; severe case refers to index_code = 'I'; percentage = Divide (Count (iucr_no where primary_description = 'CRIME SEXUAL ASSAULT'), Count (iucr_no)) * 100"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What are the neighborhoods that are located in the North Center community area? ""North Center"" is the community_area_name; neighborhoods refers to neighborhood_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many neighborhoods can be found in the Forest Glen community area? ""Forest Glen"" is the community_area_name; neighborhoods refers to neighborhood_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the total population of the neighborhoods Avondale Gardens, Irving Park, Kilbourn Park, Merchant Park, Old Irving Park, and The Villa? ""Avoladale Gardens"", ""Irving Park"", ""Kilbourn Park"", ""Merchant Park"", ""Old Irving Park"", ""The Villa"" are neighborhood_name; total population refers to Sum(Population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many crime cases have been classified as ""Weapons Violation"" by the FBI? ""Weapons Violation"" is the title of crime; crime cases refers to report_no;"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list any three criminal sexual assault cases against persons where the criminals have been arrested. ""Criminal Sexual Assault"" is the title of crime; against person refers to crime_against = 'Persons'; criminals have been arrested refers to arrest = 'TRUE'; cases refers to case_number"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please state the district name where incident number JB106545 took place. incident number JB106545 refers to case_number = 'JB106545'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the general description for case number JB106010? general description refers to primary_description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please name three communities that experience the fraud incident. communities refers to community_area_name; 'Fraud Incident' is the title of crime"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What was the major type of crime that happened in the Rogers Park community area? ""Rogers Park"" is the community_area_name; major type of crime refers to title"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: At which district did the multiple homicide case number JB120039 occurred? multiple homicide refers to Count(case_number) > 1; district refers to district_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the percentage of crime cases that have been classified as ""drug abuse"" by the FBI and happened on the street? ""Drug Abuse"" is the title of crime; happened on the street refers to location_description = 'STREET';  percentage = Divide (Count(fbi_code_no where location_description = 'STREET'), Count(fbi_code_no)) * 100"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Provide the ward number with the highest population. highest population refers to Max(Population); ward number refers to ward_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the beat and location description of the case JB112212? case JB112212 refers to case_number = 'JB112212'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Give the FBI code for the crime described by ""The killing of one human being by another."" ""The killing of one human being by another"" is the description; FBI code refers to fbi_code_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Provide at least 5 ward office addresses associated with the crimes that happened in the community of Montclare. ""Montclare"" is the community_area_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List down the district's commander associated with the crime that happened at the yard and has a beat of 532. beat of 532 refers to beat = 532; happened in the Yard refers to location_description = 'YARD'; district commander refers to commander"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the neighborhood name in the community area of Lake View? ""Lake View"" is the community_area_name"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Name the neighborhood of the community area in crime with report number 23843? neighborhood refers to neighborhood_name; '23778' is the report_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the FBI description of the crime for report number 23778? ""23778"" is the report_no; FBI description refers to description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: List down the report number of crimes associated with the district commander named Jill M. Stevens. report number refers report_no; 'Jill M. Stevens"" is the commander"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes happened in the neighborhood called ""Avalon Park"", what is the percentage of crimes that happened inside the house? ""Avalon Park"" is the neghborhood_name; happened inside the house refers to location_description = 'HOUSE'; percentage = Divide (Count(location_description = 'HOUSE'), Count(location_description)) * 100"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the full name of the alderman of ward no.21? full name of alderman refers to alderman_first_name, alderman_last_name, alderman_name_suffix"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the ward ID of the most crowded ward? most crowded ward refers to Max(Population)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many incidents have the general description of ""ASSAULT"" in the IUCR classification? general description refers to primary_description; 'ASSAULT' is the primary_description; incidents refers to iucr_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: How many incidents are considered ""severe"" in the IUCR classification? severe refers to index_code = 'I'; incidents refers to iucr_no"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes with no arrest made, how many of them happened in the ward represented by alderman Pat Dowell? no arrest has been made refers to arrest = 'FALSE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which alderman represents the ward with the most number of crimes in January, 2018? Please give his or her full name. in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; ward with the most number of crime refers to Max (Count(ward_no)); full name refers to alderman_first_name, alderman_last_name, alderman_name_suffix"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the crimes in the ward with the most population, how many of them are cases of domestic violence? most population refers to Max(Population); domestic violence refers to domestic = 'TRUE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the location coordinates of all the incidents that had happened in the ward represented by alderman Pat Dowell. location coordinates refers to latitude, longitude"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: The ward represented by which alderman had more incidents in January, 2018, Pat Dowell or Sophia King? January, 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; had more incidents refers to Max(Count(ward_no))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the case numbers of all the incidents with the generic description of ""BATTERY"" in the IUCR classification. general description refers to primary_description; 'BATTERY' is the primary_description"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the incidents with the generic description of ""BATTERY"" in the IUCR classification, how many of them do not have arrests made? general description refers to primary_description; 'BATTERY' is the primary_description; do not have arrest made refers to arrest = 'FALSE'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the case numbers of all the crimes whose short description of the kind of crime is ""Homicide 1st & 2nd Degree"" in the FBI classification. ""Homicide 1st & 2nd Degree"" is the title"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among the incidents in January, 2018, how many of them were stated ""against Property"" in the FBI classification? in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; against property refers to crime_against = 'Property'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: District commander Robert A. Rubio was responsible for how many incidents in January, 2018? in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Which district commander was responsible for more incidents in January, 2018, Robert A. Rubio or Glenn White? in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; 'Robert A. Rubio' and 'Glenn White' are both commander; responsible for more incident refers to Max(count(ward_no))"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Please list the blocks where all the incidents in the district commanded by Robert A. Rubio took place. ""Robert A. Rubio"" is the commander"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: What is the average number of incidents per month in 2018 in the ward with the most population? in 2018 refers to date like '%2018%'; ward with most population refers to Max(Population); average number of incident per month refers to Divide(Count(ward_no), 12)"
chicago_crime,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Community_Area (
community_area_no integer,
community_area_name text,
side text,
population text,
PRIMARY KEY (community_area_no),
);
CREATE TABLE District (
district_no integer,
district_name text,
address text,
zip_code integer,
commander text,
email text,
phone text,
fax text,
tty text,
twitter text,
PRIMARY KEY (district_no),
);
CREATE TABLE FBI_Code (
fbi_code_no text,
title text,
description text,
crime_against text,
PRIMARY KEY (fbi_code_no),
);
CREATE TABLE IUCR (
iucr_no text,
primary_description text,
secondary_description text,
index_code text,
PRIMARY KEY (iucr_no),
);
CREATE TABLE Neighborhood (
neighborhood_name text,
community_area_no integer,
PRIMARY KEY (neighborhood_name),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
);
CREATE TABLE Ward (
ward_no integer,
alderman_first_name text,
alderman_last_name text,
alderman_name_suffix text,
ward_office_address text,
ward_office_zip text,
ward_email text,
ward_office_phone text,
ward_office_fax text,
city_hall_office_room integer,
city_hall_office_phone text,
city_hall_office_fax text,
Population integer,
PRIMARY KEY (ward_no),
);
CREATE TABLE Crime (
report_no integer,
case_number text,
date text,
block text,
iucr_no text,
location_description text,
arrest text,
domestic text,
beat integer,
district_no integer,
ward_no integer,
community_area_no integer,
fbi_code_no text,
latitude text,
longitude text,
PRIMARY KEY (report_no),
FOREIGN KEY (iucr_no) REFERENCES IUCR(iucr_no),
FOREIGN KEY (district_no) REFERENCES District(district_no),
FOREIGN KEY (ward_no) REFERENCES Ward(ward_no),
FOREIGN KEY (community_area_no) REFERENCES Community_Area(community_area_no),
FOREIGN KEY (fbi_code_no) REFERENCES FBI_Code(fbi_code_no),
);
---------------------
QUESTION: Among all the incidents with no arrest made, what is the percentage of them having a generic description of ""BATTERY"" in the IUCR classification? incident with no arrest made refers to arrest = 'FALSE'; general description refers to primary_description; ""BATTERY"" is the primary_description; percentage = Divide (Count(iucr_no where primary_description = 'BATTERY'), Count(iucr_no)) * 100"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many restaurants' owners are in California? restaurants' owners in California refer to owner_state = 'CA';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many restaurants have met all requirements in the inspection? met all requirements in the inspection refers to score = 100;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the inspections carried out in 2016, how many of them are routine? inspections carried out in 2016 refer to YEAR(date) = 2016; routine inspections refer to type = 'Routine - Unscheduled';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Please list the names of all the restaurants that have met all requirements in one inspection. met all requirements refers to inspections where score = 100;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the restaurants being inspected in 2016, how many of them are in San Francisco? inspected in 2016 refers to YEAR(date) = 2016; San Francisco refers to city in ('San Francisco', 'SF' ,'S.F.', 'SAN FRANCISCO');"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What was the type of inspection Tiramisu Kitchen had on 2014/1/14? Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many low risk violations were found in the inspection on 2014/1/14 for Tiramisu Kitchen? Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Please list the names of the restaurants that had a low risk violation in inspections in 2014. inspection in 2014 refers to year(date) = 2014; low risk violations refer to risk_category = 'Low Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the description of the low risk violation of Tiramisu Kitchen on 2014/1/14? Tiramisu Kitchen is the name of the business; 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Please list the descriptions of all the high risk violations of Tiramisu Kitchen. Tiramisu Kitchen is the name of the business; high risk violations refer to risk_category = 'High Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many routine inspections did Tiramisu Kitchen have? Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the routine inspections of Tiramisu Kitchen, how many of them have a score of over 70? Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled'; score of over 70 refers to score > 70;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry? Tiramisu Kitchen and OMNI S.F. Hotel - 2nd Floor Pantry are names of the business; more low risk violations refer to MAX(COUNT(risk_category = 'Low Risk'));"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many high risk violations do the restaurants in San Francisco have in total? restaurants in San Francisco refer to business_id where city in ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO'); high risk violations refer to risk_category = 'High Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which restaurant has the highest total number of high risk violations? the highest total number of high risk violations refer to MAX(COUNT(risk_category = 'High Risk'));"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the average scores of Tiramisu Kitchen in all inspections? avg(score);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which business had the most number of inspections? Give the Id number for that business. the most number of inspections refers to MAX(COUNT(business_id)); Id number for that business refers to business_id;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Tell the Id number of the business with the most number of violations. Id number for that business refers to business_id; the most number of violations refers to MAX(COUNT(business_id));"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Give the name of the business which met all the required standards during the unscheduled routine inspection on 2016/9/28. met all the required standards refers to score = 100; unscheduled routine inspection on 2016/9/28 refers to type = 'Routine - Unscheduled' where date = '2016-09-28';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which business had the most number of high risk violations? Give the name of the business. the most number of high risk violations refers to MAX(COUNT(business_id)) where risk_category = 'High';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many kinds of violations did ""Stacks Restaurant"" have on 2016/10/4? ""Stacks Restaurant"" is the name of the business; date = '2016-10-04';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Give the description of the moderate risk violation which ""Chez Fayala, Inc."" had on 2016/7/1. ""Chez Fayala, Inc."" is the name of the business; moderate risk violation refers to risk_category = 'Moderate Risk'; date = '2016-07-01';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which business had the lowest score for the unscheduled routine inspection on 2016/9/26? Give the name of the business. the lowest score for unscheduled routine inspection refers to type = 'Routine - Unscheduled' where MIN(score); date = '2016-09-26';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Provide the name of the business which had the most number of inspections because of complaint. the most number of inspections because of complaint refers to type = 'Complaint' where MAX(business_id);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many unscheduled routine inspections did ""Soma Restaurant And Bar"" have? ""Soma Restaurant And Bar"" is the name of the business; unscheduled routine inspections refer to type = 'Routine - Unscheduled';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Give the address of the business with the most number of the low risk violations. the most number of the low risk violations refers to MAX(COUNT(business_id)) where risk_category = 'Low Risk' ;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which business was the first one to get a low risk violation because of ""Permit license or inspection report not posted""? Give the name of the business. low risk violation because of ""Permit license or inspection report not posted"" refers to risk_category = 'Low Risk' where description = 'Permit license or inspection report not posted'; business was the first one refers to name where MIN(date);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: For the business which got the most number of violations, how many inspections did it have?"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7? date = '2013-10-07';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the average score for ""Chairman Bao"" in all its unscheduled routine inspections? DIVIDE(SUM(score where type = 'Routine - Unscheduled' and name = 'Chairman Bao'), COUNT(type = 'Routine - Unscheduled' where name = 'Chairman Bao'));"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What percentage of the violations for ""Melody Lounge"" are moderate risks? DIVIDE(COUNT(risk_category = 'Moderate Risk' where name = 'Melody Lounge'), COUNT(business_id where name = 'Melody Lounge')) as percentage;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many eateries are located in Hayward? eateries in Hayward refer city = 'HAYWARD';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many establishments have an inspection score of no more than 50? establishments have the same meaning as businesses; inspection score of no more than 50 refers to score < 50;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many eateries applied in 2012? eateries applied in 2012 refer to business_id where application_date between '2012-01-01' and '2012-12-31';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many foodborne illness investigations were done in 2014? foodborne illness investigations refer to inspections where type = 'Foodborne Illness Investigation'; investigations in 2014 refers to date between '2014-01-01' and '2014-12-31';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many owners have 5 or more establishments? 5 or more establishments COUNT(business_id) > = 5;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What are the names of the establishments that met all of the required standards in 2013? establishments have the same meaning as businesses; met all of the required standards refers to score = 100; year(date) = 2013"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: In 2016, which city has the highest number of establishments with the highest health and safety hazards? the highest health and safety hazards refer to risk_category = 'High Risk'; year(date) = 2016; establishments has the same meaning as businesses;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the name of the establishment with the lowest inspection score of all time? the lowest inspection score refers to MIN(score);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many high risks violations did the Tiramisu Kitchen violate? Tiramisu Kitchen is the name of the business; high risks violations refer to risk_category = 'High Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many establishments with the tax code H24 have complaint inspections of 5 or more? establishments with the tax code H24 refer to business_id where tax_code = 'H24'; complaint inspections of 5 or more refer to inspections where type = 'Complaint' and COUNT(business_id) ≥ 5;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: In 2013, what are the names of the establishments with contaminated or adulterated food? establishments have the same meaning as businesses; contaminated or adulterated food refers to violations where description = 'Contaminated or adulterated food'; date = '2013';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the establishments with a postal code of 94102, how many establishments have a score of 90 or more in 2015? establishment has the same meaning as business; score of 90 or more refers to score ≥ 90; year(date) = 2015;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What are the names of the establishments that met all the required standards for 4 consecutive years? establishment has the same meaning as business; score of 90 or more refers to score ≥ 90; year(date) = 2015; ; met all required standards for 4 consecutive years refers to COUNT(year(date)) = 4 where score = 100;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Between 2014 to 2016, what is the average inpsection score of the establishment owned by Yiu Tim Chan in 808 Pacific Ave, San Francisco? average inspection score refers to avg(score); establishment owned by Yiu Tim Chan refers to business_id where owner_name = 'Yiu Tim Chan'; Between 2014 to 2016 refers to year(date) between 2014 and 2016; address = '808 Pacific Ave'; city = 'San Francisco';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the average score of the establishments owned by the owner with the highest number of establishments? average score refers avg(score); owner with the highest number of establishments refers to owner_name where MAX(COUNT(business_id));"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the name of the establishment with the highest number of low risk violations in 2014? establishment with the highest number of low risk violations refers to business_id where MAX(COUNT(risk_category = 'Low Risk')); year(date) = 2014;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the top 5 owners with highest number of establishments, which owner has the highest number of high risk violations? Give the name of the owner. 5 owners with highest number of establishments refer to owner_name where MAX(COUNT(business_id)) LIMIT 5; the highest number of high risk violations refers to MAX(COUNT(risk_category = 'High Risk'));"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Which establishment has the highest number of inspections done? Give the name of the establishment and calculate for its average score per inspection. establishment refers to business_id; the highest number of inspections refers to MAX(COUNT(business_id)); avg(score);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many eateries got highest inspection in 2013? eateries got highest inspection score in 2013 refer to business_id from inspections where score = 100 and year(date) = 2013;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List down the eateries' IDs with structural inspection type in February 2016. eateries' IDs refer to business_id; structural inspection type refers to inspections WHERE type = 'Structural Inspection'; in February 2016 refers to year(date) = 2016 and month(date) = 2;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many eateries had low risk for violation with unpermitted food facility description? eateries represent business; low risk for violation refers to risk_category = 'Low Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Provide eateries' IDs, risk categories and descriptions with violation ID of 103101. eateries' IDs refer to business_id; violation ID of 103101 refers to violation_type_id = '103101';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: When did eateries from San Bruno city get highest score in inspection? eateries represent business; highest score in inspection refers to score = 100;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Describe the inspection types and violation descriptions under moderate risk category for ART's CAFÉ. ART's CAFÉ is the name of the business; moderate risk category refers to risk_category = 'Moderate Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Mention the violation type ID and description of high risk category for STARBUCKS. STARBUCKS is the name of the business; high risk category refers to risk_category = 'High Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List the inspection dates, scores and inspection types for the eateries with tax code AA. eateries with tax code AA refer to business_id where tax_code = 'AA';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Provide eateries' IDs, names and addresses which were inspected on 30th July, 2016. eateries' IDs inspected on 30th July, 2016 refer to business_id where business_id is not null and date = '2016-07-30';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Describe the violation dates, risk categories, descriptions and names of the eateries under Jade Chocolates LLC. eateries under Jade Chocolates LLC refer to business_id where owner_name = 'Jade Chocolates LLC';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Provide the names, risk categories and descriptions for the eateries with violation type ID of 103111. eateries refer to business_id;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among violations on 3rd June, 2014, describe any 5 names, located cities and tax codes of the eateries with high risk category. eateries with high risk category refer to business_id where risk_category = 'High Risk'; 3rd June, 2014 refers to date = '2014-06-03';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What was the inspection type when El Aji Peruvian Restaurant got highest inspection score? El Aji Peruvian Restaurant is the name of the business; highest inspection score refers to MAX(score);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Who were the owners of eateries which had highest health hazard by improper cooking time or temperatures? owners of eateries refer to owner_name; highest health hazard by improper cooking time or temperatures refers to risk_category = 'High Risk' and description = 'Improper cooking time or temperatures';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List the eateries' names and addresses which had reinspection on 2nd February, 2015. eateries which had reinspection on 2nd February, 2015 refer to business_id where date = '2015-02-02' and type = 'Reinspection/Followup';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List the names and business certificates of the eateries which got inspection score under 50. eateries which got inspection score under 50 refer to business_id where score < 50;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: How many of the businesses are located at 1825 POST St #223, San Francisco? 1825 POST St #223 refers to address = '1825 POST St #223', San Francisco is the name of the city;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List down the owner's name with a zip code 94104. zip code 94104 refers to owner_zip = '94104';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the total number of businesses with a tax code H25?"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: In the violations in 2014, how many of them have a low risk category? in 2014 refers to year(date) = 2014; risk_category = 'Low Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Give the business ID and risk category of the business owned by San Francisco Madeleine, Inc. business owned by San Francisco Madeleine, Inc. refers to business_id where owner_name = 'San Francisco Madeleine, Inc.';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List owner's name of businesses with a 100 score. owner's name of businesses refers to owner_name;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the businesses within the postal code 94117, what is total number of businesses with a high risk category? businesses with a high risk category refer to business_id where risk_category = 'High Risk';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the businesses with score that ranges from 70 to 80, list their violation type ID and risk category. businesses with score that ranges from 70 to 80 refer to business_id where score between 80 and 90;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List the tax code and inspection type of the business named ""Rue Lepic"". ""Rue Lepic"" is the name of the business;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: In businesses that violates 103157 on May 27, 2016 , what is the name of the business that has an unscheduled inspection? businesses that violates 103157 refer to business_id where violation_type_id = 103157; date = '2016-05-27'; unscheduled inspection refers to type = 'Routine - Unscheduled';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Who is the owner of the business that has a high risk violation of 103109 and described as unclean or unsanitary food contact surfaces? owner refers to owner_name; high risk violation of 103109 and described as unclean or unsanitary food contact surfaces refers to risk_category = 'High Risk' where violation_type_id = 103109 and description = 'Unclean or unsanitary food contact surfaces';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the owners from Cameron Park, what is the business name of the business with a score of 100? Cameron Park is a name of city;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List the violation type ID of business with business ID from 30 to 50 and located at 747 IRVING St, San Francisco. business ID from 30 to 50 refers to business_id between 30 and 50; address = '747 IRVING St'; city = 'San Francisco';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: What is the owner's name of the of the business that violates 103156 on June 12, 2014? business that violates 103156 on June 12, 2014 refers to business_id where violation_type_id = 103156 and date = '2014-06-12';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: In businesses with an owner address 500 California St, 2nd Floor of Silicon Valley, list the type of inspection of the business with the highest score. the highest score MAX(score); Silicon Valley is located in 'SAN FRANCISCO';"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: Among the violations in 2016, how many of them have unscheduled inspections? unscheduled inspections refer to type = 'Routine - Unschedule'; year(date) = 2016;"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: List the business' name and risk category of businesses with a score greater than the 80% of average score of all businesses. score greater than the 80% of average score of all businesses refers to score > MULTIPLY(0.8, avg(score) from inspections);"
food_inspection,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE businesses (
business_id integer,
name text,
address text,
city text,
postal_code text,
latitude real,
longitude real,
phone_number integer,
tax_code text,
business_certificate integer,
application_date date,
owner_name text,
owner_address text,
owner_city text,
owner_state text,
owner_zip text,
PRIMARY KEY (business_id),
);
CREATE TABLE inspections (
business_id integer,
score integer,
date date,
type text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
CREATE TABLE violations (
business_id integer,
date date,
violation_type_id text,
risk_category text,
description text,
FOREIGN KEY (business_id) REFERENCES businesses(business_id),
);
---------------------
QUESTION: In businesses with a score lower than 95 and located around the postal code of 94110, what is the percentage of businesses with a risk category of low risk? DIVIDE(COUNT(business_id where risk_category = 'Low Risk', score < 95 and postal_code = 94110), COUNT(business_id where score < 95 and postal_code = 94110)) as percentage;"
craftbeer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE breweries (
id integer,
name text,
city text,
state text,
PRIMARY KEY (id),
);
CREATE TABLE beers (
id integer,
brewery_id integer,
abv real,
ibu real,
name text,
style text,
ounces real,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which distinct state makes beer that has the least amount of bitterness?"
craftbeer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE breweries (
id integer,
name text,
city text,
state text,
PRIMARY KEY (id),
);
CREATE TABLE beers (
id integer,
brewery_id integer,
abv real,
ibu real,
name text,
style text,
ounces real,
PRIMARY KEY (id),
);
---------------------
QUESTION: Where in New York can you locate the brewery that makes the bitterest beer? List both the brewery's name and the name of the city. The more IBU, the more bitter the beer is, bitterest means highest IBU."
craftbeer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE breweries (
id integer,
name text,
city text,
state text,
PRIMARY KEY (id),
);
CREATE TABLE beers (
id integer,
brewery_id integer,
abv real,
ibu real,
name text,
style text,
ounces real,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the average alcohol content per 12-ounce beer bottle produced by Boston Beer Company?"
craftbeer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE breweries (
id integer,
name text,
city text,
state text,
PRIMARY KEY (id),
);
CREATE TABLE beers (
id integer,
brewery_id integer,
abv real,
ibu real,
name text,
style text,
ounces real,
PRIMARY KEY (id),
);
---------------------
QUESTION: Of all the beer styles produced by Stevens Point Brewery, how many percent do they allot for American Adjunct Lager? Percent allotted = count(American Adjunct Lager beer styles) / count(styles) * 100%"
craftbeer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE breweries (
id integer,
name text,
city text,
state text,
PRIMARY KEY (id),
);
CREATE TABLE beers (
id integer,
brewery_id integer,
abv real,
ibu real,
name text,
style text,
ounces real,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which city and state produces the most and least bitter beer, and what is the difference in bitterness between the two? List also the names of the beer. The more IBU, the more bitter the beer is, most bitter means highest IBU; The less IBU, the less bitter the beer is, least bitter means lowest IBU"
craftbeer,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE breweries (
id integer,
name text,
city text,
state text,
PRIMARY KEY (id),
);
CREATE TABLE beers (
id integer,
brewery_id integer,
abv real,
ibu real,
name text,
style text,
ounces real,
PRIMARY KEY (id),
);
---------------------
QUESTION: When compared to the total number of breweries in the US producing American Blonde Ale, how many in the state of Wisconsin produces American Blonde Ale? Indicate your answer in percentage (%). Percentage of the state of Wisconsin produces American Blonde Ale could be computed by count(breweries in Wisconsin producing American Blonde Ale) / count(all breweries)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What is the title of the recipe that is most likely to gain weight? most likely to gain weight refers to MAX(total_fat)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What is the unsaturated fat content in the recipe ""Raspberry Chiffon Pie""? Raspberry Chiffon Pie refers to title; unsaturated fat refers to SUBTRACT(total_fat, sat_fat)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Please list the titles of all the recipes that are salt/sodium-free. salt/sodium-free refers to sodium < 5"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Please list the titles of all the recipes that may lead to constipation, feeling sick or stomach pain. may lead to constipation, feeling sick or stomach pain refers to iron > 20"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which recipe is more beneficial in wound healing, ""Raspberry Chiffon Pie"" or ""Fresh Apricot Bavarian""? Raspberry Chiffon Pie and Fresh Apricot Bavarian are title; vitamin_c is higher refers to MAX(vitamin_c)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Among the recipes that take more than 10 minutes to prepare, what is the title of the one with the most calories? more than 10 minutes to prepare refers to prep_min > 10; the most calories refers to MAX(calories)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many calories does the recipe ""Raspberry Chiffon Pie"" contain? Raspberry Chiffon Pie refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Is the ingredient ""graham cracker crumbs"" optional in the recipe ""Raspberry Chiffon Pie""? 'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many ingredients must be rationed in the recipe ""Raspberry Chiffon Pie""? Raspberry Chiffon Pie refers to title; ingredient must be rationed refers to max_qty = min_qty"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Please list the names of all the ingredients needed for the recipe ""Raspberry Chiffon Pie"" that do not need preprocessing. Raspberry Chiffon Pie refers to title; do not need preprocessing refers to preparation IS NULL"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many recipes include the ingredient ""graham cracker crumbs""? 'graham cracker crumbs' is a name of an ingredient"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: At least how many cups of graham cracker crumbs does the recipe ""Raspberry Chiffon Pie"" need? 'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many calories from fat are there in the recipe ""Raspberry Chiffon Pie""? calories from fat refers to MULTIPLY(calories, pcnt_cal_fat)||'%; Raspberry Chiffon Pie refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many calories on average does a recipe that comes from ""Produce for Better Health Foundation and 5 a Day"" contain? Produce for Better Health Foundation and 5 a Day is a source of recipe; calculation = DIVIDE(SUM(calories), COUNT(recipe_id))"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many calories does the turkey tenderloin bundles recipe have? turkey tenderloin refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many cups of 1% lowfat milk should be added to no.1436 recipe? 1% lowfat milk is a name of an ingredient; no.1436 recipe refers to recipe_id = 1436; max_qty = min_qty"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which recipe in the database contains the most total fat? Give its title. the most total fat refers to MAX(total_fat)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many times do seedless red grapes appear in the recipes? seedless red grapes is a name of an ingredient"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: State the name of the optional ingredient of no.1397 recipe. no.1397 recipe refers to recipe_id = 1397; optional ingredient refers to optional = 'TRUE'"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which recipe needs the most frozen raspberries in light syrup? State its title. frozen raspberries in light syrup is a name of an ingredient; max_qty = min_qty"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Give the name of the most widely used ingredient. the most widely used ingredient refers to MAX(COUNT(ingredient_id))"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake? apple juice is a name of an ingredient; raspberry-pear couscous cake refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many cups of almonds do you need for a chicken pocket sandwich? cups is a unit; almonds is a name of an ingredient; chicken pocket sandwich refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Name the recipe with the most Vitamin C. the most Vitamin C refers to MAX(vitamin_c)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How much Vitamin A is in Sherry beef? Sherry beef refers to title = 'Sherried Beef'"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: State the title of the recipe with most kinds of ingredients. the most kinds of ingredients refers to MAX(COUNT(recipe_id))"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many times is the sodium content in Lasagne-Spinach Spirals to Beef and Spinach Pita Pockets? sodium is a name of an ingredient; calculation = DIVIDE(SUM(title = 'Lasagne-Spinach Spirals' THEN sodium), SUM(title = 'Beef and Spinach Pita Pockets' THEN sodium))"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What is the average calorie count for all recipes using coarsely ground black pepper? coarsely ground black pepper is a name of an ingredient; calculation = AVG(calories)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What are the names of the recipes that will cause stomach pain? cause stomach pain refers to iron > 20"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many ingredients are there in Apricot Yogurt Parfaits? Apricot Yogurt Parfaits refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What are the names of the ingredients that need to be cook in beef broth? 'cook in beef broth' refers to a preparation"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many ingredients are there in the recipe that is best in helping your body's natural defence against illness and infection? best in helping your body's natural defence against illness and infection refers to MAX(vitamin_a);"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What are the names of the top 5 recipes that are best for wound healing? names of the recipes refers to title; best for wound healing refers to MAX(vitamin_c)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which ingredient appeared the least in recipes? ingredient appeared the least in recipes refers to MIN(ingredient_id)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many baking product ingredients are there in the No-Bake Chocolate Cheesecake? baking product is a category; No-Bake Chocolate Cheesecake refers to title;"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: List all the ingredients for Strawberry Sorbet. Strawberry Sorbet refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What are the optional ingredients for Warm Chinese Chicken Salad? optional refers to optional = 'TRUE'; Warm Chinese Chicken Salad refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Among the recipes with alcohol content over 10, which recipe takes the longest to prepare? with alcohol content over 10 refers to alcohol > 10; takes the longest to prepare refers to MAX(prep_min)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many servings does the recipe with the highest unsaturated fat have? with the highest unsaturated fat refers MAX(SUBTRACT(total_fat, sat_fat))"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Among the recipes whose source is the National Potato Board, which recipe has the highest calories? the National Potato Board is a source; the highest calories refers to MAX(calories)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which recipe has the highest number of ingredients? Calculate the said recipe's total time of cooking. the highest number of ingredients refers to MAX(ingredient_id); total time refers to recipe_id, total time of cooking refers to TOTAL(prep_min, cook_min, stnd_min)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which ingredient appeared the most in recipes? Calculate its amount of appearance in percentage. ingredient appeared the most in recipes refers to MAX(COUNT(ingredient_id)); calculation = MULTIPLY(DIVIDE(COUNT(MAX(ingredient_id)), COUNT(ingredient_id)), 100)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Provide the title and total time of the recipe which has the highest possibility of gaining weight. the highest possibility of gaining weight refers to MAX(total_fat); total time refers to recipe_id, total time refers to TOTAL(prep_min, cook_min, stnd_min)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which recipes contain almond extract? almond extract is a name of an ingredient"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: List the ingredients in Tomato-Cucumber Relish. Tomato-Cucumber Relish refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many ingredients are needed to prepare Idaho Potato Supreme? Idaho Potato Supreme refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Provide the ingredients that are rationed in the recipe with the highest carbohydrate content. the highest carbohydrate content refers to MAX(carbo)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Name the recipes which can lead to constipation. can lead to constipation refers to iron > 20"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Describe the ingredients in the recipe with the highest vitamin that helps vision in dim light. the highest vitamin that helps vision in dim light refers to MAX(vitamin_a)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Provide the ingredients and maximum quantities of the recipe which can serve 7 people. can serve 7 people refers to servings = 7"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Among the recipes from The California Tree Fruit Agreement, calculate the percentage of sodium-free recipes. The California Tree Fruit Agreement is a source; calculation = MULTIPLY(DIVIDE(COUNT(sodium BETWEEN 0 AND 5 THEN recipe_id), COUNT(recipe_id)), 100)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: List the ingredients which measure in slices. slices refers to unit = 'slice(s)'"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many recipes can be made with canned dairy? canned dairy is a category"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Provide the title and total time of the recipe which can be made with only lima beans. total time refers to total time refers to TOTAL(prep_min, cook_min, stnd_min); lima beans is a name of an ingredient"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Among the recipes with sea bass, how many percent of recipes can serve 10 people and above? sea bass is a name of an ingredient; can serve 10 people and above refers to servings > = 10; calculation = MULTIPLY(DIVIDE(COUNT(servings > = 10 THEN recipe_id)), COUNT(recipe_id), 100)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How much fat does the Raspberry Chiffon Pie have? Raspberry Chiffon Pie refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What is the percentage calories protein of Raspberry Chiffon Pie? Raspberry Chiffon Pie refers title; percentage calories protein refers to pcnt_cal_prot"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many ingredients are required to make the Raspberry Chiffon Pie? Raspberry Chiffon Pie refer to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: List the names of alcohol free recipes. alcohol free refers to alcohol = 0"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What is the average vitamin C amount of all cakes? average vitamin C refers to AVG(vitamin_c); all cakes refers to title LIKE '%cake%'"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many dairy recipes can serve more than 10 people? dairy recipes refers to category = 'dairy'; serve more than 10 people refers to servings > 10"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: List the names of recipes that can lead to constipation. lead to constipation refers to iron > 20"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Which recipe has the highest calories? the highest calories refers to MAX(calories)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: How many recipes are non-dairy? non-dairy refers to category NOT LIKE '%dairy"""
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: List all the ingredients of Apricot Yogurt Parfaits. Apricot Yogurt Parfaits refers to title"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Identify recipes with different maximum and minimum quantities. maximum quantities refers to max_qty; minimum quantities refers to max_qty <> min_qty"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: What ingredients does the longest cooking time recipe have? the longest cooking time refers to MAX(cook_min)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Calculate the percentage of recipes with no cholesterol included and have a cooking time less than 20 minutes among all recipes. no cholesterol refers to cholestrl = 0; cooking time less than 20 minutes refers to cook_min < 20; calculation = MULTIPLY(DIVIDE(COUNT(cholestrl = 0 THEN recipe_id), COUNT(recipe_id)), 100)"
cookbook,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Ingredient (
ingredient_id integer,
category text,
name text,
plural text,
PRIMARY KEY (ingredient_id),
);
CREATE TABLE Recipe (
recipe_id integer,
title text,
subtitle text,
servings integer,
yield_unit text,
prep_min integer,
cook_min integer,
stnd_min integer,
source text,
intro text,
directions text,
PRIMARY KEY (recipe_id),
);
CREATE TABLE Nutrition (
recipe_id integer,
protein real,
carbo real,
alcohol real,
total_fat real,
sat_fat real,
cholestrl real,
sodium real,
iron real,
vitamin_c real,
vitamin_a real,
fiber real,
pcnt_cal_carb real,
pcnt_cal_fat real,
pcnt_cal_prot real,
calories real,
PRIMARY KEY (recipe_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
);
CREATE TABLE Quantity (
quantity_id integer,
recipe_id integer,
ingredient_id integer,
max_qty real,
min_qty real,
unit text,
preparation text,
optional text,
PRIMARY KEY (quantity_id),
FOREIGN KEY (recipe_id) REFERENCES Recipe(recipe_id),
FOREIGN KEY (ingredient_id) REFERENCES Ingredient(ingredient_id),
);
---------------------
QUESTION: Among all recipes containing cheese, what is the percentage of recipes with calories greater than 200? cheese is a category; calories greater than 200 refers to calories > 200; calculation = MULTIPLY(DIVIDE(COUNT(calories > 200 THEN recipe_id), COUNT(recipe_id)), 100)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which employee has the highest salary? Please give his or her full name. the highest salary refers to MAX(salary); full name = firstname, lastname"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many emplyees have a good job performance? good job performance refers to performance = 'Good'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Please list the social security numbers of the male employees with a salary of over $70,000 a year. social security numbers refers to ssn; male employees refers to gender = 'M'; salary of over $70,000 a year refers to salary > '70000'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the required education for the position of regional manager? required education refers to educationrequired; position of regional manager refers to  positiontitle = 'Regional Manager'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which position has a lower minimum salary, Account Representative or Trainee? position of Account Representative refers to positiontitle = 'Account Representative'; position of Trainee refers to positiontitle = 'Trainee'; lower minimum salary refers to MIN(minsalary)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: In which city's office does Sandy Adams work at? Sandy Adams is the fullname of an employee; full name = firstname, lastname; city refers to locationcity"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Among the employees working at the office in New York, how many of them have a good job performance? Sandy Adams is the fullname of an employee; full name = firstname, lastname; New York refers to state = 'NY'; good job performance refers to performance = 'Good';"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the office phone number of the location at which Sandy Adams works? Sandy Adams is the fullname of an employee; full name = firstname, lastname;"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many male employees work at the address 450 Peachtree Rd? male employees refers to gender = 'M'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many employees work as an Account Representative? work as an Account Representative refers to positiontitle = 'Account Representative'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How much higher is James Johnson's salary from the minimum salary of his title? James Johnson is the fullname of an employee; full name = firstname, lastname; minimum salary refers to minsalary; calculation = SUBTRACT(salary, minsalary)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Among the employees who are Trainees, how many of them work in New York? Trainees is a position title; California refers to state = 'NY'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Please list the full names of the employees who are working as a Trainee. full name = firstname, lastname; trainees is a position title"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams? Jose Rodriguez AND Sandy Adams are the fullname of employee; full name = firstname, lastname; higher education level refers to MAX(educationrequired)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Please list the zip codes of the offices where all the male employees with a good job performance work at. male employees refers to gender = 'M'; good job performance refers to performance = 'Good'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Please list the social security numbers of all the employees who work in California. social security numbers refers to ssn; California refers to state = 'CA'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year? Trainee is a position title; salary of over 20,000 refers to salary > '20000'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the average salary of the employees who work as a Trainee? average = DIVIDE( SUM(salary), COUNT(positiontitle) where positiontitle = 'Trainee'; Trainee is a position title"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: By what percentage is the average salary of Trainees higher than the minimum salary of this postion? AVG(salary); Trainee is a position title; minimum salary refers to minsalary; calculation = DIVIDE(SUBTRACT(AVG(salary), minsalary), minsalary) * 100"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Give the number of female employees. number of female employees means COUNT(gender = 'F')"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: State the name of the city where Jose Rodriguez works. Jose Rodriguez is the fullname of an employee; full name = firstname, lastname; name of city refers to locationcity"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: In which state does Emily Wood work? Emily Wood is the full name of an employee; full name = firstname, lastname;"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the education required for David Whitehead to reach his current position? David Whitehead is the full name of an employee; full name = firstname, lastname"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many employees are there in the ""Miami"" office? Miami office refers to locationcity = 'Miami'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Who is the highest paid employee in ""Boston""? Give the full name. Boston refers to locationcity = 'Boston'; the highest paid employee refers to MAX(salary); full name = firstname, lastname"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Who is the employee in “New York City” with a good performance? Give the social security number of the employee. New York City refers to locationcity = 'New York City'; good performance refers to performance = 'Good'; social security number refers to ssn"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many ""account representatives"" are there in Chicago with a good performance? account representatives is a position title; Chicago refers to locationcity = 'Chicago'; good performance refers to performance = 'Good'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is Kenneth Charles's position title? Kenneth Charles is the full name of an employee; full name = firstname, lastname"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Give the full address of the office of the highest paid manager. the highest paid refers to MAX(salary); manager is a position title"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the max salary for 'Tracy Coulter' if he/she stays on his/her position? Tracy Coulter is the full name of an employee; full name = firstname, lastname"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position? Jose Rodriguez is the full name of an employee; full name = firstname, lastname; calculation = DIVIDE(SUBTRACT(maxsalary, salary), salary) * 100"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many employees whose performance is poor have a salary of over $50,000 per year? performance is poor refers to performance = 'Poor'; salary of over $50,000 refers to salary > '50000'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Who is the employee with the highest salary? Specify his/her full name. the highest salary refers to MAX(salary); full name = firstname, lastname"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many positions have a maximum salary of no more than US$1000,000? maximum salary of no more than US$1000,000 refers to maxsalary < '100000';"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How much is the salary of the first ever employee that was hired? first-ever employee that was hired refers to MIN(hiredate)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How much is the minimum salary given to the position with the most complex work? most complex work refers to MAX(educationrequired); minimum salary refers to minsalary"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the full office location address where most of the employees work at? full office location address = address, locationcity, state, zipcode; location where most employees work at refers to MAX(locationID)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the average salary of all employees with a 2 year degree position? 2 year degree refers to educationrequired = '2 year degree'; calculation = DIVIDE(SUM(salary), COUNT(positiontitle))"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many male Regional Managers are there? male refers to gender = 'M'; Regional Managers is a position title"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which position has the highest amount of poor performing employees? poor performing employees refers to performance = 'Poor'; the highest amount of employees refers to MAX(positiontitle)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which position has the highest number of female employees with a 2 year degree? 2 year degree refers to educationrequired = '2 year degree'; female refers to gender = 'F'; the highest number of employees refers to MAX(positionID)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: How many Account Representatives are there in Illinois with satisfying performance? Account Representatives is a position title; satisfying performance mostly refers togood performance"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the average salary of the worst performing managers? the worst performing refers to performance = 'Poor'; manager is a positiontitle; average salary refers to AVG(salary)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: In which state can you find the highest amount of good performing Account Representatives? good performing refers to performance = 'Good'; Account Representatives is a positiontitle; highest amount of employee refers to MAX(positionID);"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Mention the employee's full name and performance status who got the lowest in salary per year. full name = firstname, lastname; the lowest salary refers to MIN(salary)"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: List the location cities in the Western states. Western states refers to state = 'CO' OR state = 'UT' OR state = 'CA'; location cities refers to locationcity"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which city and address has zip code of above 90000? zip code of above 90000 refers to zipcode > 90000; city refers to locationcity"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Which positions are suitable with 4 years degree education? 4 years degree education refers to educationrequired = '4 year degree'; positions refers to positiontitle"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the maximum salary of position ""Trainer""? maximum salary refers to maxsalary; Trainee is a positiontitle"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: List the full name and social security number of the account representative with average performance. full name = firstname, lastname; social security number refers to ssn; account representative is a position title; average performance refers to performance = 'Average'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: When was Emily Wood hired? Mention her position and salary. Emily Wood is the full name of an employee; full name = firstname, lastname; when was she hired refers to hiredate"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What are the maximum and minimum salary range and position title of Bill Marlin? Bill Marlin is the full name of an employee; full name = firstname, lastname; maximum salary refers to maxsalary; minimum salary refers to minsalary"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: List the full names, gender and positions who's location is in New York city. full name = firstname, lastname; New York city refers to locationcity = 'New York City'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Mention the full name, hired date and performance status of the employee whose location is in Utah state. full name = firstname, lastname; Utah refers to state = 'UT'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Among the employees with poor performance, provide the managers' full names, location city, address and its zip code. poor performance refers to performance = 'Poor'; full name = firstname, lastname; managers is a position title"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status. account representative is a position title; full name = firstname, lastname; poor performance refers to performance = 'Poor'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Write down the full name, performance status and located city of the employee who's social security number is ""767-74-7373"". full name = firstname, lastname; ssn = '767-74-7373'"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Describe the employees' full name, positions, located city and office phone number within Colorado state. full name = firstname, lastname; Colorado state refers to state = 'CO'; positions refers to positiontitle; located city refers to locationcity; office phone number refers to officephone;"
human_resources,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE location (
locationID integer,
locationcity text,
address text,
state text,
zipcode integer,
officephone text,
PRIMARY KEY (locationID),
);
CREATE TABLE position (
positionID integer,
positiontitle text,
educationrequired text,
minsalary text,
maxsalary text,
PRIMARY KEY (positionID),
);
CREATE TABLE employee (
ssn text,
lastname text,
firstname text,
hiredate text,
salary text,
gender text,
performance text,
positionID integer,
locationID integer,
PRIMARY KEY (ssn),
FOREIGN KEY (positionID) REFERENCES position(positionID),
FOREIGN KEY (locationID) REFERENCES location(locationID),
);
---------------------
QUESTION: Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city. highest salary refers to MAX(salary); name = firstname, lastname; calculation = DIVIDE(MAX(salary), 12)"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: Which trip had the longest duration? State the start and end station. start station refers to start_station_name; end station refers to end_station_name;"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: What is the percentage of the trip were done by a subscriber? subscription_type = 'Subscriber'; DIVIDE(COUNT(id where subscription_type = 'Subscriber'), COUNT(id)) as percentage;"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: State the final station of bike id 13. Which city was it at? final station refers to end_station_name where MAX(end_date);"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: Name all the trips where the bike was borrowed and returned on a different day. State the city where the bike was returned. the bike was borrowed and returned on a different day implies that start_date and end_date are not equal to each other; where the bike was returned refers to end_station_name;"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: Which is the station where no bike could not be borrowed form on the 2013/11/03 02:01:01? State the location of the station. Latitude and longitude coordinates can be used to indicate a location, where latitude refers to lat longtitude refer to long; bikes_available = 0 means no bike can be borrowed; 3/11/2013 02:01:01 refers to time;"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: Name the station and city with the most borrowed bike. the station with the most borrowed bikes refers to MAX(start_station);"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: What was the hottest temperature on the day of trip ID 4080? the hottest temperature refers to max_temperature_f;"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: At what date and time did San Jose Diridon Caltrain Station have most bikes available. San Jose Diridon Caltrain Station is the name of the station; most bikes available refers to MAX(bikes_available);"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: Name all the trip on the days when it rained. State the duration of the trip events = 'Rain';"
bike_share_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE station (
id integer,
name text,
lat real,
long real,
dock_count integer,
city text,
installation_date text,
PRIMARY KEY (id),
);
CREATE TABLE status (
station_id integer,
bikes_available integer,
docks_available integer,
time text,
);
CREATE TABLE trip (
id integer,
duration integer,
start_date text,
start_station_name text,
start_station_id integer,
end_date text,
end_station_name text,
end_station_id integer,
bike_id integer,
subscription_type text,
zip_code integer,
PRIMARY KEY (id),
);
CREATE TABLE weather (
date text,
max_temperature_f integer,
mean_temperature_f integer,
min_temperature_f integer,
max_dew_point_f integer,
mean_dew_point_f integer,
min_dew_point_f integer,
max_humidity integer,
mean_humidity integer,
min_humidity integer,
max_sea_level_pressure_inches real,
mean_sea_level_pressure_inches real,
min_sea_level_pressure_inches real,
max_visibility_miles integer,
mean_visibility_miles integer,
min_visibility_miles integer,
max_wind_Speed_mph integer,
mean_wind_speed_mph integer,
max_gust_speed_mph integer,
precipitation_inches text,
cloud_cover integer,
events text,
wind_dir_degrees integer,
zip_code text,
);
---------------------
QUESTION: List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed. 37.331415 and -121.8932 are latitude (lat) and longitude (long) coordinates indicating location; returned at refers to end_station_name; the date the bike was borrowed refers to start_date;"
